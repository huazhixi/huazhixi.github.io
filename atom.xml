<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ivan&#39;s Blog</title>
  
  <subtitle>华曦之家</subtitle>
  <link href="http://www.hxtec.top/atom.xml" rel="self"/>
  
  <link href="http://www.hxtec.top/"/>
  <updated>2022-09-17T05:08:57.260Z</updated>
  <id>http://www.hxtec.top/</id>
  
  <author>
    <name>ivan_华之曦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>block本质</title>
    <link href="http://www.hxtec.top/2022/09/15/block%E6%9C%AC%E8%B4%A8/"/>
    <id>http://www.hxtec.top/2022/09/15/block%E6%9C%AC%E8%B4%A8/</id>
    <published>2022-09-15T12:07:40.000Z</published>
    <updated>2022-09-17T05:08:57.260Z</updated>
    
    <content type="html"><![CDATA[<h4 id="block修饰符"><a href="#block修饰符" class="headerlink" title="__block修饰符"></a>__block修饰符</h4><ul><li>__block可以用于解决block内部无法修改auto变量值的问题</li><li>__block不能修饰全局变量、静态变量（static）</li><li>编译器会将__block变量包装成一个对象</li></ul><h6 id="示例1：-block修饰auto常量时"><a href="#示例1：-block修饰auto常量时" class="headerlink" title="示例1：__block修饰auto常量时"></a>示例1：__block修饰auto常量时</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">__block int age = 10;</span><br><span class="line">^&#123;</span><br><span class="line">    NSLog(@&quot;age is %d&quot;, age);</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">//C++源码分析</span><br><span class="line">//block对象信息</span><br><span class="line">struct __block_impl &#123;</span><br><span class="line">    void *isa;</span><br><span class="line">    int Flags;</span><br><span class="line">    int Reserved;</span><br><span class="line">    void *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//block描述信息，大小，copy, dispose操作</span><br><span class="line">struct __main_block_desc_0 &#123;</span><br><span class="line">    size_t reserved;</span><br><span class="line">    size_t Block_size;</span><br><span class="line">    void (*copy)(void);</span><br><span class="line">    void (*dispose)(void);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//被包装成__Block_byref_age_0结构体</span><br><span class="line">struct __Block_byref_age_0 &#123;</span><br><span class="line">  void *__isa;</span><br><span class="line">__Block_byref_age_0 *__forwarding;</span><br><span class="line"> int __flags;</span><br><span class="line"> int __size;</span><br><span class="line"> int age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//block结构体内容</span><br><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  NSObject *p;</span><br><span class="line">  </span><br><span class="line">  //被包装成一个函数</span><br><span class="line">  __Block_byref_age_0 *age; // by ref</span><br><span class="line">  </span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, NSObject *_p, __Block_byref_age_0 *_age, int flags=0) : p(_p), age(_age-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="示例1：-block修饰对象时"><a href="#示例1：-block修饰对象时" class="headerlink" title="示例1：__block修饰对象时"></a>示例1：__block修饰对象时</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//ARC环境下，编译器会对block进行copy操作。</span><br><span class="line">Person *person = [[Person alloc] init];</span><br><span class="line">Block block = ^&#123;</span><br><span class="line">    NSLog(@&quot;%p&quot;, person);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br><span class="line">        </span><br><span class="line">//C++源码解析：</span><br><span class="line">struct __block_impl &#123;</span><br><span class="line">    void *isa;</span><br><span class="line">    int Flags;</span><br><span class="line">    int Reserved;</span><br><span class="line">    void *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct __main_block_desc_0 &#123;</span><br><span class="line">    size_t reserved;</span><br><span class="line">    size_t Block_size;</span><br><span class="line">    void (*copy)(void);</span><br><span class="line">    void (*dispose)(void);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct __Block_byref_weakPerson_0 &#123;</span><br><span class="line">  void *__isa; // 8</span><br><span class="line"> __Block_byref_weakPerson_0 *__forwarding; // 8</span><br><span class="line"> int __flags; // 4</span><br><span class="line"> int __size; // 4</span><br><span class="line"> </span><br><span class="line"> //内存管理相关</span><br><span class="line"> void (*__Block_byref_id_object_copy)(void*, void*); // 8</span><br><span class="line"> void (*__Block_byref_id_object_dispose)(void*); // 8</span><br><span class="line"> </span><br><span class="line"> Person *__weak weakPerson;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  </span><br><span class="line">  __Block_byref_weakPerson_0 *weakPerson; // by ref</span><br><span class="line">  </span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_weakPerson_0 *_weakPerson, int flags=0) : weakPerson(_weakPerson-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="block的内存管理"><a href="#block的内存管理" class="headerlink" title="__block的内存管理"></a>__block的内存管理</h4><ul><li>当block在栈上时，并不会对__block变量产生强引用</li><li>当block被copy到堆时<ul><li>会调用block内部的copy函数</li><li>copy函数内部会调用_Block_object_assign函数</li><li>_Block_object_assign函数会对__block变量形成强引用（retain）</li></ul></li><li>当block从堆中移除时<ul><li>会调用block内部的dispose函数</li><li>dispose函数内部会调用_Block_object_dispose函数</li><li>_Block_object_dispose函数会自动释放引用的__block变量（release）</li></ul></li></ul><h5 id="block的-forwarding指针"><a href="#block的-forwarding指针" class="headerlink" title="__block的__forwarding指针"></a>__block的__forwarding指针</h5><ul><li>在栈上的话，__forwarding指向自己</li><li>在堆上的话，__forwarding指向复制到堆上的的__block变量结构体的指针</li></ul><h4 id="对象类型的auto变量、-block变量"><a href="#对象类型的auto变量、-block变量" class="headerlink" title="对象类型的auto变量、__block变量"></a>对象类型的auto变量、__block变量</h4><ul><li>当block在栈上时，对它们都不会产生强引用</li><li>当block拷贝到堆上时，都会通过copy函数来处理它们<ul><li>__block变量（假设变量名叫做a）</li><li>_Block_object_assign((void*)&amp;dst-&gt;a, (void*)src-&gt;a, 8&#x2F;<em>BLOCK_FIELD_IS_BYREF</em>&#x2F;);</li></ul></li><li>对象类型的auto变量（假设变量名叫做p）<ul><li>_Block_object_assign((void*)&amp;dst-&gt;p, (void*)src-&gt;p, 3&#x2F;<em>BLOCK_FIELD_IS_OBJECT</em>&#x2F;);</li></ul></li><li>当block从堆上移除时，都会通过dispose函数来释放它们<ul><li>__block变量（假设变量名叫做a）</li><li>_Block_object_dispose((void*)src-&gt;a, 8&#x2F;<em>BLOCK_FIELD_IS_BYREF</em>&#x2F;);</li></ul></li><li>对象类型的auto变量（假设变量名叫做p）<ul><li>_Block_object_dispose((void*)src-&gt;p, 3&#x2F;<em>BLOCK_FIELD_IS_OBJECT</em>&#x2F;);</li></ul></li></ul><h4 id="被-block修饰的对象类型"><a href="#被-block修饰的对象类型" class="headerlink" title="被__block修饰的对象类型"></a>被__block修饰的对象类型</h4><ul><li>当__block变量在栈上时，不会对指向的对象产生强引用</li><li>当__block变量被copy到堆时<ul><li>会调用__block变量内部的copy函数</li><li>copy函数内部会调用_Block_object_assign函数</li><li>_Block_object_assign函数会根据所指向对象的修饰符（__strong、__weak、__unsafe_unretained）做出相应的操作，形成强引用（retain）或者弱引用（&#x3D;&#x3D;注意：这里仅限于ARC时会retain，MRC时不会retain&#x3D;&#x3D;）</li></ul></li><li>如果__block变量从堆上移除<ul><li>会调用__block变量内部的dispose函数</li><li>dispose函数内部会调用_Block_object_dispose函数</li><li>_Block_object_dispose函数会自动释放指向的对象（release）</li></ul></li></ul><h4 id="循环引用问题"><a href="#循环引用问题" class="headerlink" title="循环引用问题"></a>循环引用问题</h4><h5 id="解决循环引用问题-ARC"><a href="#解决循环引用问题-ARC" class="headerlink" title="解决循环引用问题 - ARC"></a>解决循环引用问题 - ARC</h5><ul><li>用__weak、__unsafe_unretained解决<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//用__weak解决</span><br><span class="line">__weak typeof(self) weakSelf = self;</span><br><span class="line">self.block = ^&#123;</span><br><span class="line">    NSLog(@&quot;%p&quot;, weakSelf);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//用__unsafe_unretained解决</span><br><span class="line">__unsafe_unretained id weakSelf = self;</span><br><span class="line">self.block = ^&#123;</span><br><span class="line">    NSLog(@&quot;%p&quot;, weakSelf);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">// __weak：不会产生强引用，指向的对象销毁时，会自动让指针置为nil</span><br><span class="line">// __unsafe_unretained：不会产生强引用，不安全，指向的对象销毁时，指针存储的地址值不变</span><br></pre></td></tr></table></figure></li><li>用__block解决（必须要调用block）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__block id weakSelf = self;</span><br><span class="line">self.block = ^&#123;</span><br><span class="line">    NSLog(@&quot;%p&quot;, weakSelf);</span><br><span class="line">    weakSelf = nil;</span><br><span class="line">&#125;;</span><br><span class="line">self.block()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;block修饰符&quot;&gt;&lt;a href=&quot;#block修饰符&quot; class=&quot;headerlink&quot; title=&quot;__block修饰符&quot;&gt;&lt;/a&gt;__block修饰符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;__block可以用于解决block内部无法修改auto变量值的问题&lt;/</summary>
      
    
    
    
    
    <category term="block" scheme="http://www.hxtec.top/tags/block/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
