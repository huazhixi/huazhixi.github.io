<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ivan&#39;s Blog</title>
  
  <subtitle>华曦之家</subtitle>
  <link href="http://www.hxtec.top/atom.xml" rel="self"/>
  
  <link href="http://www.hxtec.top/"/>
  <updated>2022-09-27T07:33:02.063Z</updated>
  <id>http://www.hxtec.top/</id>
  
  <author>
    <name>ivan_华之曦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存管理-自动释放池(AutoReleasePool)</title>
    <link href="http://www.hxtec.top/2022/09/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0-AutoReleasePool/"/>
    <id>http://www.hxtec.top/2022/09/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0-AutoReleasePool/</id>
    <published>2022-09-26T16:44:31.000Z</published>
    <updated>2022-09-27T07:33:02.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>AutoReleasePool是Objective—C中一种内存自动回收的机制，他可以将加入AutoReleasePool中的变量release的时机延迟。也就是说，当你创建一个对象，在正常情况下，变量会在超出其作用域的时候立即release，如果将该对象加入到自动释放池中，这个对象并不会立即释放，而是等到runloop休眠或者超出AutoReleasePool的作用域{}之后才会被释放。</p></blockquote><h2 id="本质："><a href="#本质：" class="headerlink" title="本质："></a>本质：</h2><ul><li>autorelease本质就是延迟调用release方法<ul><li>MRC环境下，通过[obj autorelease]来延迟内存的释放</li><li>ARC环境下，是不能手动调用，系统会自动给对象添加autorelease</li></ul></li><li>自动释放池的主要底层数据结构是：__AtAutoreleasePool、AutoreleasePoolPage</li><li>调用了autorelease的对象最终都是通过AutoreleasePoolPage对象来管理的</li></ul><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main(<span class="type">int</span> argc, <span class="type">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">///ARC下会自动加入 autorelease方法</span></span><br><span class="line">        <span class="built_in">NSObject</span> * obj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">        <span class="comment">///MRC写法</span></span><br><span class="line">        <span class="comment">// NSObject * obj = [[[NSObject alloc] init] autorelease];</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c++代码，转译</span></span><br><span class="line"><span class="type">int</span> main(<span class="type">int</span> argc, <span class="type">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="comment">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; <span class="comment">///调用了objc_autoreleasePoolPush</span></span><br><span class="line">        <span class="built_in">NSObject</span> * obj = ((<span class="built_in">NSObject</span> *(*)(<span class="type">id</span>, SEL))(<span class="type">void</span> *)objc_msgSend)((<span class="type">id</span>)((<span class="built_in">NSObject</span> *(*)(<span class="type">id</span>, SEL))(<span class="type">void</span> *)objc_msgSend)((<span class="type">id</span>)objc_getClass(<span class="string">&quot;NSObject&quot;</span>), sel_registerName(<span class="string">&quot;alloc&quot;</span>)), sel_registerName(<span class="string">&quot;init&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪代码 </span></span><br><span class="line"><span class="type">int</span> main (<span class="type">int</span> argc, <span class="type">char</span> * argv[]) &#123;</span><br><span class="line"><span class="comment">// push </span></span><br><span class="line"><span class="type">void</span> *poolToken = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">  这中间为写在&#123;...&#125;中的代码</span><br><span class="line">  </span><br><span class="line"><span class="comment">// pop 将&#123;...&#125;中的对象都执行一次 release操作  </span></span><br><span class="line">objc_autoreleasePoolPop(哨兵对象地址);<span class="comment">//哨兵对象 POOL_BUNDARY</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><blockquote><p>AutoreleasePoolPage</p><ul><li>每个AutoreleasePoolPage对象占用4096字节内存，除了用来存放它内部的成员变量，剩下的空间用来存放autorelease对象的地址</li><li>所有的AutoreleasePoolPage对象通过双向链表的形式连接在一起</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AutoreleasePoolPage</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//最大size 4096字节</span></span><br><span class="line">    PAGE_MAX_SIZE；</span><br><span class="line">    <span class="comment">//用来校验AutoreleasePoolPage的结构是否完整</span></span><br><span class="line">    <span class="type">magic_t</span> <span class="type">const</span> magic; </span><br><span class="line">    <span class="comment">//指向下一个即将产生的autoreleased对象的存放位置（当next == begin()时，表示AutoreleasePoolPage为空；当next == end()时，表示AutoreleasePoolPage已满</span></span><br><span class="line">    id *next;</span><br><span class="line">    <span class="comment">//指向当前线程，一个AutoreleasePoolPage只会对应一个线程，但一个线程可以对应多个AutoreleasePoolPage；</span></span><br><span class="line">    <span class="type">pthread_t</span> <span class="type">const</span> thread;</span><br><span class="line">    <span class="comment">//指向父结点，第一个结点的 parent 值为 nil；</span></span><br><span class="line">    AutoreleasePoolPage * <span class="type">const</span> parent;</span><br><span class="line">    <span class="comment">//指向子结点，最后一个结点的 child 值为 nil；</span></span><br><span class="line">    AutoreleasePoolPage *child;</span><br><span class="line">    <span class="comment">//代表深度，第一个page的depth为0，往后每递增一个page，depth会加1；</span></span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NSObject-mm-push"><a href="#NSObject-mm-push" class="headerlink" title="NSObject.mm - push"></a>NSObject.mm - push</h4><blockquote><p>objc_autoreleasePoolPush</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *</span></span><br><span class="line"><span class="function"><span class="title">objc_autoreleasePoolPush</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> AutoreleasePoolPage::<span class="built_in">push</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> *<span class="title">push</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id *dest;</span><br><span class="line">    <span class="keyword">if</span> (DebugPoolAllocation) &#123;</span><br><span class="line">        <span class="comment">// Each autorelease pool starts on a new pool page.</span></span><br><span class="line">        dest = <span class="built_in">autoreleaseNewPage</span>(POOL_BOUNDARY);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        dest = <span class="built_in">autoreleaseFast</span>(POOL_BOUNDARY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(dest == EMPTY_POOL_PLACEHOLDER || *dest == POOL_BOUNDARY);</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> id *<span class="title">autoreleaseFast</span><span class="params">(id obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//hotPage()表示当前页的 AutoreleasePoolPage 节点</span></span><br><span class="line">    AutoreleasePoolPage *page = <span class="built_in">hotPage</span>(); </span><br><span class="line">    <span class="keyword">if</span> (page &amp;&amp; !page-&gt;<span class="built_in">full</span>()) &#123;</span><br><span class="line">     <span class="comment">// 当前 page 存在且没有满时，直接将对象添加到当前 page 中，即 next 指向的位置</span></span><br><span class="line">        <span class="keyword">return</span> page-&gt;<span class="built_in">add</span>(obj); </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page) &#123; </span><br><span class="line">       <span class="comment">// 当前 page 存在且已满时，创建一个新的 page ，并将对象添加到新创建的 page 中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">autoreleaseFullPage</span>(obj, page); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 当前 page 不存在时，即还没有 page 时，创建第一个 page ，并将对象添加到新创建的 page 中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">autoreleaseNoPage</span>(obj); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NSObject-mm-pop"><a href="#NSObject-mm-pop" class="headerlink" title="NSObject.mm - pop"></a>NSObject.mm - pop</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">objc_autoreleasePoolPop</span><span class="params">(<span class="type">void</span> *ctxt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AutoreleasePoolPage::<span class="built_in">pop</span>(ctxt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">void</span> *token)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AutoreleasePoolPage *page;</span><br><span class="line">    id *stop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (token == (<span class="type">void</span>*)EMPTY_POOL_PLACEHOLDER) &#123;</span><br><span class="line">        <span class="comment">// Popping the top-level placeholder pool.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">hotPage</span>()) &#123;</span><br><span class="line">            <span class="comment">// Pool was used. Pop its contents normally.</span></span><br><span class="line">            <span class="comment">// Pool pages remain allocated for re-use as usual.</span></span><br><span class="line">            <span class="built_in">pop</span>(<span class="built_in">coldPage</span>()-&gt;<span class="built_in">begin</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Pool was never used. Clear the placeholder.</span></span><br><span class="line">            <span class="built_in">setHotPage</span>(nil);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过栈顶的地址找到对应的page</span></span><br><span class="line">    page = <span class="built_in">pageForPointer</span>(token);</span><br><span class="line">    stop = (id *)token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PrintPoolHiwat) <span class="built_in">printHiwat</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从栈顶开始操作出栈，并向栈中的对象发送release消息，直到遇到第一个哨兵对象(POOL_BUNDARY标记)</span></span><br><span class="line">    page-&gt;<span class="built_in">releaseUntil</span>(stop);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// memory: delete empty children</span></span><br><span class="line">    <span class="keyword">if</span> (DebugPoolAllocation  &amp;&amp;  page-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">// special case: delete everything during page-per-pool debugging</span></span><br><span class="line">        AutoreleasePoolPage *parent = page-&gt;parent;</span><br><span class="line">        page-&gt;<span class="built_in">kill</span>();</span><br><span class="line">        <span class="built_in">setHotPage</span>(parent);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DebugMissingPools  &amp;&amp;  page-&gt;<span class="built_in">empty</span>()  &amp;&amp;  !page-&gt;parent) &#123;</span><br><span class="line">        <span class="comment">// special case: delete everything for pop(top) </span></span><br><span class="line">        <span class="comment">// when debugging missing autorelease pools</span></span><br><span class="line">        page-&gt;<span class="built_in">kill</span>();</span><br><span class="line">        <span class="built_in">setHotPage</span>(nil);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (page-&gt;child) &#123;</span><br><span class="line">        <span class="comment">// hysteresis: keep one empty child if page is more than half full</span></span><br><span class="line">        <span class="keyword">if</span> (page-&gt;<span class="built_in">lessThanHalfFull</span>()) &#123;</span><br><span class="line">            page-&gt;child-&gt;<span class="built_in">kill</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (page-&gt;child-&gt;child) &#123;</span><br><span class="line">            page-&gt;child-&gt;child-&gt;<span class="built_in">kill</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="autoreleasePool的结构和工作原理"><a href="#autoreleasePool的结构和工作原理" class="headerlink" title="autoreleasePool的结构和工作原理"></a>autoreleasePool的结构和工作原理</h2><ul><li>autoreleasepool本质上就是一个指针堆栈,内部结构是由若干个以AutoreleasePoolPage对象为结点的双向链表组成，系统会在需要的时候动态地增加或删除page节点。</li></ul><h3 id="push，pop大体流程"><a href="#push，pop大体流程" class="headerlink" title="push，pop大体流程"></a>push，pop大体流程</h3><ul><li>调用push方法会将一个POOL_BOUNDARY入栈，并且返回其存放的内存地址</li><li>调用pop方法时传入一个POOL_BOUNDARY的内存地址，会从最后一个入栈的对象开始发送release消息，直到遇到这个POOL_BOUNDARY</li><li>id *next指向了下一个能存放autorelease对象地址的区域</li></ul><h3 id="Runloop和Autorelease"><a href="#Runloop和Autorelease" class="headerlink" title="Runloop和Autorelease"></a>Runloop和Autorelease</h3><ul><li>iOS在主线程的Runloop中注册了2个Observer<ul><li>第1个Observer监听了kCFRunLoopEntry事件，会调用objc_autoreleasePoolPush()</li><li>第2个Observer<ul><li>监听了kCFRunLoopBeforeWaiting事件，会调用objc_autoreleasePoolPop()、objc_autoreleasePoolPush()</li><li>监听了kCFRunLoopBeforeExit事件，会调用objc_autoreleasePoolPop()</li></ul></li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li><li><a href="https://www.jianshu.com/p/20496cbb6dc3">iOS autoreleasePool原理总结</a></li><li><a href="https://www.jianshu.com/p/7b8f6d443057">iOS AutoreleasePool的底层原理总结</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;AutoReleasePool是Objective—C中一种内存自动回收的机制，他可以将加入AutoRelease</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="内存管理" scheme="http://www.hxtec.top/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>内存管理-copy，引用计数，delloc</title>
    <link href="http://www.hxtec.top/2022/09/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-copy%EF%BC%8C%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%EF%BC%8Cdelloc/"/>
    <id>http://www.hxtec.top/2022/09/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-copy%EF%BC%8C%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%EF%BC%8Cdelloc/</id>
    <published>2022-09-26T16:43:44.000Z</published>
    <updated>2022-09-27T07:30:26.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存管理释义"><a href="#内存管理释义" class="headerlink" title="内存管理释义"></a>内存管理释义</h2><ul><li>在iOS中，使用引用计数来管理OC对象的内存</li><li>一个新创建的OC对象引用计数默认是1，当引用计数减为0，OC对象就会销毁，释放其占用的内存空间</li><li>调用retain会让OC对象的引用计数+1，调用release会让OC对象的引用计数-1</li><li>内存管理的经验总结<ul><li>当调用alloc、new、copy、mutableCopy方法返回了一个对象，在不需要这个对象时，要调用release或者autorelease来释放它</li><li>想拥有某个对象，就让它的引用计数+1；不想再拥有某个对象，就让它的引用计数-1</li></ul></li><li>可以通过以下私有函数来查看自动释放池的情况<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">void</span> _objc_autoreleasePoolPrint(<span class="type">void</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h2><ul><li>拷贝的目的：产生一个副本对象，跟源对象互不影响<ul><li>修改了源对象，不会影响副本对象</li><li>修改了副本对象，不会影响源对象</li></ul></li><li>iOS提供了2个拷贝方法<ul><li>copy，不可变拷贝，产生不可变副本</li><li>mutableCopy，可变拷贝，产生可变副本</li></ul></li><li>深拷贝和浅拷贝<ul><li>深拷贝：内容拷贝，产生新的对象</li><li>浅拷贝：指针拷贝，没有产生新的对象</li></ul></li></ul><table><thead><tr><th align="center"></th><th align="center">copy</th><th align="center">mutableCopy</th></tr></thead><tbody><tr><td align="center">NSString</td><td align="center">NSString <code>浅拷贝</code></td><td align="center">NSMutableString 深拷贝</td></tr><tr><td align="center">NSMutableString</td><td align="center">NSString 深拷贝</td><td align="center">NSMutableString 深拷贝</td></tr><tr><td align="center">NSArray</td><td align="center">NSArray <code>浅拷贝</code></td><td align="center">NSMutableArray 深拷贝</td></tr><tr><td align="center">NSMutableArray</td><td align="center">NSArray 深拷贝</td><td align="center">NSMutableArray 深拷贝</td></tr><tr><td align="center">NSDictionary</td><td align="center">NSDictionary <code>浅拷贝</code></td><td align="center">NSMutableDictionary 深拷贝</td></tr><tr><td align="center">NSMutableDictionary</td><td align="center">NSDictionary 深拷贝</td><td align="center">NSMutableDictionary 深拷贝</td></tr></tbody></table><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *str1 = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@&quot;test111111111&quot;</span>];</span><br><span class="line"><span class="built_in">NSString</span> *str2 = [str1 <span class="keyword">copy</span>]; <span class="comment">// 浅拷贝，指针拷贝，没有产生新对象</span></span><br><span class="line"><span class="built_in">NSMutableString</span> *str3 = [str1 mutableCopy]; <span class="comment">// 深拷贝，内容拷贝，有产生新对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSMutableString</span> *str1 = [[<span class="built_in">NSMutableString</span> alloc] initWithFormat:<span class="string">@&quot;test&quot;</span>]; <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">NSString</span> *str2 = [str1 <span class="keyword">copy</span>]; <span class="comment">// 深拷贝</span></span><br><span class="line"><span class="built_in">NSMutableString</span> *str3 = [str1 mutableCopy]; <span class="comment">// 深拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组和字典类同</span></span><br></pre></td></tr></table></figure><h2 id="引用计数的存储"><a href="#引用计数的存储" class="headerlink" title="引用计数的存储"></a>引用计数的存储</h2><ul><li>在64bit中，引用计数可以直接存储在优化过的isa指针中，也可能存储在SideTable类中</li><li>refcnts是一个存放着对象引用计数的散列表</li></ul><h2 id="weak"><a href="#weak" class="headerlink" title="weak"></a>weak</h2><ul><li><code>weak</code> 是弱引用，用 <code>weak</code> 来修饰、描述所引用对象的计数器并不会增加，而且<code>weak</code>会在引用对象被释放的时候自动置为 nil，这也就避免了野指针访问坏内存而引起奔溃的情况，</li><li><code>weak</code>表其实是一个hash（哈希）表 (字典也是hash表)，Key是所指对象的地址，Value是weak指针的地址集合。weak通常用于解决循环引用问题。</li></ul><h3 id="weak-的实现原理"><a href="#weak-的实现原理" class="headerlink" title="weak 的实现原理:"></a>weak 的实现原理:</h3><ul><li>初始化时：runtime会调用<code>objc_initWeak</code>函数，初始化一个新的weak指针指向对象的地址。</li><li>添加引用时：objc_initWeak函数会调用 <code>objc_storeWeak() </code>函数， objc_storeWeak() 的作用是更新指针指向，创建对应的弱引用表。</li><li>释放时，调用<code>clearDeallocating</code>函数。clearDeallocating函数首先根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，清理对象的记录。</li></ul><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><blockquote><p>NSObject.mm</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SideTable</span> &#123;</span><br><span class="line">    <span class="comment">// 保证原子操作的自旋锁</span></span><br><span class="line">    <span class="type">spinlock_t</span> slock;</span><br><span class="line">    <span class="comment">// 引用计数的 hash 表</span></span><br><span class="line">    RefcountMap refcnts;</span><br><span class="line">    <span class="comment">// weak 引用全局 hash 表</span></span><br><span class="line">    <span class="type">weak_table_t</span> weak_table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="objc-weak-h"><a href="#objc-weak-h" class="headerlink" title="objc-weak.h"></a>objc-weak.h</h4><blockquote><p>weak_table_t，weak表</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局的弱引用表, 保存object作为key, weak_entry_t作为value</span></span><br><span class="line"><span class="comment"> * The global weak references table. Stores object ids as keys,</span></span><br><span class="line"><span class="comment"> * and weak_entry_t structs as their values.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">weak_table_t</span> &#123;</span><br><span class="line">    <span class="comment">// 保存了所有指向特地对象的 weak指针集合</span></span><br><span class="line">    <span class="type">weak_entry_t</span> *weak_entries;</span><br><span class="line">    <span class="comment">// weak_table_t中有多少个weak_entry_t</span></span><br><span class="line">    <span class="type">size_t</span>    num_entries;</span><br><span class="line">    <span class="comment">// weak_entry_t数组的count</span></span><br><span class="line">    <span class="type">uintptr_t</span> mask;</span><br><span class="line">    <span class="comment">// hash key 最大偏移值, </span></span><br><span class="line">    <span class="comment">// 采用了开放定制法解决hash冲突,超过max_hash_displacement说明weak_table_t中不存在要找的weak_entry_t</span></span><br><span class="line">    <span class="type">uintptr_t</span> max_hash_displacement;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="objc-runtime-new-mm"><a href="#objc-runtime-new-mm" class="headerlink" title="objc-runtime-new.mm"></a>objc-runtime-new.mm</h4><blockquote><p>weak_entry_t</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">weak_entry_t</span> &#123;</span><br><span class="line">    <span class="comment">// 所有weak指针指向的特定对象</span></span><br><span class="line">    DisguisedPtrobjc_object&gt; referent;</span><br><span class="line">    <span class="comment">// 共用体,保存weak指针的集合, </span></span><br><span class="line">    <span class="comment">// 小于等于4个时为数组(下面的结构体), 超过4个时为hash表(上面的结构体)</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> &#123;</span><br><span class="line">            <span class="type">weak_referrer_t</span> *referrers;</span><br><span class="line">            <span class="type">uintptr_t</span>        out_of_line : <span class="number">1</span>;</span><br><span class="line">            <span class="type">uintptr_t</span>        num_refs : PTR_MINUS_1;</span><br><span class="line">            <span class="type">uintptr_t</span>        mask;</span><br><span class="line">            <span class="type">uintptr_t</span>        max_hash_displacement;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">struct</span> &#123;</span><br><span class="line">            <span class="comment">// out_of_line=0 is LSB of one of these (don&#x27;t care which)</span></span><br><span class="line">            <span class="type">weak_referrer_t</span>  inline_referrers[WEAK_INLINE_COUNT];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NSObject-mm"><a href="#NSObject-mm" class="headerlink" title="NSObject.mm"></a>NSObject.mm</h4><blockquote><p>objc_clear_deallocating</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> </span></span><br><span class="line"><span class="function"><span class="title">objc_clear_deallocating</span><span class="params">(id obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj-&gt;<span class="built_in">isTaggedPointer</span>()) <span class="keyword">return</span>;</span><br><span class="line">    obj-&gt;<span class="built_in">clearDeallocating</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>objc_clear_deallocating该函数的动作如下：</p><ul><li>1、从weak表中,以dealloc对象为key, 找到对应的weak_entry_t,</li><li>2、将weak_entry_t中的所有附有weak修饰符变量的地址，赋值为nil</li><li>3、将weak表中该对象移除</li></ul></blockquote><h3 id="强、弱指针引用"><a href="#强、弱指针引用" class="headerlink" title="强、弱指针引用"></a>强、弱指针引用</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ARC是LLVM编译器和Runtime系统相互协作的一个结果</span></span><br><span class="line">__<span class="keyword">strong</span> HXPerson *person1;</span><br><span class="line">__<span class="keyword">weak</span> HXPerson *person2;</span><br><span class="line">__<span class="keyword">unsafe_unretained</span> HXPerson *person3;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;111&quot;</span>);</span><br><span class="line">&#123;</span><br><span class="line">    MJPerson *person = [[MJPerson alloc] init];</span><br><span class="line">    person3 = person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;222 - %@&quot;</span>, person3);<span class="comment">//访问person3会出现crash，因为__unsafe_unretained指向野指针</span></span><br></pre></td></tr></table></figure><h2 id="dealloc"><a href="#dealloc" class="headerlink" title="dealloc"></a>dealloc</h2><ul><li>当一个对象要释放时，会自动调用dealloc，接下的调用轨迹是<ul><li>dealloc</li><li>_objc_rootDealloc</li><li>rootDealloc</li><li>object_dispose</li><li>objc_destructInstance</li><li>erase</li></ul></li></ul><h3 id="源码解析-1"><a href="#源码解析-1" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="NSObject-mm-1"><a href="#NSObject-mm-1" class="headerlink" title="NSObject.mm"></a>NSObject.mm</h4><blockquote><p>dealloc</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Replaced by NSZombies</span></span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    _objc_rootDealloc(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NSObject-mm-2"><a href="#NSObject-mm-2" class="headerlink" title="NSObject.mm"></a>NSObject.mm</h4><blockquote><p>_objc_rootDealloc</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_objc_rootDealloc(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">assert</span>(obj);</span><br><span class="line"></span><br><span class="line">    obj-&gt;<span class="built_in">rootDealloc</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="objc-object-h"><a href="#objc-object-h" class="headerlink" title="objc-object.h"></a>objc-object.h</h4><blockquote><p>rootDealloc</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">objc_object::rootDealloc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isTaggedPointer</span>()) <span class="keyword">return</span>;  <span class="comment">// fixme necessary?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fastpath</span>(isa.nonpointer  &amp;&amp;  </span><br><span class="line">                 !isa.weakly_referenced  &amp;&amp;  </span><br><span class="line">                 !isa.has_assoc  &amp;&amp;  </span><br><span class="line">                 !isa.has_cxx_dtor  &amp;&amp;  </span><br><span class="line">                 !isa.has_sidetable_rc))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">assert</span>(!<span class="built_in">sidetable_present</span>());</span><br><span class="line">        <span class="built_in">free</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">object_dispose</span>((id)<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="objc-runtime-new-mm-1"><a href="#objc-runtime-new-mm-1" class="headerlink" title="objc-runtime-new.mm"></a>objc-runtime-new.mm</h4><blockquote><p>object_dispose</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* object_dispose</span></span><br><span class="line"><span class="comment">* fixme</span></span><br><span class="line"><span class="comment">* Locking: none</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="function">id </span></span><br><span class="line"><span class="function"><span class="title">object_dispose</span><span class="params">(id obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj) <span class="keyword">return</span> nil;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">objc_destructInstance</span>(obj);    </span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="objc-runtime-new-mm-2"><a href="#objc-runtime-new-mm-2" class="headerlink" title="objc-runtime-new.mm"></a>objc-runtime-new.mm</h4><blockquote><p>objc_destructInstance</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* objc_destructInstance</span></span><br><span class="line"><span class="comment">* Destroys an instance without freeing memory. </span></span><br><span class="line"><span class="comment">* Calls C++ destructors.</span></span><br><span class="line"><span class="comment">* Calls ARC ivar cleanup.</span></span><br><span class="line"><span class="comment">* Removes associative references.</span></span><br><span class="line"><span class="comment">* Returns `obj`. Does nothing if `obj` is nil.</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">objc_destructInstance</span><span class="params">(id obj)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// Read all of the flags at once for performance.</span></span><br><span class="line">        <span class="type">bool</span> cxx = obj-&gt;<span class="built_in">hasCxxDtor</span>();</span><br><span class="line">        <span class="type">bool</span> assoc = obj-&gt;<span class="built_in">hasAssociatedObjects</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This order is important.</span></span><br><span class="line">        <span class="keyword">if</span> (cxx) <span class="built_in">object_cxxDestruct</span>(obj);<span class="comment">//清除成员变量</span></span><br><span class="line">        <span class="keyword">if</span> (assoc) _object_remove_assocations(obj);</span><br><span class="line">        obj-&gt;<span class="built_in">clearDeallocating</span>();<span class="comment">//将指向当前对象的弱指针置为nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内存管理释义&quot;&gt;&lt;a href=&quot;#内存管理释义&quot; class=&quot;headerlink&quot; title=&quot;内存管理释义&quot;&gt;&lt;/a&gt;内存管理释义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在iOS中，使用引用计数来管理OC对象的内存&lt;/li&gt;
&lt;li&gt;一个新创建的OC对象引用计数默认</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="内存管理" scheme="http://www.hxtec.top/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>内存管理-内存布局, Tagged Pointer</title>
    <link href="http://www.hxtec.top/2022/09/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80-Tagged-Pointer/"/>
    <id>http://www.hxtec.top/2022/09/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80-Tagged-Pointer/</id>
    <published>2022-09-26T16:41:53.000Z</published>
    <updated>2022-09-27T07:30:19.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><ul><li>代码段：编译之后的代码</li><li>数据段<ul><li>字符串常量：比如NSString *str &#x3D; @”123”</li><li>已初始化数据：已初始化的全局变量、静态变量等</li><li>未初始化数据：未初始化的全局变量、静态变量等</li></ul></li><li>栈：函数调用开销，比如局部变量。分配的内存空间地址越来越小</li><li>堆：通过alloc、malloc、calloc等动态分配的空间，分配的内存空间地址越来越大</li></ul><blockquote><p>代码示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main(<span class="type">int</span> argc, <span class="type">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> c = <span class="number">20</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> d;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> e;</span><br><span class="line">        <span class="type">int</span> f = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSString</span> *str = <span class="string">@&quot;123&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSObject</span> *obj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;\n&amp;a=%p\n&amp;b=%p\n&amp;c=%p\n&amp;d=%p\n&amp;e=%p\n&amp;f=%p\nstr=%p\nobj=%p\n&quot;</span>,</span><br><span class="line">              &amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f, str, obj);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 字符串常量</span></span><br><span class="line"><span class="comment"> str=0x10dfa0068</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 已初始化的全局变量、静态变量</span></span><br><span class="line"><span class="comment"> &amp;a =0x10dfa0db8</span></span><br><span class="line"><span class="comment"> &amp;c =0x10dfa0dbc</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 未初始化的全局变量、静态变量</span></span><br><span class="line"><span class="comment"> &amp;d =0x10dfa0e80</span></span><br><span class="line"><span class="comment"> &amp;b =0x10dfa0e84</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 堆</span></span><br><span class="line"><span class="comment"> obj=0x608000012210</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 栈</span></span><br><span class="line"><span class="comment"> &amp;f =0x7ffee1c60fe0</span></span><br><span class="line"><span class="comment"> &amp;e =0x7ffee1c60fe4</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="Tagged-Pointer"><a href="#Tagged-Pointer" class="headerlink" title="Tagged Pointer"></a>Tagged Pointer</h2><ul><li>从64bit开始，iOS引入了<code>Tagged Pointer</code>技术，用于优化NSNumber、NSDate、NSString等小对象的存储</li><li>在没有使用<code>Tagged Pointer</code>之前， NSNumber等对象需要动态分配内存、维护引用计数等，NSNumber指针存储的是堆中NSNumber对象的地址值</li><li>使用<code>Tagged Pointer</code>之后，NSNumber指针里面存储的数据变成了：Tag + Data，也就是将数据直接存储在了指针中</li><li>当指针不够存储数据时，才会使用动态分配内存的方式来存储数据</li><li><code>objc_msgSend</code>能识别<code>Tagged Pointer</code>，比如NSNumber的intValue方法，直接从指针提取数据，节省了以前的调用开销</li><li>如何判断一个指针是否为<code>Tagged Pointer</code>？<ul><li>iOS平台，最高有效位是1（第64bit）</li><li>Mac平台，最低有效位是1</li></ul></li></ul><blockquote><p>objc-internal.h</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> TARGET_OS_OSX &amp;&amp; __x86_64__</span></span><br><span class="line">    <span class="comment">// 64-bit Mac - tag bit is LSB</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> OBJC_MSB_TAGGED_POINTERS 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="comment">// Everything else - tag bit is MSB</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> OBJC_MSB_TAGGED_POINTERS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OBJC_MSB_TAGGED_POINTERS</span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _OBJC_TAG_MASK (1UL&lt;&lt;63)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">define</span> _OBJC_TAG_MASK 1UL</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><blockquote><p>思考以下2段代码能发生什么事？有什么区别？</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//此段代码会崩溃，因为[NSString stringWithFormat:@&quot;abcdefghijk&quot;];以对象方式执行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        <span class="keyword">self</span>.name = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;abcdefghijk&quot;</span>];</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码没有问题，[NSString stringWithFormat:@&quot;abc&quot;];是Tagged Pointer方式执行</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="keyword">self</span>.name = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;abc&quot;</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内存布局&quot;&gt;&lt;a href=&quot;#内存布局&quot; class=&quot;headerlink&quot; title=&quot;内存布局&quot;&gt;&lt;/a&gt;内存布局&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码段：编译之后的代码&lt;/li&gt;
&lt;li&gt;数据段&lt;ul&gt;
&lt;li&gt;字符串常量：比如NSString *str &amp;</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="内存管理" scheme="http://www.hxtec.top/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>内存管理-CADisplayLink, NSTimer</title>
    <link href="http://www.hxtec.top/2022/09/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-CADisplayLink-NSTimer/"/>
    <id>http://www.hxtec.top/2022/09/27/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-CADisplayLink-NSTimer/</id>
    <published>2022-09-26T16:39:32.000Z</published>
    <updated>2022-09-27T07:30:24.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CADisplayLink"><a href="#CADisplayLink" class="headerlink" title="CADisplayLink"></a>CADisplayLink</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>一个定时器对象，它可以让你与屏幕刷新频率相同的速率来刷新你的视图。就说CADisplayLink是用于同步屏幕刷新频率的计时器。</li><li>在应用中创建一个新的CADisplayLink对象，把它添加到一个runloop中，并给它提供一个target和selector在屏幕刷新的时候调用。</li></ul><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"> + (<span class="built_in">CADisplayLink</span> *)displayLinkWithTarget:(<span class="type">id</span>)target selector:(SEL)sel;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//启动</span></span><br><span class="line"> <span class="comment">//初始化后，要将其添加到 runLoop 中才能执行</span></span><br><span class="line"> - (<span class="type">void</span>)addToRunLoop:(<span class="built_in">NSRunLoop</span> *)runloop forMode:(<span class="built_in">NSString</span> *)mode <span class="comment">//添加到runLoop</span></span><br><span class="line">- (<span class="type">void</span>)removeFromRunLoop:(<span class="built_in">NSRunLoop</span> *)runloop forMode:(<span class="built_in">NSString</span> *)mode <span class="comment">//从runLoop中移除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//暂停和继续</span></span><br><span class="line">[link setPaused:<span class="literal">YES</span>];</span><br><span class="line">[link setPaused:<span class="literal">NO</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//停止(失效)</span></span><br><span class="line">[link invalidate];</span><br><span class="line">link = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><h2 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a>NSTimer</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>OC中的计时器(时钟)，可每隔一段时间执行一次。</li></ul><h3 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//需要手动将定时器添加到runLoop中</span></span><br><span class="line">+ (<span class="built_in">NSTimer</span> *)timerWithTimeInterval:(<span class="built_in">NSTimeInterval</span>)ti target:(<span class="type">id</span>)aTarget selector:(SEL)aSelector userInfo:(<span class="type">id</span>)userInfo repeats:(<span class="type">BOOL</span>)yesOrNo;</span><br><span class="line"><span class="comment">//系统会自动将其添加到 runLoop 中</span></span><br><span class="line">+ (<span class="built_in">NSTimer</span> *)scheduledTimerWithTimeInterval:(<span class="built_in">NSTimeInterval</span>)ti target:(<span class="type">id</span>)aTarget selector:(SEL)aSelector userInfo:(<span class="type">id</span>)userInfo repeats:(<span class="type">BOOL</span>)yesOrNo;</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="原理不同"><a href="#原理不同" class="headerlink" title="原理不同"></a>原理不同</h3><ul><li><code>CADisplayLink</code>是一个能让我们以和屏幕刷新率同步的频率将特定的内容画到屏幕上的定时器类。CADisplayLink以特定模式注册到runloop后，每当屏幕显示内容刷新结束的时候，runloop就会向CADisplayLink指定的target发送一次指定的selector消息， CADisplayLink类对应的selector就会被调用一次。</li><li><code>NSTimer</code>以指定的模式注册到runloop后，每当设定的周期时间到达后，runloop会向指定的target发送一次指定的selector消息。</li></ul><h3 id="周期设置不同"><a href="#周期设置不同" class="headerlink" title="周期设置不同"></a>周期设置不同</h3><ul><li>iOS设备的屏幕刷新频率(FPS)是60Hz，因此<code>CADisplayLink</code>的selector默认调用周期是每秒60次，这个周期可以通过frameInterval属性设置，CADisplayLink的selector每秒调用次数&#x3D;60&#x2F;frameInterval。比如当frameInterval设为2，每秒调用就变成30次。因此，CADisplayLink周期的设置方式略显不便。</li><li><code>NSTimer</code>的selector调用周期可以在初始化时直接设定，相对就灵活的多。</li></ul><h3 id="精度不同"><a href="#精度不同" class="headerlink" title="精度不同"></a>精度不同</h3><ul><li>iOS设备的屏幕刷新频率是固定的，<code>CADisplayLink</code>在正常情况下会在每次刷新结束都被调用，精确度相当高。</li><li><code>NSTimer</code>的精确度就显得低了点，比如NSTimer的触发时间到的时候，runloop如果在阻塞状态，触发时间就会推迟到下一个runloop周期。并且NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间的延迟范围。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><code>CADisplayLink</code>使用场合相对专一，适合做UI的不停重绘，比如自定义动画引擎或者视频播放的渲染。</li><li><code>NSTimer</code>的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CADisplayLink</span> *link;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSTimer</span> *timer;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// 保证调用频率和屏幕的刷帧频率一致，60FPS</span></span><br><span class="line">    <span class="keyword">self</span>.link = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(linkTest)];</span><br><span class="line">    [<span class="keyword">self</span>.link addToRunLoop:[<span class="built_in">NSRunLoop</span> mainRunLoop] forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(timerTest) userInfo:nil repeats:YES];</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//block方式使用timer</span></span><br><span class="line"><span class="comment">//    __weak typeof(self) weakSelf = self;</span></span><br><span class="line"><span class="comment">//    self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0 repeats:YES block:^(NSTimer * _Nonnull timer) &#123;</span></span><br><span class="line"><span class="comment">//        [weakSelf timerTest];</span></span><br><span class="line"><span class="comment">//    &#125;];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)timerTest &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, __func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)linkTest &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, __func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, __func__);</span><br><span class="line">    [<span class="keyword">self</span>.link invalidate];</span><br><span class="line"><span class="comment">//    [self.timer invalidate];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><ul><li>self对<code>CADisplayLink</code>强引用，CADisplayLink对target强引用，target对self强引用，造成循环引用</li><li><code>NSTimer</code>也有类似问题，NSTimer的scheduledTimerWithTimeInterval创建方式会造成循环引用</li></ul></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>_ _weak, 使用block 弱引用均无法解决</li><li>使用代理对象</li></ul><h4 id="代理对象，继承NSObject"><a href="#代理对象，继承NSObject" class="headerlink" title="代理对象，继承NSObject"></a>代理对象，继承NSObject</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HXProxy1</span> : <span class="title">NSObject</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)proxyWithTarget:(<span class="type">id</span>)target;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="type">id</span> target;<span class="comment">//弱引用</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HXProxy1</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)proxyWithTarget:(<span class="type">id</span>)target &#123;</span><br><span class="line">    HXProxy1 *proxy = [[HXProxy1 alloc] init];</span><br><span class="line">    proxy.target = target;</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息转发三种</span></span><br><span class="line">- (<span class="type">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代理对象，继承NSProxy"><a href="#代理对象，继承NSProxy" class="headerlink" title="代理对象，继承NSProxy"></a>代理对象，继承NSProxy</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HXProxy</span> : <span class="title">NSProxy</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)proxyWithTarget:(<span class="type">id</span>)target;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="type">id</span> target;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HXProxy</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)proxyWithTarget:(<span class="type">id</span>)target &#123;</span><br><span class="line">    <span class="comment">// NSProxy对象不需要调用init，因为它本来就没有init方法</span></span><br><span class="line">    HXProxy *proxy = [HXProxy alloc]; </span><br><span class="line">    proxy.target = target;</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息转发</span></span><br><span class="line"><span class="comment">//只要调用HXProxy的某个方法就马上调用他的另一个方法methodSignatureForSelector</span></span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.target methodSignatureForSelector:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息转发三种 调用不到时先调用这个</span></span><br><span class="line">- (<span class="type">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)invocation &#123;</span><br><span class="line">    [invocation invokeWithTarget:<span class="keyword">self</span>.target];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//- (id)forwardingTargetForSelector:(SEL)aSelector  NSProxy没有这个方法</span></span><br></pre></td></tr></table></figure><h2 id="GCD定时器执行任务封装"><a href="#GCD定时器执行任务封装" class="headerlink" title="GCD定时器执行任务封装"></a>GCD定时器执行任务封装</h2><ul><li>NSTimer依赖于RunLoop，如果RunLoop的任务过于繁重，可能会导致NSTimer不准时</li><li>GCD的定时器会更加准时</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HXTimer</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)execTask:(<span class="type">void</span>(^)(<span class="type">void</span>))task</span><br><span class="line">           start:(<span class="built_in">NSTimeInterval</span>)start</span><br><span class="line">        interval:(<span class="built_in">NSTimeInterval</span>)interval</span><br><span class="line">         repeats:(<span class="type">BOOL</span>)repeats</span><br><span class="line">           async:(<span class="type">BOOL</span>)async;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)execTask:(<span class="type">id</span>)target</span><br><span class="line">              selector:(SEL)selector</span><br><span class="line">                 start:(<span class="built_in">NSTimeInterval</span>)start</span><br><span class="line">              interval:(<span class="built_in">NSTimeInterval</span>)interval</span><br><span class="line">               repeats:(<span class="type">BOOL</span>)repeats</span><br><span class="line">                 async:(<span class="type">BOOL</span>)async;</span><br><span class="line"></span><br><span class="line">+ (<span class="type">void</span>)cancelTask:(<span class="built_in">NSString</span> *)name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//.m</span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;HXTimer.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">HXTimer</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSMutableDictionary</span> *timers_;</span><br><span class="line">dispatch_semaphore_t semaphore_;</span><br><span class="line">+ (<span class="type">void</span>)initialize &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        timers_ = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        semaphore_ = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)execTask:(<span class="type">void</span> (^)(<span class="type">void</span>))task start:(<span class="built_in">NSTimeInterval</span>)start interval:(<span class="built_in">NSTimeInterval</span>)interval repeats:(<span class="type">BOOL</span>)repeats async:(<span class="type">BOOL</span>)async &#123;</span><br><span class="line">    <span class="keyword">if</span> (!task || start &lt; <span class="number">0</span> || (interval &lt;= <span class="number">0</span> &amp;&amp; repeats)) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 队列</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = async ? dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>) : dispatch_get_main_queue();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建定时器</span></span><br><span class="line">    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, queue);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置时间</span></span><br><span class="line">    dispatch_source_set_timer(timer,</span><br><span class="line">                              dispatch_time(DISPATCH_TIME_NOW, start * <span class="built_in">NSEC_PER_SEC</span>),</span><br><span class="line">                              interval * <span class="built_in">NSEC_PER_SEC</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_wait(semaphore_, DISPATCH_TIME_FOREVER);</span><br><span class="line">    <span class="comment">// 定时器的唯一标识</span></span><br><span class="line">    <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%zd&quot;</span>, timers_.count];</span><br><span class="line">    <span class="comment">// 存放到字典中</span></span><br><span class="line">    timers_[name] = timer;</span><br><span class="line">    dispatch_semaphore_signal(semaphore_);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置回调</span></span><br><span class="line">    dispatch_source_set_event_handler(timer, ^&#123;</span><br><span class="line">        task();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!repeats) &#123; <span class="comment">// 不重复的任务</span></span><br><span class="line">            [<span class="keyword">self</span> cancelTask:name];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动定时器</span></span><br><span class="line">    dispatch_resume(timer);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)execTask:(<span class="type">id</span>)target selector:(SEL)selector start:(<span class="built_in">NSTimeInterval</span>)start interval:(<span class="built_in">NSTimeInterval</span>)interval repeats:(<span class="type">BOOL</span>)repeats async:(<span class="type">BOOL</span>)async &#123;</span><br><span class="line">    <span class="keyword">if</span> (!target || !selector) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> execTask:^&#123;</span><br><span class="line">        <span class="keyword">if</span> ([target respondsToSelector:selector]) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic ignored <span class="string">&quot;-Warc-performSelector-leaks&quot;</span></span></span><br><span class="line">            [target performSelector:selector];</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; start:start interval:interval repeats:repeats async:async];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="type">void</span>)cancelTask:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_wait(semaphore_, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    dispatch_source_t timer = timers_[name];</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        dispatch_source_cancel(timer);</span><br><span class="line">        [timers_ removeObjectForKey:name];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_signal(semaphore_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *task = [HXTimer execTask:<span class="keyword">self</span></span><br><span class="line">                     selector:<span class="keyword">@selector</span>(doTask)</span><br><span class="line">                        start:<span class="number">2.0</span></span><br><span class="line">                     interval:<span class="number">1.0</span></span><br><span class="line">                      repeats:<span class="literal">YES</span></span><br><span class="line">                        async:<span class="literal">NO</span>];</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    NSString *task = [HXTimer execTask:^&#123;</span></span><br><span class="line"><span class="comment">//        NSLog(@&quot;111111 - %@&quot;, [NSThread currentThread]);</span></span><br><span class="line"><span class="comment">//    &#125; start:2.0 interval:-10 repeats:NO async:NO];</span></span><br><span class="line">                        </span><br><span class="line">- (<span class="type">void</span>)doTask &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;doTask - %@&quot;</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CADisplayLink&quot;&gt;&lt;a href=&quot;#CADisplayLink&quot; class=&quot;headerlink&quot; title=&quot;CADisplayLink&quot;&gt;&lt;/a&gt;CADisplayLink&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; cla</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="内存管理" scheme="http://www.hxtec.top/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>多线程 - 同步文案二</title>
    <link href="http://www.hxtec.top/2022/09/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%90%8C%E6%AD%A5%E6%96%87%E6%A1%88%E4%BA%8C/"/>
    <id>http://www.hxtec.top/2022/09/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%90%8C%E6%AD%A5%E6%96%87%E6%A1%88%E4%BA%8C/</id>
    <published>2022-09-25T16:47:36.000Z</published>
    <updated>2022-09-27T07:36:16.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS中的线程同步方案"><a href="#iOS中的线程同步方案" class="headerlink" title="iOS中的线程同步方案"></a>iOS中的线程同步方案</h2><h3 id="NSCondition"><a href="#NSCondition" class="headerlink" title="NSCondition"></a>NSCondition</h3><ul><li>NSCondition是对mutex和cond的封装</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSCondition</span>: <span class="title">NSObject</span>&lt;<span class="title">NSLocking</span>&gt; </span>&#123;</span><br><span class="line">- (<span class="type">void</span>)wait;</span><br><span class="line">- (<span class="type">BOOL</span>)waitUntilDate:(<span class="built_in">NSDate</span> *)limit;</span><br><span class="line">- (<span class="type">void</span>)signal;</span><br><span class="line">- (<span class="type">void</span>)broadcast;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;NSConditionDemo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSConditionDemo</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSCondition</span> *condition;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span> *data;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSConditionDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.condition = [[<span class="built_in">NSCondition</span> alloc] init];</span><br><span class="line">        <span class="keyword">self</span>.data = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)otherTest &#123;</span><br><span class="line">    [[[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(__remove) object:<span class="literal">nil</span>] start];</span><br><span class="line">    </span><br><span class="line">    [[[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(__add) object:<span class="literal">nil</span>] start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者-消费者模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程1</span></span><br><span class="line"><span class="comment">// 删除数组中的元素</span></span><br><span class="line">- (<span class="type">void</span>)__remove &#123;</span><br><span class="line">    [<span class="keyword">self</span>.condition lock];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;__remove - begin&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.data.count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 等待</span></span><br><span class="line">        [<span class="keyword">self</span>.condition wait];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.data removeLastObject];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;删除了元素&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.condition unlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程2</span></span><br><span class="line"><span class="comment">// 往数组中添加元素</span></span><br><span class="line">- (<span class="type">void</span>)__add &#123;</span><br><span class="line">    [<span class="keyword">self</span>.condition lock];</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.data addObject:<span class="string">@&quot;Test&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;添加了元素&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 信号</span></span><br><span class="line">    [<span class="keyword">self</span>.condition signal];</span><br><span class="line">    <span class="comment">// 广播</span></span><br><span class="line">    <span class="comment">//[self.condition broadcast];</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.condition unlock];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="NSConditionLock"><a href="#NSConditionLock" class="headerlink" title="NSConditionLock"></a>NSConditionLock</h3><ul><li>NSConditionLock是对NSCondition的进一步封装，可以设置具体的条件值</li><li>线程之间的依赖</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSConditionLock</span>: <span class="title">NSObject</span>&lt;<span class="title">NSLocking</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> condition;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCondition:(<span class="built_in">NSInteger</span>)condition;</span><br><span class="line">- (<span class="type">void</span>)lockWhenCondition:(<span class="built_in">NSInteger</span>)condition;</span><br><span class="line">- (<span class="type">BOOL</span>)tryLock;</span><br><span class="line">- (<span class="type">BOOL</span>)tryLockWhenCondition:(<span class="built_in">NSInteger</span>)condition;</span><br><span class="line">- (<span class="type">void</span>)unLockWhenCondition:(<span class="built_in">NSInteger</span>)condition;</span><br><span class="line">- (<span class="type">BOOL</span>)lockBeforeDate:(<span class="built_in">NSDate</span> *)limit;</span><br><span class="line">- (<span class="type">BOOL</span>)lockWhenCondition:(<span class="built_in">NSInteger</span>)condition beforeDate:(<span class="built_in">NSDate</span> *)limit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;NSConditionLockDemo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSConditionLockDemo</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSConditionLock</span> *conditionLock;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSConditionLockDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        <span class="comment">//condition默认是从0开始</span></span><br><span class="line">        <span class="keyword">self</span>.conditionLock = [[<span class="built_in">NSConditionLock</span> alloc] initWithCondition:<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)otherTest &#123;</span><br><span class="line">    [[[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(__one) object:<span class="literal">nil</span>] start];</span><br><span class="line">    </span><br><span class="line">    [[[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(__two) object:<span class="literal">nil</span>] start];</span><br><span class="line">    </span><br><span class="line">    [[[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(__three) object:<span class="literal">nil</span>] start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__one &#123;</span><br><span class="line">    [<span class="keyword">self</span>.conditionLock lock];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;__one&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.conditionLock unlockWithCondition:<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__two &#123;</span><br><span class="line">    [<span class="keyword">self</span>.conditionLock lockWhenCondition:<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;__two&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.conditionLock unlockWithCondition:<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__three &#123;</span><br><span class="line">    [<span class="keyword">self</span>.conditionLock lockWhenCondition:<span class="number">3</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;__three&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.conditionLock unlock];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="dispatch-semaphore"><a href="#dispatch-semaphore" class="headerlink" title="dispatch_semaphore"></a>dispatch_semaphore</h3><ul><li>semaphore叫做”信号量”</li><li>信号量的初始值，可以用来控制线程并发访问的最大数量</li><li>信号量的初始值为1，代表同时只允许1条线程访问资源，保证线程同步</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 信号量的初始值</span></span><br><span class="line"><span class="type">int</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 初始化信号量</span></span><br><span class="line"><span class="type">dispatch_semaphore_t</span> semaphore = <span class="built_in">dispatch_semaphore_create</span>(value);</span><br><span class="line"><span class="comment">// 如果信号量的值&lt;0，当前线程就会进入休眠等待（直到信号量的值&gt;0）</span></span><br><span class="line"><span class="comment">// 如果信号量的值&gt;0，就减1，然后往下执行后面的代码</span></span><br><span class="line"><span class="built_in">dispatch_semaphore_wait</span>(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line"><span class="comment">// 让信号是的值加1</span></span><br><span class="line"><span class="built_in">dispatch_semaphore_signal</span>(semaphore);</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;SemaphoreDemo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SemaphoreDemo</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) dispatch_semaphore_t semaphore;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) dispatch_semaphore_t ticketSemaphore;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) dispatch_semaphore_t moneySemaphore;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SemaphoreDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.semaphore = dispatch_semaphore_create(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">self</span>.ticketSemaphore = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">self</span>.moneySemaphore = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__drawMoney &#123;</span><br><span class="line">    dispatch_semaphore_wait(<span class="keyword">self</span>.moneySemaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    [<span class="variable language_">super</span> __drawMoney];</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_signal(<span class="keyword">self</span>.moneySemaphore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__saveMoney &#123;</span><br><span class="line">    dispatch_semaphore_wait(<span class="keyword">self</span>.moneySemaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    [<span class="variable language_">super</span> __saveMoney];</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_signal(<span class="keyword">self</span>.moneySemaphore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__saleTicket &#123;</span><br><span class="line">    dispatch_semaphore_wait(<span class="keyword">self</span>.ticketSemaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    [<span class="variable language_">super</span> __saleTicket];</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_signal(<span class="keyword">self</span>.ticketSemaphore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)otherTest &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        [[[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(test) object:<span class="literal">nil</span>] start];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程10、7、6、9、8</span></span><br><span class="line">- (<span class="type">void</span>)test &#123;</span><br><span class="line">    <span class="comment">// 如果信号量的值 &gt; 0，就让信号量的值减1，然后继续往下执行代码</span></span><br><span class="line">    <span class="comment">// 如果信号量的值 &lt;= 0，就会休眠等待，直到信号量的值变成&gt;0，就让信号量的值减1，然后继续往下执行代码</span></span><br><span class="line">    dispatch_semaphore_wait(<span class="keyword">self</span>.semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;test - %@&quot;</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让信号量的值+1</span></span><br><span class="line">    dispatch_semaphore_signal(<span class="keyword">self</span>.semaphore);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="dispatch-queue"><a href="#dispatch-queue" class="headerlink" title="dispatch_queue"></a>dispatch_queue</h3><ul><li>直接使用GCD的串行队列，也是可以实现线程同步的</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> = dispatch_queue_create(<span class="string">&quot;lock_queue&quot;</span>, DISPATCH_QUEEU_SERIAL);</span><br><span class="line"><span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">    <span class="comment">//任务...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;SerialQueueDemo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SerialQueueDemo</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">dispatch_queue_t</span> ticketQueue;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">dispatch_queue_t</span> moneyQueue;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SerialQueueDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.ticketQueue = dispatch_queue_create(<span class="string">&quot;ticketQueue&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">        <span class="keyword">self</span>.moneyQueue = dispatch_queue_create(<span class="string">&quot;moneyQueue&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__drawMoney &#123;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.moneyQueue, ^&#123;</span><br><span class="line">        [<span class="variable language_">super</span> __drawMoney];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__saveMoney &#123;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.moneyQueue, ^&#123;</span><br><span class="line">        [<span class="variable language_">super</span> __saveMoney];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__saleTicket &#123;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.ticketQueue, ^&#123;</span><br><span class="line">        [<span class="variable language_">super</span> __saleTicket];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a>@synchronized</h3><ul><li>@synchronized是对mutex递归锁的封装</li><li>源码查看：objc4中的objc-sync.mm文件</li><li>@synchronized(obj)内部会生成obj对应的递归锁，然后进行加锁、解锁操作</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@synchronized</span>(obj) &#123;</span><br><span class="line">    <span class="comment">//任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;SynchronizedDemo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SynchronizedDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__drawMoney &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) &#123;</span><br><span class="line">        [<span class="variable language_">super</span> __drawMoney];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__saveMoney &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) &#123; <span class="comment">// objc_sync_enter</span></span><br><span class="line">        [<span class="variable language_">super</span> __saveMoney];</span><br><span class="line">    &#125; <span class="comment">// objc_sync_exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__saleTicket &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSObject</span> *lock;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        lock = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@synchronized</span>(lock) &#123;</span><br><span class="line">        [<span class="variable language_">super</span> __saleTicket];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)otherTest &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;123&quot;</span>);</span><br><span class="line">        [<span class="keyword">self</span> otherTest];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="iOS中的读写安全方案"><a href="#iOS中的读写安全方案" class="headerlink" title="iOS中的读写安全方案"></a>iOS中的读写安全方案</h2><ul><li>思考如何实现以下场景<ul><li>同一时间，只能有1个线程进行写的操作</li><li>同一时间，允许有多个线程进行读的操作</li><li>同一时间，不允许既有写的操作，又有读的操作</li></ul></li></ul><blockquote><p>上面的场景就是典型的“多读单写”，经常用于文件等数据的读写操作，iOS中的实现方案有</p><ul><li>pthread_rwlock：读写锁</li><li>dispatch_barrier_async：异步栅栏调用</li></ul></blockquote><h3 id="pthread-rwlock"><a href="#pthread-rwlock" class="headerlink" title="pthread_rwlock"></a>pthread_rwlock</h3><ul><li>等待锁的线程会进入休眠</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化锁</span></span><br><span class="line">pthread_rwlock lock;</span><br><span class="line"><span class="built_in">pthread_rwlock_init</span>(&amp;lock, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 读 - 加锁</span></span><br><span class="line"><span class="built_in">pthread_rwlock_rdlock</span>(&amp;lock);</span><br><span class="line"><span class="comment">// 读 - 尝试加锁</span></span><br><span class="line"><span class="built_in">pthread_rwlock_tryrdlock</span>(&amp;lock);</span><br><span class="line"><span class="comment">// 写 - 加锁</span></span><br><span class="line"><span class="built_in">pthread_rwlock_wrlock</span>(&amp;lock);</span><br><span class="line"><span class="comment">// 写 - 尝试加锁</span></span><br><span class="line"><span class="built_in">pthread_rwlock_trywrlock</span>(&amp;lock);</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line"><span class="built_in">pthread_rwlock_unlock</span>(&amp;lock):</span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="built_in">pthread_rwlock_destroy</span>(&amp;lock):</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) pthread_rwlock_t lock;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化锁</span></span><br><span class="line">    pthread_rwlock_init(&amp;_lock, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">            [<span class="keyword">self</span> read];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">            [<span class="keyword">self</span> write];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)read &#123;</span><br><span class="line">    pthread_rwlock_rdlock(&amp;_lock);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, __func__);</span><br><span class="line">    </span><br><span class="line">    pthread_rwlock_unlock(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)write &#123;</span><br><span class="line">    pthread_rwlock_wrlock(&amp;_lock);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, __func__);</span><br><span class="line">    </span><br><span class="line">    pthread_rwlock_unlock(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    pthread_rwlock_destroy(&amp;_lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="dispatch-barrier-async"><a href="#dispatch-barrier-async" class="headerlink" title="dispatch_barrier_async"></a>dispatch_barrier_async</h3><ul><li>这个函数传入的并发队列必须是自己通过dispatch_queue_cretate创建的</li><li>如果传入的是一个串行或是一个全局的并发队列，那这个函数便等同于dispatch_async函数的效果</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化队列</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">&quot;rw_queue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"><span class="comment">// 读</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.queue, ^&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 写</span></span><br><span class="line">dispatch_barrier_async(<span class="keyword">self</span>.queue, ^&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">dispatch_queue_t</span> queue;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    NSOperationQueue *queue = [[NSOperationQueue alloc] init];</span></span><br><span class="line"><span class="comment">//    queue.maxConcurrentOperationCount = 5;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    dispatch_semaphore_create(5);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.queue = dispatch_queue_create(<span class="string">&quot;rw_queue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.queue, ^&#123;</span><br><span class="line">            [<span class="keyword">self</span> read];</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.queue, ^&#123;</span><br><span class="line">            [<span class="keyword">self</span> read];</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.queue, ^&#123;</span><br><span class="line">            [<span class="keyword">self</span> read];</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加栅栏锁</span></span><br><span class="line">        dispatch_barrier_async(<span class="keyword">self</span>.queue, ^&#123;</span><br><span class="line">            [<span class="keyword">self</span> write];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)read &#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;read&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)write &#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;write&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><ul><li>atomic用于保证属性setter、getter的原子性操作，相当于在getter和setter内部加了线程同步的锁</li><li>可以参考源码objc4的objc-accessors.mm</li><li>它并不能保证使用属性的过程是线程安全的</li></ul><h2 id="iOS线程同步方案性能比较"><a href="#iOS线程同步方案性能比较" class="headerlink" title="iOS线程同步方案性能比较"></a>iOS线程同步方案性能比较</h2><blockquote><p>性能从高到低排序</p><ul><li>os_unfair_lock</li><li>OSSpinLock</li><li>dispatch_semaphore</li><li>pthread_mutex</li><li>dispatch_queue(DISPATCH_QUEUE_SERIAL)</li><li>NSLock</li><li>NSCondition</li><li>pthread_mutex(recursive)</li><li>NSRecursiveLock</li><li>NSConditionLock</li><li>@synchronized</li></ul></blockquote><h2 id="自旋锁、互斥锁比较"><a href="#自旋锁、互斥锁比较" class="headerlink" title="自旋锁、互斥锁比较"></a>自旋锁、互斥锁比较</h2><blockquote><p>什么情况使用自旋锁比较划算？</p><ul><li>预计线程等待锁的时间很短</li><li>加锁的代码（临界区）经常被调用，但竞争情况很少发生</li><li>CPU资源不紧张</li><li>多核处理器</li></ul></blockquote><blockquote><p>什么情况使用互斥锁比较划算？</p><ul><li>预计线程等待锁的时间较长</li><li>单核处理器</li><li>临界区有IO操作</li><li>临界区代码复杂或者循环量大</li><li>临界区竞争非常激烈</li></ul></blockquote><h2 id="高频面试题"><a href="#高频面试题" class="headerlink" title="高频面试题"></a>高频面试题</h2><ul><li>你理解的多线程？</li><li>iOS的多线程方案有哪几种？你更倾向于哪一种？</li><li>你在项目中用过 GCD 吗？</li><li>GCD 的队列类型</li><li>说一下 OperationQueue 和 GCD 的区别，以及各自的优势</li><li>线程安全的处理手段有哪些？</li><li>OC你了解的锁有哪些？在你回答基础上进行二次提问；<ul><li>追问一：自旋和互斥对比？</li><li>追问二：使用以上锁需要注意哪些？</li><li>追问三：用C&#x2F;OC&#x2F;C++，任选其一，实现自旋或互斥？口述即可！</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;iOS中的线程同步方案&quot;&gt;&lt;a href=&quot;#iOS中的线程同步方案&quot; class=&quot;headerlink&quot; title=&quot;iOS中的线程同步方案&quot;&gt;&lt;/a&gt;iOS中的线程同步方案&lt;/h2&gt;&lt;h3 id=&quot;NSCondition&quot;&gt;&lt;a href=&quot;#NSCond</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="多线程" scheme="http://www.hxtec.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程 - 同步方案一</title>
    <link href="http://www.hxtec.top/2022/09/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88%E4%B8%80/"/>
    <id>http://www.hxtec.top/2022/09/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88%E4%B8%80/</id>
    <published>2022-09-25T16:09:11.962Z</published>
    <updated>2022-09-27T07:36:19.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多线程的安全隐患"><a href="#多线程的安全隐患" class="headerlink" title="多线程的安全隐患"></a>多线程的安全隐患</h2><ul><li>资源共享<ul><li>1块资源可能会被多个线程共享，也就是<code>多个线程可能会访问同一块资源</code></li><li>比如多个线程访问同一个对象、同一个变量、同一个文件</li></ul></li><li>当多个线程访问同一块资源时，很容易引发<code>数据错乱和数据安全</code>问题</li></ul><h2 id="多线程的安全隐患的解决方案"><a href="#多线程的安全隐患的解决方案" class="headerlink" title="多线程的安全隐患的解决方案"></a>多线程的安全隐患的解决方案</h2><ul><li>解决方案：使用<code>线程同步</code>技术（同步，就是协同步调，按预定的先后次序进行）</li><li>常见的线程同步技术是：<code>加锁</code></li></ul><h2 id="iOS中的线程同步方案"><a href="#iOS中的线程同步方案" class="headerlink" title="iOS中的线程同步方案"></a>iOS中的线程同步方案</h2><ul><li>OSSpinLock</li><li>os_unfair_lock</li><li>pthread_mutex</li><li>dispatch_semaphore</li><li>dispatch_queue(DISPATCH_QUEUE_SERIAL)</li><li>NSLock</li><li>NSRecursiveLock</li><li>NSCondition</li><li>NSConditionLock</li><li>@synchronized</li></ul><h3 id="OSSpinLock"><a href="#OSSpinLock" class="headerlink" title="OSSpinLock"></a>OSSpinLock</h3><ul><li>OSSpinLock叫做”自旋锁”，等待锁的线程会处于忙等（busy-wait）状态，一直占用着CPU资源</li><li>目前已经不再安全，可能会出现优先级反转问题<ul><li>如果等待锁的线程优先级较高，它会一直占用着CPU资源，优先级低的线程就无法释放锁</li><li>需要导入头文件#import &lt;libkern&#x2F;OSAtomic.h&gt;</li></ul></li></ul><blockquote><p>用法：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">OSSpinLock lock = OS_SPINLOCK_INIT;</span><br><span class="line"><span class="comment">//尝试加锁（如果需要等待就不加锁，直接返回false；如果不需要等待就加锁，返回true）</span></span><br><span class="line"><span class="type">bool</span> result = <span class="built_in">OSSpinLockTry</span>(&amp;lock);</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line"><span class="built_in">OSSpinLockLock</span>(&amp;lock);</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line"><span class="built_in">OSSpineLockUnlock</span>(&amp;lock);</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;OSSpinLockDemo.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;libkern/OSAtomic.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">OSSpinLockDemo</span>()</span></span><br><span class="line"><span class="comment">// High-level lock</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) OSSpinLock moneyLock;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) OSSpinLock ticketLock;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">OSSpinLockDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.moneyLock = OS_SPINLOCK_INIT;</span><br><span class="line">        <span class="keyword">self</span>.ticketLock = OS_SPINLOCK_INIT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)__drawMoney &#123;</span><br><span class="line">    OSSpinLockLock(&amp;_moneyLock);</span><br><span class="line">    [<span class="variable language_">super</span> __drawMoney];</span><br><span class="line">    OSSpinLockUnlock(&amp;_moneyLock);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)__saveMoney &#123;</span><br><span class="line">    OSSpinLockLock(&amp;_moneyLock);</span><br><span class="line">    [<span class="variable language_">super</span> __saveMoney];</span><br><span class="line">    OSSpinLockUnlock(&amp;_moneyLock);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)__saleTicket &#123;</span><br><span class="line">    OSSpinLockLock(&amp;_ticketLock);</span><br><span class="line">    [<span class="variable language_">super</span> __saleTicket];</span><br><span class="line">    OSSpinLockUnlock(&amp;_ticketLock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="os-unfair-lock"><a href="#os-unfair-lock" class="headerlink" title="os_unfair_lock"></a>os_unfair_lock</h3><ul><li>os_unfair_lock用于取代不安全的OSSpinLock ，从iOS10开始才支持</li><li>从底层调用看，等待os_unfair_lock锁的线程会处于休眠状态，并非忙等</li><li>需要导入头文件#import &lt;os&#x2F;lock.h&gt;</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">os_unfair_lock lock = OS_UNFAIR_LOCK_INIT;</span><br><span class="line"><span class="comment">//尝试加锁</span></span><br><span class="line"><span class="built_in">os_unfair_lock_trylock</span>(&amp;lock);</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line"><span class="built_in">os_unfair_lock_lock</span>(&amp;lock);</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line"><span class="built_in">os_unfair_lock_unlock</span>(&amp;lock);</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;OSUnfairLockDemo.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;os/lock.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">OSUnfairLockDemo</span>()</span></span><br><span class="line"><span class="comment">// Low-level lock</span></span><br><span class="line"><span class="comment">// ll lock</span></span><br><span class="line"><span class="comment">// lll</span></span><br><span class="line"><span class="comment">// Low-level lock的特点等不到锁就休眠</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) os_unfair_lock moneyLock;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) os_unfair_lock ticketLock;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">OSUnfairLockDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.moneyLock = OS_UNFAIR_LOCK_INIT;</span><br><span class="line">        <span class="keyword">self</span>.ticketLock = OS_UNFAIR_LOCK_INIT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 死锁：永远拿不到锁</span></span><br><span class="line">- (<span class="type">void</span>)__saleTicket &#123;</span><br><span class="line">    os_unfair_lock_lock(&amp;_ticketLock);</span><br><span class="line">    [<span class="variable language_">super</span> __saleTicket];</span><br><span class="line">    os_unfair_lock_unlock(&amp;_ticketLock);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)__saveMoney &#123;</span><br><span class="line">    os_unfair_lock_lock(&amp;_moneyLock);</span><br><span class="line">    [<span class="variable language_">super</span> __saveMoney];</span><br><span class="line">    os_unfair_lock_unlock(&amp;_moneyLock);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)__drawMoney &#123;</span><br><span class="line">    os_unfair_lock_lock(&amp;_moneyLock);</span><br><span class="line">    [<span class="variable language_">super</span> __drawMoney];</span><br><span class="line">    os_unfair_lock_unlock(&amp;_moneyLock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="pthread-mutex"><a href="#pthread-mutex" class="headerlink" title="pthread_mutex"></a>pthread_mutex</h3><ul><li>mutex叫做”互斥锁”，等待锁的线程会处于休眠状态</li><li>需要导入头文件#import &lt;pthread.h&gt;</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化锁属性</span></span><br><span class="line"><span class="type">pthread_mutexattr_t</span> attr;</span><br><span class="line"><span class="built_in">pthread_mutexattr_init</span>(&amp;attr);</span><br><span class="line"><span class="built_in">pthread_mutexattr_settype</span>(&amp;attr, PTHREAD_MUTEX_DEFAULT);</span><br><span class="line"><span class="comment">// 初始化锁</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="built_in">pthread_mutex_init</span>(&amp;mutex, &amp;attr);</span><br><span class="line"><span class="comment">// 尝试加锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_trylock</span>(&amp;mutex);</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;mutex);</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);</span><br><span class="line"><span class="comment">// 销毁相关资源</span></span><br><span class="line"><span class="built_in">pthread_mutexattr_destroy</span>(&amp;attr);    <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;MutexDemo.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MutexDemo</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) pthread_mutex_t ticketMutex;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) pthread_mutex_t moneyMutex;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MutexDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__initMutex:(pthread_mutex_t *)mutex &#123;</span><br><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line"><span class="comment">//        pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//    // 初始化属性</span></span><br><span class="line"><span class="comment">//    pthread_mutexattr_t attr;</span></span><br><span class="line"><span class="comment">//    pthread_mutexattr_init(&amp;attr);</span></span><br><span class="line"><span class="comment">//    pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_DEFAULT);</span></span><br><span class="line"><span class="comment">//    // 初始化锁</span></span><br><span class="line"><span class="comment">//    pthread_mutex_init(mutex, &amp;attr);</span></span><br><span class="line"><span class="comment">//    // 销毁属性</span></span><br><span class="line"><span class="comment">//    pthread_mutexattr_destroy(&amp;attr);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化属性</span></span><br><span class="line"><span class="comment">//    pthread_mutexattr_t attr;</span></span><br><span class="line"><span class="comment">//    pthread_mutexattr_init(&amp;attr);</span></span><br><span class="line"><span class="comment">//    pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_DEFAULT)</span></span><br><span class="line"><span class="comment">//    //初始化锁</span></span><br><span class="line"><span class="comment">//    pthread_mutex_init(mutex, attr);</span></span><br><span class="line"><span class="comment">//    // 销毁属性</span></span><br><span class="line"><span class="comment">//    pthread_mutexattr_destroy(&amp;attr);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化锁，第二个参数传NULL时，属性可以不用设置</span></span><br><span class="line">    pthread_mutex_init(mutex, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> __initMutex:&amp;_ticketMutex];</span><br><span class="line">        [<span class="keyword">self</span> __initMutex:&amp;_moneyMutex];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 死锁：永远拿不到锁</span></span><br><span class="line">- (<span class="type">void</span>)__saleTicket &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_ticketMutex);</span><br><span class="line">    [<span class="variable language_">super</span> __saleTicket];</span><br><span class="line">    pthread_mutex_unlock(&amp;_ticketMutex);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)__saveMoney &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_moneyMutex);</span><br><span class="line">    [<span class="variable language_">super</span> __saveMoney];</span><br><span class="line">    pthread_mutex_unlock(&amp;_moneyMutex);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)__drawMoney &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_moneyMutex);</span><br><span class="line">    [<span class="variable language_">super</span> __drawMoney];</span><br><span class="line">    pthread_mutex_unlock(&amp;_moneyMutex);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    pthread_mutex_destroy(&amp;_moneyMutex);</span><br><span class="line">    pthread_mutex_destroy(&amp;_ticketMutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="pthread-mutex-–-递归锁"><a href="#pthread-mutex-–-递归锁" class="headerlink" title="pthread_mutex – 递归锁"></a>pthread_mutex – 递归锁</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Mutex type attributes</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTHREAD_MUTEX_NORMAL        0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTHREAD_MUTEX_ERRORCHECK    1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTHREAD_MUTEX_RECURSIVE     2   <span class="comment">//递归属性</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTHREAD_MUTEX_DEFAULT       PTHREAD_MUTEX_NORMAL</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;MutexDemo2.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MutexDemo2</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) pthread_mutex_t mutex;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MutexDemo2</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__initMutex:(pthread_mutex_t *)mutex &#123;</span><br><span class="line">    <span class="comment">// 递归锁：允许同一个线程对一把锁进行重复加锁</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化属性</span></span><br><span class="line">    pthread_mutexattr_t attr;</span><br><span class="line">    pthread_mutexattr_init(&amp;attr);</span><br><span class="line">    pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_RECURSIVE);</span><br><span class="line">    <span class="comment">// 初始化锁</span></span><br><span class="line">    pthread_mutex_init(mutex, &amp;attr);</span><br><span class="line">    <span class="comment">// 销毁属性</span></span><br><span class="line">    pthread_mutexattr_destroy(&amp;attr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> __initMutex:&amp;_mutex];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 线程1：otherTest（+-）</span></span><br><span class="line"><span class="comment">        otherTest（+-）</span></span><br><span class="line"><span class="comment">         otherTest（+-）</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 线程2：otherTest（等待）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">void</span>)otherTest &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s&quot;</span>, __func__);</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        [<span class="keyword">self</span> otherTest];</span><br><span class="line">        <span class="comment">//[self otherTest];</span></span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//- (void)otherTest2</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    pthread_mutex_lock(&amp;_mutex2);</span></span><br><span class="line"><span class="comment">//    NSLog(@&quot;%s&quot;, __func__);</span></span><br><span class="line"><span class="comment">//    pthread_mutex_unlock(&amp;_mutex2);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)dealloc &#123;</span><br><span class="line">    pthread_mutex_destroy(&amp;_mutex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="pthread-mutex-–-条件"><a href="#pthread-mutex-–-条件" class="headerlink" title="pthread_mutex – 条件"></a>pthread_mutex – 条件</h3><blockquote><p>用法</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化锁</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="comment">// 初始化锁属性，NULL代表使用默认属性</span></span><br><span class="line"><span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 初始化条件</span></span><br><span class="line"><span class="type">pthread_cond_t</span> condition;</span><br><span class="line"><span class="built_in">pthread_cont_init</span>(&amp;condition, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 等待条件（进入休眠，放开mutext锁；被唤醒后，会再次对mutex加锁）</span></span><br><span class="line"><span class="built_in">pthread_cond_wait</span>(&amp;condition, &amp;mutex);</span><br><span class="line"><span class="comment">// 激活一个等待该条件的线程</span></span><br><span class="line"><span class="built_in">pthread_cond_signal</span>(&amp;condition);</span><br><span class="line"><span class="comment">// 激活所有等待该条件的线程</span></span><br><span class="line"><span class="built_in">pthread_cond_broadcast</span>(&amp;condition);</span><br><span class="line"><span class="comment">// 销毁相关资源</span></span><br><span class="line"><span class="built_in">pthread_mutexattr_destroy</span>(&amp;attr);    <span class="built_in">pthread_mutex_destroy</span>(&amp;mutex);</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;MutexDemo3.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MutexDemo3</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) pthread_mutex_t mutex;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) pthread_cond_t cond;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span> *data;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MutexDemo3</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        <span class="comment">// 初始化属性</span></span><br><span class="line">        pthread_mutexattr_t attr;</span><br><span class="line">        pthread_mutexattr_init(&amp;attr);</span><br><span class="line">        pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_RECURSIVE);</span><br><span class="line">        <span class="comment">// 初始化锁</span></span><br><span class="line">        pthread_mutex_init(&amp;_mutex, &amp;attr);</span><br><span class="line">        <span class="comment">// 销毁属性</span></span><br><span class="line">        pthread_mutexattr_destroy(&amp;attr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化条件</span></span><br><span class="line">        pthread_cond_init(&amp;_cond, <span class="literal">NULL</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.data = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)otherTest &#123;</span><br><span class="line">    [[[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(__remove) object:<span class="literal">nil</span>] start];</span><br><span class="line">    </span><br><span class="line">    [[[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(__add) object:<span class="literal">nil</span>] start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者-消费者模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程1</span></span><br><span class="line"><span class="comment">// 删除数组中的元素</span></span><br><span class="line">- (<span class="type">void</span>)__remove &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;__remove - begin&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.data.count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 等待</span></span><br><span class="line">        pthread_cond_wait(&amp;_cond, &amp;_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.data removeLastObject];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;删除了元素&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    pthread_mutex_unlock(&amp;_mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程2</span></span><br><span class="line"><span class="comment">// 往数组中添加元素</span></span><br><span class="line">- (<span class="type">void</span>)__add &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.data addObject:<span class="string">@&quot;Test&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;添加了元素&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号</span></span><br><span class="line">    pthread_cond_signal(&amp;_cond);</span><br><span class="line">    <span class="comment">// 广播</span></span><br><span class="line"><span class="comment">//    pthread_cond_broadcast(&amp;_cond);</span></span><br><span class="line">    pthread_mutex_unlock(&amp;_mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)dealloc&#123;</span><br><span class="line">    pthread_mutex_destroy(&amp;_mutex);</span><br><span class="line">    pthread_cond_destroy(&amp;_cond);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="NSLock、NSRecursiveLock"><a href="#NSLock、NSRecursiveLock" class="headerlink" title="NSLock、NSRecursiveLock"></a>NSLock、NSRecursiveLock</h3><ul><li><code>NSLock</code>是对<code>mutex</code>普通锁的封装</li><li><code>NSRecursiveLock</code>也是对<code>mutex递归锁</code>的封装，API跟NSLock基本一致</li></ul><blockquote><p>用法</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSLock</span>: <span class="title">NSObject</span>&lt;<span class="title">NSLocking</span>&gt; </span>&#123;</span><br><span class="line">- (<span class="type">BOOL</span>)tryLock;</span><br><span class="line">- (<span class="type">BOOL</span>)lockBeforeDate:(<span class="built_in">NSDate</span> *)limit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSLocking</span></span></span><br><span class="line">- (<span class="type">void</span>)lock;</span><br><span class="line">- (<span class="type">void</span>)unlock;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化锁</span></span><br><span class="line"><span class="built_in">NSLock</span> *lock = [[<span class="built_in">NSLock</span> alloc] init];</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;NSLockDemo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSLockDemo</span>()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSLock</span> *ticketLock;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSLock</span> *moneyLock;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSLockDemo</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="variable language_">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.ticketLock = [[<span class="built_in">NSLock</span> alloc] init];</span><br><span class="line">        <span class="keyword">self</span>.moneyLock = [[<span class="built_in">NSLock</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 死锁：永远拿不到锁</span></span><br><span class="line">- (<span class="type">void</span>)__saleTicket &#123;</span><br><span class="line">    [<span class="keyword">self</span>.ticketLock lock];</span><br><span class="line">    [<span class="variable language_">super</span> __saleTicket];</span><br><span class="line">    [<span class="keyword">self</span>.ticketLock unlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__saveMoney &#123;</span><br><span class="line">    [<span class="keyword">self</span>.moneyLock lock];</span><br><span class="line">    [<span class="variable language_">super</span> __saveMoney];</span><br><span class="line">    [<span class="keyword">self</span>.moneyLock unlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)__drawMoney &#123;</span><br><span class="line">    [<span class="keyword">self</span>.moneyLock lock];</span><br><span class="line">    [<span class="variable language_">super</span> __drawMoney];</span><br><span class="line">    [<span class="keyword">self</span>.moneyLock unlock];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多线程的安全隐患&quot;&gt;&lt;a href=&quot;#多线程的安全隐患&quot; class=&quot;headerlink&quot; title=&quot;多线程的安全隐患&quot;&gt;&lt;/a&gt;多线程的安全隐患&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;资源共享&lt;ul&gt;
&lt;li&gt;1块资源可能会被多个线程共享，也就是&lt;code&gt;多个线</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="多线程" scheme="http://www.hxtec.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程 - 原理机制</title>
    <link href="http://www.hxtec.top/2022/09/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B%20-%20%E5%8E%9F%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.hxtec.top/2022/09/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B%20-%20%E5%8E%9F%E7%90%86%E6%9C%BA%E5%88%B6/</id>
    <published>2022-09-25T13:45:51.000Z</published>
    <updated>2022-09-27T07:36:21.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><h3 id="线程定义"><a href="#线程定义" class="headerlink" title="线程定义"></a>线程定义</h3><ul><li>线程是进程的基本执行单元，一个进程的所有任务都是在线程中执行</li><li>进行要执行任务，必须得有线程，进行至少有一条线程</li><li>程序启动会默认开启一条线程，这条线程被称为主线程&#x2F;UI线程</li></ul><h3 id="进程定义"><a href="#进程定义" class="headerlink" title="进程定义"></a>进程定义</h3><ul><li>进程是系统进行资源和高度的基本单位</li><li>在移动端进程是指在系统中正在运行的一个程序</li><li>每个进程之间是独立的，每个进程均运行在专用的且受保护的内存中</li></ul><h3 id="进程与线程的关系"><a href="#进程与线程的关系" class="headerlink" title="进程与线程的关系"></a>进程与线程的关系</h3><ul><li>地址空间：同一进程的线程共享本进程的地址空间，而进程之间则是独立的地址空间</li><li>资源拥有：同一进程内的线程共享本进程的资源内存、I&#x2F;O、CPU等，但是进程之间的资源是独立的</li><li>相互影响：一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃后整个进程就死掉了，所以多进程要比多线程健壮</li><li>资源占用：进程切换时资源消耗大，效率高；所以涉及到频繁切换时，使用线程要好于进程，同样如果要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程</li><li>执行过程：每个独立的进程有一个程序入口、顺序执行序列和程序出口。但是线程不能独立执行，必须存在应用程序中（进程），有应用程序提供多个线程执行控制（多线程开发）</li><li>线程是处理器调试的基本单位，但进程不是，线程也是进行执行的基本单元</li></ul><h3 id="线程与进程的关系"><a href="#线程与进程的关系" class="headerlink" title="线程与进程的关系"></a>线程与进程的关系</h3><ul><li>多线程中的队列有：串行队列，并发队列，全局队列，主队列</li><li>队列可以理解为一种数据结构，以某种方式，等待线程去执行</li></ul><h3 id="iOS线程与RunLoop的关系"><a href="#iOS线程与RunLoop的关系" class="headerlink" title="iOS线程与RunLoop的关系"></a>iOS线程与RunLoop的关系</h3><ul><li>线程与RunLoop是一一对应的，一个RunLoop对应一个核心线程，为什么说是核心线程，因为RunLoop是可以嵌套的，但是核心只有一个，他们的对应关系保存在一个全局字典里</li><li>RunLoop是用来管理线程的，线程执行完任务时会进入休眠状态，有任务进来时会被唤醒，开始执行任务，所以说RunLoop是事件驱动的</li><li>RunLoop在第一次获取时被创建，线程结束时被销毁，主线程的RunLoop在程序启动的时候就会被创建</li><li>子线程的RunLoop是懒加载的，只有在使用的时候才会被创建</li></ul><blockquote><p>注：在子线程使用NSTimer时要注意确保子线程的RunLoop已经创建，否则NSTimer不会生效</p></blockquote><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>多线程是一个进程中并发多个线程同时执行各自的任务，就是由单核CPU通过时间片不断地切换执行任务</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>同一时间，CPU只能处理一条线程，只有一条线程在执行（工作）</li><li>多线程并发（同时）执行，其实是CPU快速地在多条线程之间切换（调度）</li><li>如果CPU调度线程的时间足够快，就造成了多线程并发执行的假象</li></ul><h3 id="多线程的优缺点"><a href="#多线程的优缺点" class="headerlink" title="多线程的优缺点"></a>多线程的优缺点</h3><blockquote><p>优点：</p><ul><li>减少应用程序的堵塞，增加程序的执行效率</li><li>适应提高CPU和内存的利用率</li><li>线程上的任务执行完成后，线程自动销毁</li></ul></blockquote><blockquote><p>缺点：</p><ul><li>线程的开启需要占用一定的内存空间，默认是512kb&#x2F;线程</li><li>线程开启的越多内存占用越大，会降低程序的性能</li><li>线程越多CPU在调用线程上的开销就越大</li><li>程序设计更加复杂，需要考虑线程间的通信，多线程的数据共享问题</li></ul></blockquote><h2 id="iOS多线程常见的技术方案"><a href="#iOS多线程常见的技术方案" class="headerlink" title="iOS多线程常见的技术方案"></a>iOS多线程常见的技术方案</h2><table><thead><tr><th>方案</th><th>简介</th><th>语言</th><th>线程生命周期</th><th>使用频率</th></tr></thead><tbody><tr><td>pthread</td><td>一套通用的多线程API 适用于Unix&#x2F;Linux&#x2F;Windows等系统 跨平台、可移植 使用难度大</td><td>C</td><td>程序员管理</td><td>几乎不用</td></tr><tr><td>NSThread</td><td>使用更加面向对象</td><td>简单易用、可直接操作线程对象</td><td>OC</td><td>程序员管理</td></tr><tr><td>GCD</td><td>旨在替代NSThread等线程计数 充分利用设备的多核</td><td>C</td><td>自动管理</td><td>经常使用</td></tr><tr><td>NSOperation</td><td>基于GCD（底层实现是GCD） 比GCD多了一些更简单实用的功能 使用更加面向对象</td><td>OC</td><td>自动管理</td><td>经常使用</td></tr></tbody></table><h2 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h2><blockquote><p>全称<code>Grand Central Dispatch</code>，由C语言实现，是苹果为多核的并行运算提出的解决方案，GCD会自动利用更多的CPU内核，自动管理线程的声明周期，程序员只需要告诉GCD需要执行的任务，无需编写任何管理线程的代码。GCD也是iOS使用频率最高的多线程技术。</p></blockquote><blockquote><p>优点：</p><ul><li>GCD 可用于多核的并行运算</li><li>GCD 会自动利用更多的CPU内核（比如双核，四核）</li><li>GCD 会自动管理线程的生命周期（创建线程、调度任务、销毁线程）</li><li>程序员只需要告诉GCD想要执行什么任务，不需要编写任何线程管理代码</li></ul></blockquote><h3 id="GCD任务和队列"><a href="#GCD任务和队列" class="headerlink" title="GCD任务和队列"></a>GCD任务和队列</h3><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><p>任务就是执行操作的意思，也就是在线程中执行的那段代码。<br>在GCD中是放在block中的。</p><ul><li>执行任务有两种方式：[同步执行]和[异步执行]</li><li>两者的区别：是否等待队列的任务执行结束，以及是是否具备开启新线程的能力</li></ul><blockquote><p>同步执行（sync）:</p><ul><li>同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的任务完成之后再继续执行</li><li>只能在当前线程中执行任务，<code>不具备开启新线程的能力</code></li></ul></blockquote><blockquote><p>异步执行（async）：</p><ul><li>异步添加任务到指定的队列中，它不会做任何等待，可以继续执行任务</li><li>可以在新的线程中执行任务，<code>具备开启新线程的能力</code></li></ul></blockquote><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>队列是一种特殊的线性表，采用<code>FIFO(先进先出)</code>的原则。</p><ul><li>GCD中有两种队列：[串行队列]和[并发队列]，两者都符合FIFO原则</li><li>两者的区别：执行顺序不同，以及开启线程数不同</li></ul><blockquote><p>串行队列（Serial Dispatch Queue）:</p><ul><li>每次只有一个任务被执行，让任务一个接着一个地执行。（只开启一个线程，一个任务执行完毕后，再执行下一个任务）</li></ul></blockquote><blockquote><p>并发队列（Concurrent Dispatch Queue）：</p><ul><li>可以让多个任务并发（同时）执行，（可以开启多个线程，并且同时执行任务）</li></ul></blockquote><blockquote><p>注：并发队列的并发功能只有在异步（dispatch _async）方法下才有效</p></blockquote><h3 id="GCD的常用函数"><a href="#GCD的常用函数" class="headerlink" title="GCD的常用函数"></a>GCD的常用函数</h3><ul><li>GCD中有2个用来执行任务的函数<ul><li>用同步的方式执行任务  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_sync</span>(<span class="type">dispatch_queue_t</span> queue, <span class="type">dispatch_block_t</span> block);</span><br><span class="line">queue：队列</span><br><span class="line">block：任务</span><br></pre></td></tr></table></figure></li><li>用异步的方式执行任务  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(<span class="type">dispatch_queue_t</span> queue, <span class="type">dispatch_block_t</span> block);</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>GCD源码：<a href="https://github.com/apple/swift-corelibs-libdispatch">https://github.com/apple/swift-corelibs-libdispatch</a></p></blockquote><h3 id="各种队列的执行效果"><a href="#各种队列的执行效果" class="headerlink" title="各种队列的执行效果"></a>各种队列的执行效果</h3><table><thead><tr><th></th><th>并发队列</th><th>手动创建的串行队列</th><th>主队列</th></tr></thead><tbody><tr><td>同步（sync）</td><td>没有开启新线程 <code>串行</code>执行任务</td><td>没有开启新线程 <code>串行</code>执行任务</td><td>没有开启新线程 <code>串行</code>执行任务</td></tr><tr><td>异步（async）</td><td><code>有开启</code>新线程 <code>并发</code>执行任务</td><td><code>有开启</code>新线程 <code>串行</code>执行任务</td><td>没有开启新线程 <code>串行</code>执行任务</td></tr></tbody></table><blockquote><p>使用sync函数往当前串行队列中添加任务，会卡住当前的串行队列（产生死锁）</p></blockquote><h3 id="GCD队列组的使用"><a href="#GCD队列组的使用" class="headerlink" title="GCD队列组的使用"></a>GCD队列组的使用</h3><ul><li>异步并发执行任务1，任务2</li><li>待任务1，任务2都执行完毕后，再回到主线程执行任务3</li><li>待任务1，任务2都执行完毕后，回到子线程，并发执行任务5和任务6</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 创建队列组</span></span><br><span class="line"><span class="type">dispatch_group_t</span> group = <span class="built_in">dispatch_group_create</span>();</span><br><span class="line"><span class="comment">// 创建并发队列</span></span><br><span class="line"><span class="type">dispatch_queue_t</span> queue = <span class="built_in">dispatch_queue_create</span>(<span class="string">&quot;my_queue&quot;</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加异步任务</span></span><br><span class="line"><span class="built_in">dispatch_group_async</span>(group, queue, ^&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(@<span class="string">&quot;任务1-%@&quot;</span>, [NSThread currentThread]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_group_async</span>(group, queue, ^&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(@<span class="string">&quot;任务2-%@&quot;</span>, [NSThread currentThread]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 等前面的任务执行完毕后，会自动回到主线程执行这个任务</span></span><br><span class="line"><span class="comment">//    dispatch_group_notify(group, queue, ^&#123;</span></span><br><span class="line"><span class="comment">//        dispatch_async(dispatch_get_main_queue(), ^&#123;</span></span><br><span class="line"><span class="comment">//            for (int i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//                NSLog(@&quot;任务3-%@&quot;, [NSThread currentThread]);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//    &#125;);</span></span><br><span class="line"><span class="comment">// 等前面的任务执行完毕后，会自动回到主线程执行这个任务，此方法更加简单粗暴，</span></span><br><span class="line"><span class="comment">//    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//            NSLog(@&quot;任务4-%@&quot;, [NSThread currentThread]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回到子线程，并发执行任务3和任务4</span></span><br><span class="line"><span class="built_in">dispatch_group_notify</span>(group, queue, ^&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(@<span class="string">&quot;任务5-%@&quot;</span>, [NSThread currentThread]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_group_notify</span>(group, queue, ^&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(@<span class="string">&quot;任务6-%@&quot;</span>, [NSThread currentThread]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线程与进程&quot;&gt;&lt;a href=&quot;#线程与进程&quot; class=&quot;headerlink&quot; title=&quot;线程与进程&quot;&gt;&lt;/a&gt;线程与进程&lt;/h2&gt;&lt;h3 id=&quot;线程定义&quot;&gt;&lt;a href=&quot;#线程定义&quot; class=&quot;headerlink&quot; title=&quot;线程定义&quot;</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="多线程" scheme="http://www.hxtec.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Runloop原理机制</title>
    <link href="http://www.hxtec.top/2022/09/24/Runloop%E5%8E%9F%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.hxtec.top/2022/09/24/Runloop%E5%8E%9F%E7%90%86%E6%9C%BA%E5%88%B6/</id>
    <published>2022-09-24T03:40:51.000Z</published>
    <updated>2022-09-27T07:35:39.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>顾名思义<ul><li>运行循环</li><li>在程序运行过程中循环做一些事情</li></ul></li><li>应用范畴<ul><li>定时器（Timer），PerformSelector</li><li>GCD Async Main Queue</li><li>事件响应，手势识别，界面刷新</li><li>网络请求</li><li>AutoreleasePool</li></ul></li></ul><blockquote><p>如果没有RunLoop，执行完13行代码之后，会退出程序</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char* argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        NSLog(@&quot;Hello World！&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果有了RunLoop</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//伪代码</span><br><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        int retVal = 0;</span><br><span class="line">        do &#123;</span><br><span class="line">            // 睡眠中等待消息</span><br><span class="line">            int message = sleep_and_wait();</span><br><span class="line">            // 处理消息</span><br><span class="line">            retVal = process_message(message);</span><br><span class="line">        &#125; while (0 == retVal);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>程序并不会马上退出，而是保持运行状态<br>RunLoop的基本作用</p><ul><li>保持程序的持续运行</li><li>处理App中的各种事件（比如触摸事件、定时器事件）</li><li>节省CPU资源，提高程序性能：该做事时做事，该休息时休息</li></ul></blockquote><h2 id="RunLoop对象"><a href="#RunLoop对象" class="headerlink" title="RunLoop对象"></a>RunLoop对象</h2><ul><li>iOS中有2套API来访问和使用RunLoop<ul><li>Foundation: NSRunLoop</li><li>Core Foundation: CFRunLoopRef</li></ul></li><li>NSRunLoop和CFRunLoop都代表着RunLoop对象<ul><li>NSRunLoop是基于CFRunLoopRef的一层OC包装</li><li>CFRunLoopRef是开源的：<a href="https://opensource.apple.com/tarballs/CF/">https://opensource.apple.com/tarballs/CF/</a></li></ul></li></ul><h3 id="获取RunnLoop对象"><a href="#获取RunnLoop对象" class="headerlink" title="获取RunnLoop对象"></a>获取RunnLoop对象</h3><blockquote><p>Foundation</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[NSRunLoop currentRunLoop]; // 获得当前线程的RunLoop对象</span><br><span class="line">[NSRunLoop mainRunLoop]; // 获得主线程的RunLoop对象</span><br></pre></td></tr></table></figure><blockquote><p>Core Foundation</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象</span><br><span class="line">CFRunLoopGetMain(); // 获得主线程的RunLoop对象</span><br></pre></td></tr></table></figure><h2 id="RunLoop与线程"><a href="#RunLoop与线程" class="headerlink" title="RunLoop与线程"></a>RunLoop与线程</h2><ul><li>每条线程都有唯一的一个与之对应的RunLoop对象</li><li>RunLoop保存在一个全局的Dictionary里，线程作为key，RunLoop作为value</li><li>线程刚创建时并没有RunLoop对象，RunLoop会在第一次获取它时创建</li><li>RunLoop会在线程结束时销毁</li><li>主线程的RunLoop已经自动获取（创建），子线程默认没有开启RunLoop</li></ul><h2 id="RunLoop相关的类"><a href="#RunLoop相关的类" class="headerlink" title="RunLoop相关的类"></a>RunLoop相关的类</h2><ul><li>Core Foundation中关于RunLoop的5个类<ul><li>CFRunLoopRef</li><li>CFRunLoopModeRef</li><li>CFRunLoopSourceRef</li><li>CFRunLoopTimerRef</li><li>CFRunLoopObserverRef</li></ul></li></ul><blockquote><p>CFRunLoopRef</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct __CFRunLoop * CFRunLoopRef:</span><br><span class="line">struct __CFRunLoop &#123;</span><br><span class="line">    pthread_t _pthread;</span><br><span class="line">    CFMutableSetRef _commonModes;</span><br><span class="line">    CFMutableSetRef _commonModesItems;</span><br><span class="line">    CFMutableModeRef _currentMode;</span><br><span class="line">    CFMutableSetRef _modes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CFRunLoopModeRef</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct __CFRunLoopMode * CFRunLoopModeRef:</span><br><span class="line">struct __CFRunLoopMode &#123;</span><br><span class="line">    CFStringRef _name;</span><br><span class="line">    CFMutableSetRef _sources0;</span><br><span class="line">    CFMutableSetRef _sources1;</span><br><span class="line">    CFMutableArrayRef _observers;</span><br><span class="line">    CFMutableArrayRef _timers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h3><ul><li>CFRunLoopModeRef代表RunLoop的运行模式</li><li>一个RunLoop包含若干个Mode，每个Mode又包含若干个Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer</li><li>RunLoop启动时只能选择其中一个Mode，作为currentMode</li><li>如果需要切换Mode，只能退出当前Loop，再重新选择一个Mode进入<ul><li>不同组的Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer能分隔开来，互不影响</li></ul></li><li>如果Mode里没有任何Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer，RunLoop会立马退出</li></ul><blockquote><p>常见的2种Mode</p><ul><li><code>kCFRunLoopDefaultMode（NSDefaultRunLoopMode）</code>：App的默认Mode，通常主线程是在这个Mode下运行 </li><li><code>UITrackingRunLoopMode</code>：界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响</li></ul></blockquote><h3 id="CFRunLoopObserverRef"><a href="#CFRunLoopObserverRef" class="headerlink" title="CFRunLoopObserverRef"></a>CFRunLoopObserverRef</h3><blockquote><p>observer的各个状态：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* Run Loop Observer Activities */</span><br><span class="line">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class="line">    kCFRunLoopEntry = (1UL &lt;&lt; 0),           //即将进入Loop</span><br><span class="line">    kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),    //即将处理Timer</span><br><span class="line">    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),   //即将处理Source</span><br><span class="line">    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),   //即将进入休眠</span><br><span class="line">    kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),    //刚从休眠中唤醒</span><br><span class="line">    kCFRunLoopExit = (1UL &lt;&lt; 7),            //即将退出Loop</span><br><span class="line">    kCFRunLoopAllActivities = 0x0FFFFFFFU</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>基本使用： </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建Observer</span><br><span class="line">CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault, kCFRunLoopAllActivities, YES, 0, observeRunLoopActicities, NULL);</span><br><span class="line">// 添加Observer到RunLoop中</span><br><span class="line">CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);</span><br><span class="line">// 释放</span><br><span class="line">CFRelease(observer);</span><br></pre></td></tr></table></figure><h4 id="添加Observer监听RunLoop的所有状态"><a href="#添加Observer监听RunLoop的所有状态" class="headerlink" title="添加Observer监听RunLoop的所有状态"></a>添加Observer监听RunLoop的所有状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 创建Observer</span><br><span class="line">CFRunLoopObserverRef ob = CFRunLoopObserverCreateWithHandler(kCFAllocatorNull, kCFRunLoopAllActivities, YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) &#123;</span><br><span class="line">    switch (activity) &#123;</span><br><span class="line">        case kCFRunLoopEntry:</span><br><span class="line">            NSLog(@&quot;kCFRunLoopEntry&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case kCFRunLoopBeforeTimers:</span><br><span class="line">            NSLog(@&quot;kCFRunLoopBeforeTimers&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case kCFRunLoopBeforeSources:</span><br><span class="line">            NSLog(@&quot;kCFRunLoopBeforeSources&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case kCFRunLoopBeforeWaiting:</span><br><span class="line">            NSLog(@&quot;kCFRunLoopBeforeWaiting&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case kCFRunLoopAfterWaiting:</span><br><span class="line">            NSLog(@&quot;kCFRunLoopAfterWaiting&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case kCFRunLoopExit:</span><br><span class="line">            NSLog(@&quot;kCFRunLoopExit&quot;);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 添加Observer到RunLoop中</span><br><span class="line">CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);</span><br><span class="line">// 释放</span><br><span class="line">CFRelease(observer);</span><br></pre></td></tr></table></figure><h2 id="RunLoop的运行逻辑"><a href="#RunLoop的运行逻辑" class="headerlink" title="RunLoop的运行逻辑"></a>RunLoop的运行逻辑</h2><ul><li>Source0<ul><li>触摸事件处理</li><li>performSelector:onThread:</li></ul></li><li>Source1<ul><li>基于Port的线程间通信</li><li>系统事件捕捉</li></ul></li><li>Timers<ul><li>NSTimer</li><li>performSelector:withObject:afterDelay:</li></ul></li><li>Observers<ul><li>用于监听RunLoop的状态</li><li>UI刷新（BeforeWaiting）</li><li>Autorelease pool（BeforeWaiting）</li></ul></li></ul><blockquote><p>底层逻辑</p></blockquote><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><blockquote><p>CFRunLoop.h文件<br>CFRunLoopRunSpecific（精简源码）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SInt32 CFRunLoopRunSpecific(CFRunLoopRef rl, CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled) &#123;     /* DOES CALLOUT */</span><br><span class="line">    __CFRunLoopLock(rl);</span><br><span class="line">    </span><br><span class="line">    // 通知Observers：进入Loop</span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopEntry);</span><br><span class="line">    </span><br><span class="line">    // 具体要做的事情</span><br><span class="line">    result = __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, previousMode);</span><br><span class="line">    </span><br><span class="line">    //通知Observers：退出Loop</span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line">    </span><br><span class="line">    __CFRunLoopUnlock(rl);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>__CFRunLoopRun（精简源码）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">static int32_t __CFRunLoopRun(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFTimeInterval seconds, Boolean stopAfterHandle, CFRunLoopModeRef previousMode) &#123;</span><br><span class="line">    int32_t retVal = 0;</span><br><span class="line">    do &#123;</span><br><span class="line">        // 通知Observers: 即将处理Timers</span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeTimers);</span><br><span class="line">        // 通知Observers: 即将处理Sources</span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeSources);</span><br><span class="line">        </span><br><span class="line">        //处理Blocks</span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line"></span><br><span class="line">        //处理Source0</span><br><span class="line">        Boolean sourceHandledThisLoop = __CFRunLoopDoSources0(rl, rlm, stopAfterHandle);</span><br><span class="line">        if (sourceHandledThisLoop) &#123;</span><br><span class="line">            //处理Blocks</span><br><span class="line">            __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断有无Source1</span><br><span class="line">    if (__CFRunLoopServiceMachPort(dispatchPort, &amp;msg, sizeof(msg_buffer), &amp;livePort, 0, &amp;voucherState, NULL)) &#123;</span><br><span class="line">    </span><br><span class="line">        //如果有Source1,就跳转handle_msg</span><br><span class="line">        goto handle_msg;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    // 通知Observers: 即将休眠</span><br><span class="line">    __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeWaiting);</span><br><span class="line">    // 通知Observers: 开始休眠</span><br><span class="line">    __CFRunLoopSetSleeping(rl);</span><br><span class="line">        </span><br><span class="line">    // 等待别的消息来唤醒当前线程</span><br><span class="line">    __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort, poll ? 0 : TIMEOUT_INFINITY, &amp;voucherState, &amp;voucherCopy);</span><br><span class="line">    </span><br><span class="line">    __CFRunLoopUnsetSleeping(rl);</span><br><span class="line">    // 通知Observers: 结束休眠</span><br><span class="line">    __CFRunLoopDoObservers(rl, rlm, kCFRunLoopAfterWaiting);</span><br><span class="line"></span><br><span class="line">handle_msg:;</span><br><span class="line">    if (被timers唤醒) &#123;</span><br><span class="line">        // 处理Timers</span><br><span class="line">        __CFRunLoopDoTimers(rl, rlm, mach_absolute_time()))</span><br><span class="line">    &#125; else if (livePort == dispatchPort) &#123;//被gcd唤醒</span><br><span class="line">        // 处理GCD</span><br><span class="line">        __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">    &#125; else &#123;//被Source1唤醒</span><br><span class="line">        // 处理Source1</span><br><span class="line">        __CFRunLoopDoSource1(rl, rlm, rls, msg, msg-&gt;msgh_size, &amp;reply) || sourceHandledThisLoop;</span><br><span class="line">    &#125;</span><br><span class="line">    //处理Blocks</span><br><span class="line">    __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        </span><br><span class="line">    // 设置返回值</span><br><span class="line">    if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">        retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">        &#125; else if (timeout_context-&gt;termTSR &lt; mach_absolute_time()) &#123;</span><br><span class="line">            retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">    &#125; else if (__CFRunLoopIsStopped(rl)) &#123;</span><br><span class="line">            __CFRunLoopUnsetStopped(rl);</span><br><span class="line">        retVal = kCFRunLoopRunStopped;</span><br><span class="line">    &#125; else if (rlm-&gt;_stopped) &#123;</span><br><span class="line">        rlm-&gt;_stopped = false;</span><br><span class="line">        retVal = kCFRunLoopRunStopped;</span><br><span class="line">    &#125; else if (__CFRunLoopModeIsEmpty(rl, rlm, previousMode)) &#123;</span><br><span class="line">        retVal = kCFRunLoopRunFinished;</span><br><span class="line">    &#125;</span><br><span class="line">        voucher_mach_msg_revert(voucherState);</span><br><span class="line">        os_release(voucherCopy);</span><br><span class="line"></span><br><span class="line">    &#125; while (0 == retVal);</span><br><span class="line"></span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程描述：</p><ul><li>01、通知Observers：进入Loop</li><li>02、通知Observers：即将处理Timers</li><li>03、通知Observers：即将处理Sources</li><li>04、处理Blocks</li><li>05、处理Source0（可能会再次处理Blocks）</li><li>06、如果存在Source1，就跳转到第8步</li><li>07、通知Observers：开始休眠（等待消息唤醒）</li><li>08、通知Observers：结束休眠（被某个消息唤醒）<ul><li>01 处理Timer</li><li>02 处理GCD Async To Main Queue</li><li>03 处理Source1</li></ul></li><li>09、处理Blocks</li><li>10、根据前面的执行结果，决定如何操作<ul><li>01 回到第02步</li><li>02 退出Loop</li></ul></li><li>11、通知Observers：退出Loop</li></ul></blockquote><h2 id="RunLoop在实际开中的应用"><a href="#RunLoop在实际开中的应用" class="headerlink" title="RunLoop在实际开中的应用"></a>RunLoop在实际开中的应用</h2><ul><li>控制线程生命周期（线程保活）</li><li>解决NSTimer在滑动时停止工作的问题</li><li>监控应用卡顿</li><li>性能优化</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;顾名思义&lt;ul&gt;
&lt;li&gt;运行循环&lt;/li&gt;
&lt;li&gt;在程序运行过程中循环做一些事情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="Runloop" scheme="http://www.hxtec.top/tags/Runloop/"/>
    
  </entry>
  
  <entry>
    <title>Runtime - API及应用</title>
    <link href="http://www.hxtec.top/2022/09/22/Runtime-API%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>http://www.hxtec.top/2022/09/22/Runtime-API%E5%8F%8A%E5%BA%94%E7%94%A8/</id>
    <published>2022-09-22T11:35:53.000Z</published>
    <updated>2022-09-27T07:35:29.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API-01-类"><a href="#API-01-类" class="headerlink" title="API-01-类"></a>API-01-类</h2><blockquote><p>动态创建一个类（参数：父类，类名，额外的内存空间）<br>Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)</p></blockquote><blockquote><p>注册一个类（要在类注册之前添加成员变量）<br>void objc_registerClassPair(Class cls)</p></blockquote><blockquote><p>销毁一个类<br>void objc_disposeClassPair(Class cls)</p></blockquote><blockquote><p>获取isa指向的Class<br>Class object_getClass(id obj)</p></blockquote><blockquote><p>设置isa指向的Class<br>Class object_setClass(id obj, Class cls)</p></blockquote><blockquote><p>判断一个OC对象是否为Class<br>BOOL object_isClass(id obj)</p></blockquote><blockquote><p>判断一个Class是否为元类<br>BOOL class_isMetaClass(Class cls)</p></blockquote><blockquote><p>获取父类<br>Class class_getSuperclass(Class cls)</p></blockquote><blockquote><p>示例：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line">Class newClass = <span class="built_in">objc_allocateClassPair</span>([NSObject <span class="keyword">class</span>], <span class="string">&quot;Dog&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加成员变量</span></span><br><span class="line"><span class="built_in">class_addIvar</span>(newClass, <span class="string">&quot;_age&quot;</span>, <span class="number">4</span>, <span class="number">1</span>, @<span class="built_in">encode</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">class_addIvar</span>(newClass, <span class="string">&quot;_weight&quot;</span>, <span class="number">4</span>, <span class="number">1</span>, @<span class="built_in">encode</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加方法</span></span><br><span class="line"><span class="built_in">class_addMethod</span>(newClass, @<span class="built_in">selector</span>(run), (IMP)run, <span class="string">&quot;v@:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册类</span></span><br><span class="line"><span class="built_in">objc_registerClassPair</span>(newClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在不需要这个类时释放</span></span><br><span class="line"><span class="built_in">objc_disposeClassPair</span>(newClass);</span><br><span class="line"></span><br><span class="line">Person *person = [[Person alloc] init];</span><br><span class="line">[person run];</span><br><span class="line"><span class="comment">//设置isa指向的Class</span></span><br><span class="line"><span class="built_in">object_setClass</span>(person, [Car <span class="keyword">class</span>]);</span><br><span class="line">[person run];</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个OC对象是否为Class</span></span><br><span class="line"><span class="built_in">NSLog</span>(@<span class="string">&quot;%d %d %d&quot;</span>,</span><br><span class="line">      <span class="built_in">object_isClass</span>(person),</span><br><span class="line">      <span class="built_in">object_isClass</span>([Person <span class="keyword">class</span>]),</span><br><span class="line">      <span class="built_in">object_isClass</span>(<span class="built_in">object_getClass</span>([Person <span class="keyword">class</span>]))</span><br><span class="line">      );</span><br></pre></td></tr></table></figure><h2 id="API-02-成员变量"><a href="#API-02-成员变量" class="headerlink" title="API-02-成员变量"></a>API-02-成员变量</h2><blockquote><p>获取一个实例变量信息<br>Ivar class_getInstanceVariable(Class cls, const char *name)</p></blockquote><blockquote><p>拷贝实例变量列表（最后需要调用free释放）<br>Ivar *class_copyIvarList(Class cls, unsigned int *outCount)</p></blockquote><blockquote><p>设置和获取成员变量的值<br>void object_setIvar(id obj, Ivar ivar, id value)<br>id object_getIvar(id obj, Ivar ivar)</p></blockquote><blockquote><p>动态添加成员变量（已经注册的类是不能动态添加成员变量的）<br>BOOL class_addIvar(Class cls, const char * name, size_t size, uint8_t alignment, const char * types)</p></blockquote><blockquote><p>获取成员变量的相关信息<br>const char *ivar_getName(Ivar v)<br>const char *ivar_getTypeEncoding(Ivar v)</p></blockquote><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取成员变量信息</span></span><br><span class="line">var ageIvar = class_getInstanceVariable([Person <span class="keyword">class</span>], <span class="string">&quot;_age&quot;</span>);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%s %s&quot;</span>, ivar_getName(ageIvar), ivar_getTypeEncoding(ageIvar));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置和获取成员变量的值</span></span><br><span class="line">Ivar nameIvar = class_getInstanceVariable([Person <span class="keyword">class</span>], <span class="string">&quot;_name&quot;</span>);</span><br><span class="line"></span><br><span class="line">Person *person = [[Person alloc] init];</span><br><span class="line">object_setIvar(person, nameIvar, <span class="string">@&quot;123&quot;</span>);</span><br><span class="line">object_setIvar(person, ageIvar, (__bridge <span class="type">id</span>)(<span class="type">void</span> *)<span class="number">10</span>);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@ %d&quot;</span>, person.name, person.age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员变量的数量</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line">Ivar *ivars = class_copyIvarList([Person <span class="keyword">class</span>], &amp;count);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="comment">// 取出i位置的成员变量</span></span><br><span class="line">    Ivar ivar = ivars[i];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s %s&quot;</span>, ivar_getName(ivar), ivar_getTypeEncoding(ivar));</span><br><span class="line">&#125;</span><br><span class="line">free(ivars);</span><br></pre></td></tr></table></figure><h2 id="API-03-属性"><a href="#API-03-属性" class="headerlink" title="API-03-属性"></a>API-03-属性</h2><blockquote><p>获取一个属性<br>objc_property_t class_getProperty(Class cls, const char *name)</p></blockquote><blockquote><p>拷贝属性列表（最后需要调用free释放）<br>objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)</p></blockquote><blockquote><p>动态添加属性<br>BOOL class_addProperty(Class cls, const char *name, const objc_property_attribute_t *attributes,<br>                  unsigned int attributeCount)</p></blockquote><blockquote><p>动态替换属性<br>void class_replaceProperty(Class cls, const char *name, const objc_property_attribute_t *attributes,<br>                      unsigned int attributeCount)</p></blockquote><blockquote><p>获取属性的一些信息<br>const char *property_getName(objc_property_t property)<br>const char *property_getAttributes(objc_property_t property)</p></blockquote><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line">Ivar *ivars = class_copyIvarList([<span class="built_in">UITextField</span> <span class="keyword">class</span>], &amp;count);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="comment">// 取出i位置的成员变量</span></span><br><span class="line">    Ivar ivar = ivars[i];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%s %s&quot;</span>, ivar_getName(ivar), ivar_getTypeEncoding(ivar));</span><br><span class="line">&#125;</span><br><span class="line">free(ivars);</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的使用方法已经废弃，仅供参考</span></span><br><span class="line"><span class="keyword">self</span>.textField.placeholder = <span class="string">@&quot;请输入用户名&quot;</span>;</span><br><span class="line">[<span class="keyword">self</span>.textField setValue:[<span class="built_in">UIColor</span> redColor] forKeyPath:<span class="string">@&quot;_placeholderLabel.textColor&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="API-04-方法"><a href="#API-04-方法" class="headerlink" title="API-04-方法"></a>API-04-方法</h2><blockquote><p>获得一个实例方法、类方法<br>Method class_getInstanceMethod(Class cls, SEL name)<br>Method class_getClassMethod(Class cls, SEL name)</p></blockquote><blockquote><p>方法实现相关操作<br>IMP class_getMethodImplementation(Class cls, SEL name)<br>IMP method_setImplementation(Method m, IMP imp)<br>void method_exchangeImplementations(Method m1, Method m2) </p></blockquote><blockquote><p>拷贝方法列表（最后需要调用free释放）<br>Method *class_copyMethodList(Class cls, unsigned int *outCount)</p></blockquote><blockquote><p>动态添加方法<br>BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)</p></blockquote><blockquote><p>动态替换方法<br>IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)</p></blockquote><blockquote><p>获取方法的相关信息（带有copy的需要调用free去释放）<br>SEL method_getName(Method m)<br>IMP method_getImplementation(Method m)<br>const char *method_getTypeEncoding(Method m)<br>unsigned int method_getNumberOfArguments(Method m)<br>char *method_copyReturnType(Method m)<br>char *method_copyArgumentType(Method m, unsigned int index)</p></blockquote><blockquote><p>选择器相关<br>const char *sel_getName(SEL sel)<br>SEL sel_registerName(const char *str)</p></blockquote><blockquote><p>用block作为方法实现<br>IMP imp_implementationWithBlock(id block)<br>id imp_getBlock(IMP anImp)<br>BOOL imp_removeBlock(IMP anImp)</p></blockquote><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person *person = [[Person alloc] init];</span><br><span class="line"><span class="comment">//    class_replaceMethod([MJPerson class], @selector(run), (IMP)myrun, &quot;v&quot;);</span></span><br><span class="line"><span class="comment">//block的形式</span></span><br><span class="line">class_replaceMethod([Person <span class="keyword">class</span>], <span class="keyword">@selector</span>(run), imp_implementationWithBlock(^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;123&quot;</span>);</span><br><span class="line">&#125;), <span class="string">&quot;v&quot;</span>);</span><br><span class="line">[person run];</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>示例：方法交换</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person *person = [[Person alloc] init];</span><br><span class="line"></span><br><span class="line">Method runMethod = class_getInstanceMethod([MJPerson <span class="keyword">class</span>], <span class="keyword">@selector</span>(run));</span><br><span class="line">Method testMethod = class_getInstanceMethod([MJPerson <span class="keyword">class</span>], <span class="keyword">@selector</span>(test));</span><br><span class="line">method_exchangeImplementations(runMethod, testMethod);</span><br><span class="line"></span><br><span class="line">[person run];</span><br></pre></td></tr></table></figure><h2 id="高频面试题"><a href="#高频面试题" class="headerlink" title="高频面试题"></a>高频面试题</h2><blockquote><p>讲一下 OC 的消息机制<br>OC中的方法调用其实都是转成了objc_msgSend函数的调用，给receiver（方法调用者）发送了一条消息（selector方法名）<br>objc_msgSend底层有3大阶段<br>消息发送（当前类、父类中查找）、动态方法解析、消息转发</p></blockquote><blockquote><p>什么是Runtime？平时项目中有用过么？<br>OC是一门动态性比较强的编程语言，允许很多操作推迟到程序运行时再进行<br>OC的动态性就是由Runtime来支撑和实现的，Runtime是一套C语言的API，封装了很多动态性相关的函数<br>平时编写的OC代码，底层都是转换成了Runtime API进行调用<br>具体应用<br>利用关联对象（AssociatedObject）给分类添加属性<br>遍历类的所有成员变量（修改textfield的占位文字颜色、字典转模型、自动归档解档）<br>交换方法实现（交换系统的方法）<br>利用消息转发机制解决方法找不到的异常问题<br>……</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;API-01-类&quot;&gt;&lt;a href=&quot;#API-01-类&quot; class=&quot;headerlink&quot; title=&quot;API-01-类&quot;&gt;&lt;/a&gt;API-01-类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;动态创建一个类（参数：父类，类名，额外的内存空间）&lt;br&gt;Clas</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="Runtime" scheme="http://www.hxtec.top/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Runtime - 消息发送机制</title>
    <link href="http://www.hxtec.top/2022/09/22/Runtime-%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.hxtec.top/2022/09/22/Runtime-%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%9C%BA%E5%88%B6/</id>
    <published>2022-09-22T10:38:49.000Z</published>
    <updated>2022-09-27T07:35:36.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="objc-msgSend执行流程"><a href="#objc-msgSend执行流程" class="headerlink" title="objc_msgSend执行流程"></a>objc_msgSend执行流程</h2><ul><li>OC中的方法调用，其实都是转换为objc_msgSend函数的调用</li><li>objc_msgSend的执行流程可以分为3大阶段<ul><li>消息发送</li><li>动态方法解析</li><li>消息转发</li></ul></li></ul><h3 id="源码跟读"><a href="#源码跟读" class="headerlink" title="源码跟读"></a>源码跟读</h3><blockquote><p>objc-msg-arm64.s</p><ul><li>ENTRY _objc_msgSend</li><li>b.le    LNilOrTagged</li><li>CacheLookup NORMAL</li><li>.macro CacheLookup</li><li>.macro CheckMiss</li><li>STATIC_ENTRY __objc_msgSend_uncached</li><li>.macro MethodTableLookup</li><li>__class_lookupMethodAndLoadCache3</li></ul></blockquote><blockquote><p>objc-runtime-new.mm</p><ul><li>_class_lookupMethodAndLoadCache3</li><li>lookUpImpOrForward</li><li>getMethodNoSuper_nolock、search_method_list、log_and_fill_cache</li><li>cache_getImp、log_and_fill_cache、getMethodNoSuper_nolock、log_and_fill_cache</li><li>_class_resolveInstanceMethod</li><li>_objc_msgForward_impcache</li></ul></blockquote><blockquote><p>objc-msg-arm64.s</p><ul><li>STATIC_ENTRY __objc_msgForward_impcache</li><li>ENTRY __objc_msgForward</li></ul></blockquote><blockquote><p>Core Foundation</p><ul><li>__forwarding__（不开源）</li></ul></blockquote><h3 id="消息发送-objc-msgSend执行流程1"><a href="#消息发送-objc-msgSend执行流程1" class="headerlink" title="消息发送 - objc_msgSend执行流程1"></a>消息发送 - objc_msgSend执行流程1</h3><ul><li>receiver是否为nil<ul><li>是，退出</li><li>否<ul><li>从receiverClass的cache中查找方法<ul><li>找到方法 -&gt; 调用方法结束查找</li><li>没有找到方法<ul><li>从receiverClass的<code>class_rw_t</code>中查找方法<ul><li>找到方法 -&gt; 调用方法结束查找，并将方法缓存到receiverClass的cache中</li><li>未找到方法<ul><li>从superClass的<code>cache</code>中查找方法<ul><li>找到方法 -&gt; 调用方法结束查找，并将方法缓存到receiverClass的cache中</li><li>未找到方法<ul><li>从<code>superClass</code>的cache中查找方法<ul><li>找到方法 -&gt; 调用方法结束查找，并将方法缓存到receiverClass的cache中</li><li>未找到方法<ul><li>上层是否还有<code>superClass</code><ul><li>是，继续 从superClass的cache中查找方法</li><li>否，进入 <code>动态方法解析</code> 阶段</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>如果是从class_rw_t中查找方法<ul><li>已经排序的，二分查找</li><li>没有排序的，遍历查找</li></ul></li><li>receiver通过isa指针找到receiverClass</li><li>receiverClass通过superClass指针找到superClass</li></ul><h3 id="动态方法解析-objc-msgSend执行流程2"><a href="#动态方法解析-objc-msgSend执行流程2" class="headerlink" title="动态方法解析 - objc_msgSend执行流程2"></a>动态方法解析 - objc_msgSend执行流程2</h3><ul><li>是否曾经有动态解析<ul><li>是，进入 <code>消息转发</code> 阶段</li><li>否<ul><li>调用+resolveInstanceMethod:或者+resolveClassMethod:方法来动态解析方法</li><li>标记为已经动态解析</li><li>消息发送</li></ul></li></ul></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> other(<span class="type">id</span> <span class="keyword">self</span>, SEL _cmd) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ - %s - %@&quot;</span>, <span class="keyword">self</span>, sel_getName(_cmd), __func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="type">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(test)) &#123;</span><br><span class="line">        Method method = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(other));</span><br><span class="line">        class_addMethod(<span class="keyword">self</span>,</span><br><span class="line">                        sel,</span><br><span class="line">                        method_getImplementation(method),</span><br><span class="line">                        method_getTypeEncoding(method));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="variable language_">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>开发者可以实现以下方法，来动态添加方法实现</p><ul><li>+resolveInstanceMethod:</li><li>+resolveClassMethod:</li></ul></blockquote><blockquote><p>动态解析过后，会重新走“消息发送”的流程<br>“从<code>receiverClass的cache</code>中查找方法”这一步开始执行</p></blockquote><h3 id="消息转发-objc-msgSend执行流程3"><a href="#消息转发-objc-msgSend执行流程3" class="headerlink" title="消息转发 - objc_msgSend执行流程3"></a>消息转发 - objc_msgSend执行流程3</h3><ul><li>调用 <code>forwardingTargetForSelector:</code> 方法<ul><li>返回值不为nil -&gt; objc_msgSend(返回值， SEL)</li><li>返回值为nil<ul><li>调用 <code>methodSignatureForSelector:</code> 方法<ul><li>返回值不为nil 调用 <code>forwardInvocation:</code> 方法</li><li>返回值为nil<ul><li>调用<code>doesNotRecognizedSelector:</code>方法（常见的方法找不到错误）</li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>示例：</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="variable language_">super</span> forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">if</span> (aSelector == <span class="keyword">@selector</span>(test)) <span class="keyword">return</span> [<span class="built_in">NSMethodSignature</span> signatureWithObjCTypes:<span class="string">&quot;v@:&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> [<span class="variable language_">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">&quot;可以作任何处理...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>开发者可以在<code>forwardInvocation:</code>方法中自定义任何逻辑<br>且：以上方法都有对象方法、类方法2个版本（前面可以是加号+，也可以是减号-）</p></blockquote><blockquote><p>补充：<br><code>@dynamic</code>是告诉编译器不用自动生成getter和setter的实现，等到运行时再添加方法实现</p></blockquote><h2 id="Super的本质"><a href="#Super的本质" class="headerlink" title="Super的本质"></a>Super的本质</h2><ul><li>super调用，底层会转换为objc_msgSendSuper2函数的调用，接收2个参数<ul><li>struct objc_super2</li><li>SEL</li></ul></li></ul><blockquote><p>结构体如下：</p><ul><li>receiver是消息接收者</li><li>current_class是recevier的class对象</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">objc_super2</span> &#123;</span><br><span class="line">    id receiver;</span><br><span class="line">    Class current_class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LLVM的中间代码（IR）"><a href="#LLVM的中间代码（IR）" class="headerlink" title="LLVM的中间代码（IR）"></a>LLVM的中间代码（IR）</h2><ul><li>Objective-C在变为机器代码之前，会被LLVM编译器转换为中间代码（Intermediate Representation）</li></ul><blockquote><p>可以使用以下命令行指令生成中间代码</p><ul><li>clang -emit-llvm -S main.m</li></ul></blockquote><blockquote><p>语法简介<br>@ - 全局变量<br>% - 局部变量<br>alloca - 在当前执行的函数的堆栈帧中分配内存，当该函数返回到其调用者时，将自动释放内存<br>i32 - 32位4字节的整数<br>align - 对齐<br>load - 读出，store 写入<br>icmp - 两个整数值比较，返回布尔值<br>br - 选择分支，根据条件来转向label，不根据条件跳转的话类似 goto<br>label - 代码标签<br>call - 调用函数</p></blockquote><ul><li>具体可以参考官方文档：<a href="https://llvm.org/docs/LangRef.html">https://llvm.org/docs/LangRef.html</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;objc-msgSend执行流程&quot;&gt;&lt;a href=&quot;#objc-msgSend执行流程&quot; class=&quot;headerlink&quot; title=&quot;objc_msgSend执行流程&quot;&gt;&lt;/a&gt;objc_msgSend执行流程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OC中的方法调用</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="Runtime" scheme="http://www.hxtec.top/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Runtime理解</title>
    <link href="http://www.hxtec.top/2022/09/22/Runtime%E7%90%86%E8%A7%A3/"/>
    <id>http://www.hxtec.top/2022/09/22/Runtime%E7%90%86%E8%A7%A3/</id>
    <published>2022-09-22T09:26:52.000Z</published>
    <updated>2022-09-27T07:35:25.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>Object-C是一门动态性比较强的编程语言，跟C，C++等语言有着很大的不同</li><li>Object-C的动态性是由Runtime API来支撑的</li><li>Runtime API提供的接口基本都是C语言的，源码由C&#x2F;C++&#x2F;汇编编写</li></ul><h2 id="isa详解"><a href="#isa详解" class="headerlink" title="isa详解"></a>isa详解</h2><ul><li>学习Runtime，首先了解底层的常用数据结构，比如<code>iso</code>指针</li><li>在arm64架构之前，isa就是一个普通的指针，存储着Class，Meta-Class对象的内存地址</li><li>从arm64架构开始，对isa进行了优化，变成了一个共用体（union）结构，还使用位域来存储更多的信息</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">isa_t</span> &#123;</span><br><span class="line">    Class cls;</span><br><span class="line">    <span class="type">uintptr_t</span> bits;</span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="type">uintptr_t</span> nonpointer                : <span class="number">1</span>;</span><br><span class="line">        <span class="type">uintptr_t</span> has_assoc                 : <span class="number">1</span>;</span><br><span class="line">        <span class="type">uintptr_t</span> has_cxx_dtor              : <span class="number">1</span>;</span><br><span class="line">        <span class="type">uintptr_t</span> shiftcls                  : <span class="number">33</span>;</span><br><span class="line">        <span class="type">uintptr_t</span> magic                     : <span class="number">6</span>;</span><br><span class="line">        <span class="type">uintptr_t</span> weakly_referenced         : <span class="number">1</span>;</span><br><span class="line">        <span class="type">uintptr_t</span> deallocating              : <span class="number">1</span>;</span><br><span class="line">        <span class="type">uintptr_t</span> has_sidetable_rc          : <span class="number">1</span>;</span><br><span class="line">        <span class="type">uintptr_t</span> extra_rc                  : <span class="number">19</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isa详解-位域"><a href="#isa详解-位域" class="headerlink" title="isa详解 - 位域"></a>isa详解 - 位域</h3><ul><li>nonpointer<ul><li>0，代表普通的指针，存储着Class、Meta-Class对象的内存地址</li><li>1，代表优化过，使用位域存储更多的信息</li></ul></li><li>has_assoc<ul><li>是否有设置过关联对象，如果没有，释放时会更快</li></ul></li><li>has_cxx_dtor<ul><li>是否有C++的析构函数（.cxx_destruct），如果没有，释放时会更快</li></ul></li><li>shiftcls<ul><li>存储着Class、Meta-Class对象的内存地址信息</li></ul></li><li>magic<ul><li>用于在调试时分辨对象是否未完成初始化</li></ul></li><li>weakly_referenced<ul><li>是否有被弱引用指向过，如果没有，释放时会更快</li></ul></li><li>deallocating<ul><li>对象是否正在释放</li></ul></li><li>extra_rc<ul><li>里面存储的值是引用计数器减1</li></ul></li><li>has_sidetable_rc<ul><li>引用计数器是否过大无法存储在isa中</li><li>如果为1，那么引用计数会存储在一个叫SideTable的类的属性中</li></ul></li></ul><h2 id="Class的结构"><a href="#Class的结构" class="headerlink" title="Class的结构"></a>Class的结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">objc_object</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">isa_t</span> isa;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">objc_class</span> : objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    Class superclass;</span><br><span class="line">    <span class="type">cache_t</span> cache;            <span class="comment">// 方法缓存</span></span><br><span class="line">    <span class="type">class_data_bits_t</span> bits;  <span class="comment">// 用于获取具体的类信息  &amp;FAST_DATA_MASK</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>bits &amp;FAST_DATA_MASK，可以得到class_rw_t</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">class_rw_t</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> flags;</span><br><span class="line">    <span class="type">uint32_t</span> version;</span><br><span class="line">    <span class="type">const</span> <span class="type">class_ro_t</span> *ro;</span><br><span class="line">    <span class="type">method_array_t</span> methods;      <span class="comment">//方法列表</span></span><br><span class="line">    <span class="type">property_array_t</span> properties; <span class="comment">//属性列表</span></span><br><span class="line">    <span class="type">protocol_array_t</span> protocols;  <span class="comment">//协议列表</span></span><br><span class="line">    Class firstSubclass;</span><br><span class="line">    Class nextSiblingClass;</span><br><span class="line">    <span class="type">char</span> *demangledName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>class_ro_t的内容如下：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">class_ro_t</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> flags;</span><br><span class="line">    <span class="type">uint32_t</span> instanceStart;</span><br><span class="line">    <span class="type">uint32_t</span> instanceSize;  <span class="comment">// instance对象占用的内存空间</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="type">uint32_t</span> reserved;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> * ivarLayout;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * name;<span class="comment">// 类名</span></span><br><span class="line">    <span class="type">method_list_t</span> * baseMethodList;</span><br><span class="line">    <span class="type">protocol_list_t</span> * baseProtocols;</span><br><span class="line">    <span class="type">const</span> <span class="type">ivar_list_t</span> * ivars;<span class="comment">//成员变量列表</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> * weakIvarLayout;</span><br><span class="line">    <span class="type">property_list_t</span> *baseProperties;</span><br><span class="line">    <span class="function"><span class="type">method_list_t</span> *<span class="title">baseMethods</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseMethodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="class-rw-t"><a href="#class-rw-t" class="headerlink" title="class_rw_t"></a>class_rw_t</h3><blockquote><p>class_rw_t里面的methos, properties, protocols是二维数组，是可读可写的，包含了类的初始内容、分类的内容</p><ul><li>methods里面包含多个method_list_t</li><li>method_list_t里面包含多个method_t</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">method_array_t</span> methods; -&gt; <span class="type">method_list_t</span> -&gt; <span class="type">method_t</span></span><br></pre></td></tr></table></figure><h3 id="class-ro-t"><a href="#class-ro-t" class="headerlink" title="class_ro_t"></a>class_ro_t</h3><blockquote><p>class_ro_t里面的baseMethodList，baseProtocols，ivars，baseProperties是一维数组，是只读的，包含了类的初始内容</p><ul><li>baseMethodList里面包含多个method_t</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">method_list_t</span> * baseMethodList; -&gt; <span class="type">method_t</span></span><br></pre></td></tr></table></figure><h3 id="method-t"><a href="#method-t" class="headerlink" title="method_t"></a>method_t</h3><blockquote><p>method_t是对方法&#x2F;函数的封装</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">method_t</span> &#123;</span><br><span class="line">    SEL name;   <span class="comment">//函数名</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *types;  <span class="comment">//编码（返回值类型、参数类型）</span></span><br><span class="line">    IMP imp;    <span class="comment">//指向函数的指针（函数地址）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>IMP代表函数的具体表现</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...);</span><br></pre></td></tr></table></figure><blockquote><p>SEL代表方法&#x2F;函数名，一般叫做选择器，底层结构跟char*类似</p><ul><li>可以通过@selector()和sel_registerName()获得</li><li>可以通过sel_getName()和NSStringFromSelector()转成字符串</li><li>不同类中相同名字的方法，所对应的方法选择器是相同的</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">objc_selector</span> *SEL;</span><br></pre></td></tr></table></figure><blockquote><p>types包含了函数返回值、参数编码的字符串</p></blockquote><h3 id="cache-t-方法缓存"><a href="#cache-t-方法缓存" class="headerlink" title="cache_t - 方法缓存"></a>cache_t - 方法缓存</h3><blockquote><p>Class内部结构中有个方法缓存（cache_t），用散列表（哈希表）来缓存曾经调用过的方法，可以提高方法的查找速度</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cache_t</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">bucket_t</span> *_buckets;<span class="comment">//散列表</span></span><br><span class="line">    <span class="type">mask_t</span> _mask;<span class="comment">//散列表的长度 -1</span></span><br><span class="line">    <span class="type">mask_t</span> _occupied;<span class="comment">//已经缓存的方法数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">bucket_t</span> *<span class="built_in">buckets</span>();</span><br><span class="line">    <span class="function"><span class="type">mask_t</span> <span class="title">mask</span><span class="params">()</span></span>;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>_buckets里面存放着许多bucket_t，bucket_t结构如下：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">bucket_t</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">cache_key_t</span> _key;<span class="comment">// SEL作为key</span></span><br><span class="line">    IMP _imp;<span class="comment">//函数的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">cache_key_t</span> <span class="title">key</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> IMP <span class="title">imp</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> (IMP)_imp; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">setKey</span><span class="params">(<span class="type">cache_key_t</span> newKey)</span> </span>&#123; _key = newKey; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">setImp</span><span class="params">(IMP newImp)</span> </span>&#123; _imp = newImp; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">cache_key_t</span> newKey, IMP newImp)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>缓存查找，利用空间换时间的缓存机制<br>objc-cache.mm文件<br>bucket_t * cache_t::find(cache_key_t k, id receiver)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bucket_t</span> * <span class="title">cache_t::find</span><span class="params">(<span class="type">cache_key_t</span> k, id receiver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(k != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">bucket_t</span> *b = <span class="built_in">buckets</span>();</span><br><span class="line">    <span class="type">mask_t</span> m = <span class="built_in">mask</span>();</span><br><span class="line">    <span class="type">mask_t</span> begin = <span class="built_in">cache_hash</span>(k, m);</span><br><span class="line">    <span class="type">mask_t</span> i = begin;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (b[i].<span class="built_in">key</span>() == <span class="number">0</span>  ||  b[i].<span class="built_in">key</span>() == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;b[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((i = <span class="built_in">cache_next</span>(i, m)) != begin);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hack</span></span><br><span class="line">    Class cls = (Class)((<span class="type">uintptr_t</span>)<span class="keyword">this</span> - <span class="built_in">offsetof</span>(objc_class, cache));</span><br><span class="line">    <span class="type">cache_t</span>::<span class="built_in">bad_cache</span>(receiver, (SEL)k, cls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li><li><a href="https://opensource.apple.com/tarballs/objc4/">objc源码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Object-C是一门动态性比较强的编程语言，跟C，C++等语言有着很大的不同&lt;/li&gt;
&lt;li&gt;Object-C的动态性是由R</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Objective-C" scheme="http://www.hxtec.top/tags/Objective-C/"/>
    
    <category term="底层原理" scheme="http://www.hxtec.top/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
    <category term="Runtime" scheme="http://www.hxtec.top/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Swift-响应式编程</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2022-09-19T03:05:44.000Z</published>
    <updated>2022-09-27T07:33:59.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>响应式编程（Reactive Programming, 简称RP）<ul><li>一种编程范式，于1997年提出，可以简化异步编程，提供更优雅的数据绑定</li><li>一般与函数式融合在一起，所以也会叫做：函数响应式编程（Functional Reactive Programming, 简称FRP）</li></ul></li><li>比较著名的、成熟的响应式编程<ul><li>ReactiveCocoa，简称RAC，有OC，Swift版本<ul><li>官网： <a href="http://reactivecocoa.io/">http://reactivecocoa.io/</a></li><li>github：<a href="https://github.com/ReactiveCocoa">https://github.com/ReactiveCocoa</a></li></ul></li><li>ReactiveX，简称Rx，有众多编程语言版本，比如：RxJava, RxKotlin, RxJS, RxCpp, RxPHP, RxGo, RxSwift等等.<ul><li>官网：<a href="http://reactivex.io/">http://reactivex.io/</a></li><li>github： <a href="https://github.com/ReactiveX">https://github.com/ReactiveX</a></li></ul></li></ul></li></ul><h2 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h2><ul><li>RxSwift(ReactiveX for Swift)，ReactiveX的Swift版本<ul><li>源码：<a href="https://github.com/ReactiveX/RxSwift">https://github.com/ReactiveX/RxSwift</a></li><li>中文文档： <a href="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/">https://beeth0ven.github.io/RxSwift-Chinese-Documentation/</a></li></ul></li><li>模块说明<ul><li>RxSwift：Rx标准API的Swift实现，不包括任何iOS相关的内容</li><li>RxCocoa：基于RxSwift，给iOS UI控件扩展了很多Rx特性</li></ul></li></ul><h2 id="RxSwift的核心角色"><a href="#RxSwift的核心角色" class="headerlink" title="RxSwift的核心角色"></a>RxSwift的核心角色</h2><ul><li>Observable：负责发送事件（Event）</li><li>Observer：负责订阅Observable，监听Observable发送的事件（Event）<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Event</span>&lt;<span class="title class_">Element</span>&gt; &#123;</span><br><span class="line">    <span class="comment">/// Next element is produced.</span></span><br><span class="line">    <span class="keyword">case</span> next(<span class="type">Element</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Sequence terminated with an error.</span></span><br><span class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// Sequence completed successfully.</span></span><br><span class="line">    <span class="keyword">case</span> completed</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li>Event有3种 <ul><li>next：携带具体数据</li><li>error：携带错误信息，表明Observable终止，不会再发出事件</li><li>completed：表明Observable终止，不会再发出事件</li></ul></li></ul><blockquote><p>创建、订阅Observable示例1</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable <span class="operator">=</span> <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; observer <span class="keyword">in</span></span><br><span class="line">    observer.onNext(<span class="number">1</span>)</span><br><span class="line">    observer.onCompleted()</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">observable <span class="operator">=</span> <span class="type">Observable</span>.just(<span class="number">1</span>)</span><br><span class="line">observable <span class="operator">=</span> <span class="type">Observable</span>.of(<span class="number">1</span>)</span><br><span class="line">observable <span class="operator">=</span> <span class="type">Observable</span>.from([<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observable <span class="operator">=</span> <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; observer <span class="keyword">in</span></span><br><span class="line">    observer.onNext(<span class="number">1</span>)</span><br><span class="line">    observer.onNext(<span class="number">2</span>)</span><br><span class="line">    observer.onNext(<span class="number">3</span>)</span><br><span class="line">    observer.onCompleted()</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">observable <span class="operator">=</span> <span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">observable <span class="operator">=</span> <span class="type">Observable</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">observable.subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">&#125;.dispose()</span><br><span class="line"></span><br><span class="line">observable.subscribe(onNext: &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;next&quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">&#125;, onError: &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;completed&quot;</span>)</span><br><span class="line">&#125;, onDisposed: &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dispose&quot;</span>)</span><br><span class="line">&#125;).dispose()</span><br></pre></td></tr></table></figure><blockquote><p>创建、订阅Observable示例1</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observable <span class="operator">=</span> <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.timer(.seconds(<span class="number">3</span>),</span><br><span class="line">                                       period: .seconds(<span class="number">1</span>),</span><br><span class="line">                                       scheduler: <span class="type">MainScheduler</span>.instance)</span><br><span class="line">                                       </span><br><span class="line">observable.map &#123; <span class="string">&quot;数值是<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span> &#125; </span><br><span class="line">          .bind(to: label.rx.text) </span><br><span class="line">          .disposed(by: bag)</span><br></pre></td></tr></table></figure><h2 id="创建Observer"><a href="#创建Observer" class="headerlink" title="创建Observer"></a>创建Observer</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer <span class="operator">=</span> <span class="type">AnyObserver</span>&lt;<span class="type">Int</span>&gt;.<span class="keyword">init</span> &#123; event <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> event &#123;</span><br><span class="line">    <span class="keyword">case</span> .next(<span class="keyword">let</span> data):</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="keyword">case</span> .completed:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;completed&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>, error)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Observable</span>.just(<span class="number">1</span>).subscribe(observer).dispose()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> binder <span class="operator">=</span> <span class="type">Binder</span>&lt;<span class="type">String</span>&gt;(label) &#123; label, text <span class="keyword">in</span></span><br><span class="line">    label.text <span class="operator">=</span> text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Observable</span>.just(<span class="number">1</span>).map &#123; <span class="string">&quot;数值是<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span> &#125;.subscribe(binder).dispose()</span><br><span class="line"><span class="comment">//Observable.just(1).map &#123; &quot;数值是\($0)&quot; &#125;.bind(to: binder).dispose()</span></span><br></pre></td></tr></table></figure><h2 id="扩展Binder属性"><a href="#扩展Binder属性" class="headerlink" title="扩展Binder属性"></a>扩展Binder属性</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Reactive</span> <span class="title class_">where</span> <span class="title class_">Base</span>: <span class="title class_">UIView</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> hidden: <span class="type">Binder</span>&lt;<span class="type">Bool</span>&gt; &#123;</span><br><span class="line">        <span class="type">Binder</span>&lt;<span class="type">Bool</span>&gt;(base) &#123; view, value <span class="keyword">in</span></span><br><span class="line">        view.isHidden <span class="operator">=</span> value</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observable <span class="operator">=</span> <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.interval(.seconds(<span class="number">1</span>),</span><br><span class="line">                                          scheduler: <span class="type">MainScheduler</span>.instance)</span><br><span class="line">observable.map &#123; <span class="variable">$0</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#125;.bind(to: button.rx.hidden).disposed(by: bag)</span><br></pre></td></tr></table></figure><h2 id="传统的状态监听"><a href="#传统的状态监听" class="headerlink" title="传统的状态监听"></a>传统的状态监听</h2><ul><li>在开发中经常要对各种状态进行监听，传统的常见监听方案有：<ul><li>KVO</li><li>Target-Action</li><li>Notification</li><li>Delegate</li><li>Block Callback</li></ul></li><li>传统文字经常会出现错综复杂的依赖关系、耦合性较高，还需要编写重复的非业务代码</li></ul><blockquote><p>RxSwift的状态监听示例1：</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮点击</span></span><br><span class="line">button.rx.tap.subscribe(onNext: &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;按钮被点击了1&quot;</span>)</span><br><span class="line">&#125;).disposed(by: bag)</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据绑定到Cell</span></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="type">Observable</span>.just([</span><br><span class="line">    <span class="type">Person</span>(name: <span class="string">&quot;Jack&quot;</span>, age: <span class="number">10</span>),</span><br><span class="line">    <span class="type">Person</span>(name: <span class="string">&quot;Rose&quot;</span>, age: <span class="number">20</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">data.bind(to: tableView.rx.items(cellIdentifier: <span class="string">&quot;cell&quot;</span>)) &#123; row, person, cell <span class="keyword">in</span></span><br><span class="line">    cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> person.name</span><br><span class="line">    cell.detailTextLabel<span class="operator">?</span>.text <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(person.age)</span>&quot;</span></span><br><span class="line">&#125;.disposed(by: bag)</span><br><span class="line"></span><br><span class="line">tableView.rx.modelSelected(<span class="type">Person</span>.<span class="keyword">self</span>) .subscribe(onNext: &#123; person <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;点击了&quot;</span>, person.name)</span><br><span class="line">&#125;).disposed(by: bag)</span><br></pre></td></tr></table></figure><blockquote><p>RxSwift的状态监听示例2：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Dog: NSObject &#123;</span><br><span class="line">    @objc dynamic var name: String? </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dog.rx.observe(String.self, &quot;name&quot;) .subscribe(onNext: &#123; name in</span><br><span class="line">    print(&quot;name is&quot;, name ?? &quot;nil&quot;)</span><br><span class="line">&#125;).disposed(by: bag)</span><br><span class="line"></span><br><span class="line">dog.name = &quot;larry&quot;</span><br><span class="line">dog.name = &quot;wangwang&quot;</span><br><span class="line"></span><br><span class="line">NotificationCenter.default.rx.notification(UIApplication.didEnterBackgroundNotification).subscribe(onNext: &#123; notification in</span><br><span class="line">    print(&quot;APP进入后台&quot;, notification)</span><br><span class="line">&#125;).disposed(by: bag)</span><br></pre></td></tr></table></figure><h2 id="既是Observable，又是Observer"><a href="#既是Observable，又是Observer" class="headerlink" title="既是Observable，又是Observer"></a>既是Observable，又是Observer</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Observable</span>.just(<span class="number">0.8</span>).bind(to: slider.rx.value).dispose()</span><br><span class="line"></span><br><span class="line">slider.rx.value.map &#123; </span><br><span class="line">    <span class="string">&quot;当前数值是：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span></span><br><span class="line">&#125;.bind(to: textField.rx.text).disposed(by: bag)</span><br><span class="line"></span><br><span class="line">textField.rx.text.subscribe(onNext: &#123; text <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;text is&quot;</span>, text <span class="operator">??</span> <span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;).disposed(by: bag)</span><br></pre></td></tr></table></figure><ul><li>诸如UISlider.rx.value、UTextField.rx.text这类属性值，既是Observable，又是Observer<ul><li>它们是RxCocoa.ControlProperty类型</li></ul></li></ul><h2 id="Disposable"><a href="#Disposable" class="headerlink" title="Disposable"></a>Disposable</h2><ul><li>每当Observable被订阅时，都会返回一个Disposable实例，当调用Disposable的dispose，就相当于取消订阅</li><li>在不需要再接收事件时，建议取消订阅，释放资源。有3种常见方式取消订阅</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即取消订阅（一次性订阅）</span></span><br><span class="line">observable.subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">&#125;.dispose()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当bag销毁（deinit）时，会自动调用Disposable实例的dispose</span></span><br><span class="line">observable.subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">&#125;.disposed(by: bag)</span><br><span class="line"></span><br><span class="line"><span class="comment">// self销毁时（deinit）时，会自动调用Disposable实例的dispose</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> observable.takeUntil(<span class="keyword">self</span>.rx.deallocated).subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;响应式编程（Reactive Programming, 简称RP）&lt;ul&gt;
&lt;li&gt;一种编程范式，于1997年提出，可以简化异步</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift-面向协议编程</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B/</id>
    <published>2022-09-19T03:05:34.000Z</published>
    <updated>2022-09-27T07:34:09.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>面向协议编程（Protocol Oriented Programming, 简称POP）<ul><li>是Swift的一种编程范式，Apple于2015年WWDC提出</li><li>在Swift标准库中，能见到大量POP的影子</li></ul></li><li>同时，Swift也是一门面向对象的编程语言（Object Oriented Programming, 简称OOP）</li><li>在Swift开发中，OOP和POP是相辅相成的，任何一方并不能取代另一方</li><li>POP能弥补OOP一些设计上的不足</li></ul><h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><ul><li>OOP的三大特性：封装，继承，多态</li><li>继承的经典使用场合：</li><li>当多个类（比如A, B, C类）具有很多共性时，可以将这些共性抽取到一个父类中（比如D类），最后A, B, C类继承D类</li></ul><h3 id="OOP的缺点"><a href="#OOP的缺点" class="headerlink" title="OOP的缺点"></a>OOP的缺点</h3><ul><li>比如，如何将下面BVC, DVC的公共方法run抽取出来？<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BVC</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;run&quot;</span>) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DVC</span>: <span class="title class_">UITableViewController</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;run&quot;</span>) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>基于OOP想到的一些解决方案：<ol><li>将run方法放到另一个对象A中，然后BVC, DVC拥有对象A的属性，此时，多了一些额外的依赖关系</li><li>将run方法增加到UIViewController分类中，不过UIViewController会越来越臃肿，而且会影响它的其他所有子类</li><li>将run方法抽取到新的父类，采用多继承，会增加程序设计复杂度，产生菱形继承等问题，需要开发者额外解决</li></ol></li></ul><blockquote><p>解决方案：通过协议的方式</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;run&quot;</span>) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BVC</span>: <span class="title class_">UIViewController</span>, <span class="title class_">Runnable</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DVC</span>: <span class="title class_">UITableViewController</span>, <span class="title class_">Runnable</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>POP的注意点</p><ul><li>优先考虑创建协议，而不是父类（基类）</li><li>优先考虑值类型（struct, enum），而不是引用类型（class）</li><li>巧用协议的扩展功能</li><li>不要为了面向协议而使用协议</li></ul></blockquote><h3 id="利用协议实现前辍效果"><a href="#利用协议实现前辍效果" class="headerlink" title="利用协议实现前辍效果"></a>利用协议实现前辍效果</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HX</span>&lt;<span class="title class_">Base</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> base: <span class="type">Base</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">base</span>: <span class="type">Base</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.base <span class="operator">=</span> base</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">HXCompatible</span> &#123;&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">HXCompatible</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> hx: <span class="type">HX</span>&lt;<span class="keyword">Self</span>&gt;.<span class="keyword">Type</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="type">HX</span>&lt;<span class="keyword">Self</span>&gt;.<span class="keyword">self</span> &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> hx: <span class="type">HX</span>&lt;<span class="keyword">Self</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="type">HX</span>(<span class="keyword">self</span>) &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;&#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对系统库进行扩展</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">String</span>: <span class="title class_">HXCompatible</span> &#123;&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">HX</span> <span class="title class_">where</span> <span class="title class_">Base</span> == <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">numberCount</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> base <span class="keyword">where</span> (<span class="string">&quot;0&quot;</span><span class="operator">...</span><span class="string">&quot;9&quot;</span>).contains(c) &#123;</span><br><span class="line">            count <span class="operator">+=</span> <span class="number">1</span> </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">var</span> string <span class="operator">=</span> <span class="string">&quot;123fdsf434&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string.hx.numberCount())</span><br></pre></td></tr></table></figure><blockquote><p>示例1：</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span>: <span class="title class_">HXCompatible</span> &#123;&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">HX</span> <span class="title class_">where</span> <span class="title class_">Base</span>: <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">test</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span>.hx.test()</span><br><span class="line"><span class="type">Student</span>.hx.test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line">p.hx.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s <span class="operator">=</span> <span class="type">Student</span>()</span><br><span class="line">s.hx.run()</span><br></pre></td></tr></table></figure><blockquote><p>示例2：</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对Sting, NSString进行扩展</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">String</span>: <span class="title class_">HXCompatible</span> &#123;&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">NSString</span>: <span class="title class_">HXCompatible</span> &#123;&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">HX</span> <span class="title class_">where</span> <span class="title class_">Base</span>: <span class="title class_">ExpressibleByStringLiteral</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">numberCount</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> string <span class="operator">=</span> base <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> string <span class="keyword">where</span> (<span class="string">&quot;0&quot;</span><span class="operator">...</span><span class="string">&quot;9&quot;</span>).contains(c) &#123;</span><br><span class="line">            count <span class="operator">+=</span> <span class="number">1</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;123fdsf434&quot;</span></span><br><span class="line"><span class="keyword">var</span> s2: <span class="type">NSString</span> <span class="operator">=</span> <span class="string">&quot;123fdsf434&quot;</span></span><br><span class="line"><span class="keyword">var</span> s3: <span class="type">NSMutableString</span> <span class="operator">=</span> <span class="string">&quot;123fdsf434&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s1.hx.numberCount())</span><br><span class="line"><span class="built_in">print</span>(s2.hx.numberCount())</span><br><span class="line"><span class="built_in">print</span>(s3.hx.numberCount())</span><br></pre></td></tr></table></figure><h3 id="利用协议实现类型判断"><a href="#利用协议实现类型判断" class="headerlink" title="利用协议实现类型判断"></a>利用协议实现类型判断</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通判断数组方法</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">isArray</span>(<span class="keyword">_</span> <span class="params">value</span>: <span class="keyword">Any</span>) -&gt; <span class="type">Bool</span> &#123; value <span class="keyword">is</span> [<span class="keyword">Any</span>] &#125;</span><br><span class="line">isArray( [<span class="number">1</span>, <span class="number">2</span>] )</span><br><span class="line">isArray( [<span class="string">&quot;1&quot;</span>, <span class="number">2</span>] )</span><br><span class="line">isArray( <span class="type">NSArray</span>() )</span><br><span class="line">isArray( <span class="type">NSMutableArray</span>() )</span><br><span class="line"></span><br><span class="line"><span class="comment">//对Array, NSArray进行扩展方法</span></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">ArrayType</span> &#123;&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Array</span>: <span class="title class_">ArrayType</span> &#123;&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">NSArray</span>: <span class="title class_">ArrayType</span> &#123;&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">isArrayType</span>(<span class="keyword">_</span> <span class="params">type</span>: <span class="keyword">Any</span>.<span class="keyword">Type</span>) -&gt; <span class="type">Bool</span> &#123; type <span class="keyword">is</span> <span class="type">ArrayType</span>.<span class="keyword">Type</span> &#125;</span><br><span class="line"></span><br><span class="line">isArrayType([<span class="type">Int</span>].<span class="keyword">self</span>)</span><br><span class="line">isArrayType([<span class="keyword">Any</span>].<span class="keyword">self</span>)</span><br><span class="line">isArrayType(<span class="type">NSArray</span>.<span class="keyword">self</span>)</span><br><span class="line">isArrayType(<span class="type">NSMutableArray</span>.<span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;面向协议编程（Protocol Oriented Programming, 简称POP）&lt;ul&gt;
&lt;li&gt;是Swift的一种编程</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift-函数式编程</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2022-09-19T03:05:24.000Z</published>
    <updated>2022-09-27T07:34:32.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>函数式编程（Funtional Programming，简称FP）是一种编程范式，也就是如何编写程序的方法论<ul><li>主要思想：把计算过程尽量分解成一系列可复用函数的调用</li><li>主要特征：函数是“第一等公民”</li><li>函数与其他数据类型一样的地位，可以赋值给其他变量，也可以作为函数参数、函数返回值</li></ul></li><li>函数式编程最早出现在LISP语言，绝大部分的现代编程语言也对函数式编程做了不同程序的支持，比如：<ul><li>Haskkell, JavaScript, Python, Swift, Kotlin, Scale等</li></ul></li><li>函数式编程中几个常用的概念：<ul><li>Higher-Order Function, Function Curring</li><li>Functor, Applicative Functor, Monad</li></ul></li></ul><h2 id="FP实践"><a href="#FP实践" class="headerlink" title="FP实践"></a>FP实践</h2><blockquote><p>传统写法</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设要实现以下功能：[(num + 3) * 5 - 1] % 10 / 2</span></span><br><span class="line"><span class="keyword">var</span> num <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">+</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sub</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">-</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">multiple</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">*</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">divide</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">/</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">mod</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">%</span> v2 &#125;</span><br><span class="line"></span><br><span class="line">divide(mod(sub(multiple(add(num, <span class="number">3</span>), <span class="number">5</span>), <span class="number">1</span>), <span class="number">10</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>函数式写法</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设要实现以下功能：[(num + 3) * 5 - 1] % 10 / 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; &#123; <span class="variable">$0</span> <span class="operator">+</span> v &#125; &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sub</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; &#123; <span class="variable">$0</span> <span class="operator">-</span> v &#125; &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">multiple</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; &#123; <span class="variable">$0</span> <span class="operator">*</span> v &#125; &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">divide</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; &#123; <span class="variable">$0</span> <span class="operator">/</span> v &#125; &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">mod</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; &#123; <span class="variable">$0</span> <span class="operator">%</span> v &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">&gt;&gt;&gt;</span> : <span class="type">AdditionPrecedence</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">&gt;&gt;&gt;&lt;</span><span class="type">A</span>, <span class="type">B</span>, <span class="type">C</span><span class="operator">&gt;</span>(<span class="keyword">_</span> f1: <span class="keyword">@escaping</span> (<span class="type">A</span>) -&gt; <span class="type">B</span>, </span><br><span class="line">                  <span class="keyword">_</span> f2: <span class="keyword">@escaping</span> (<span class="type">B</span>) -&gt; <span class="type">C</span>) -&gt; (<span class="type">A</span>) -&gt; <span class="type">C</span> &#123; &#123; f2(f1(<span class="variable">$0</span>)) &#125; &#125;</span><br><span class="line">                  </span><br><span class="line"><span class="keyword">var</span> fn <span class="operator">=</span> add(<span class="number">3</span>) <span class="operator">&gt;&gt;&gt;</span> multiple(<span class="number">5</span>) <span class="operator">&gt;&gt;&gt;</span> sub(<span class="number">1</span>) <span class="operator">&gt;&gt;&gt;</span> mod(<span class="number">10</span>) <span class="operator">&gt;&gt;&gt;</span> divide(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fn(num)</span><br></pre></td></tr></table></figure><h2 id="高阶函数（Higher-Order-Function）"><a href="#高阶函数（Higher-Order-Function）" class="headerlink" title="高阶函数（Higher-Order-Function）"></a>高阶函数（Higher-Order-Function）</h2><ul><li>高阶函数是至少满足下列一个条件的函数：<ul><li>接受一个或多个函数作为输入（map, filter, reduce等）</li><li>返回一个函数</li></ul></li><li>FP中到处都是高阶函数<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; &#123; <span class="variable">$0</span> <span class="operator">+</span> v &#125; &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="柯里化（Curring）"><a href="#柯里化（Curring）" class="headerlink" title="柯里化（Curring）"></a>柯里化（Curring）</h2><ul><li>定义</li><li>将一个接受多个参数的函数变换为一系列只接受单个参数的函数<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">+</span> v2 &#125;</span><br><span class="line">add(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">-&gt; 变换为下面</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; &#123; <span class="variable">$0</span> <span class="operator">+</span> v &#125; &#125;</span><br><span class="line">add(<span class="number">10</span>)(<span class="number">20</span>)</span><br></pre></td></tr></table></figure></li><li>Array, Optional的map方法接收的参数就是一个柯里化函数<blockquote><p>示例1</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">add1</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">+</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">add2</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v3</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">+</span> v2 <span class="operator">+</span> v3 &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">currying</span>&lt;<span class="type">A</span>, <span class="type">B</span>, <span class="type">C</span>&gt;(<span class="keyword">_</span> <span class="params">fn</span>: <span class="keyword">@escaping</span> (<span class="type">A</span>, <span class="type">B</span>) -&gt; <span class="type">C</span>) -&gt; (<span class="type">B</span>) -&gt; (<span class="type">A</span>) -&gt; <span class="type">C</span> &#123;</span><br><span class="line">    &#123; b <span class="keyword">in</span> &#123; a <span class="keyword">in</span> fn(a, b) &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">currying</span>&lt;<span class="type">A</span>, <span class="type">B</span>, <span class="type">C</span>, <span class="type">D</span>&gt;(<span class="keyword">_</span> <span class="params">fn</span>: <span class="keyword">@escaping</span> (<span class="type">A</span>, <span class="type">B</span>, <span class="type">C</span>) -&gt; <span class="type">D</span>) -&gt; (<span class="type">C</span>) -&gt; (<span class="type">B</span>) -&gt; (<span class="type">A</span>) -&gt; <span class="type">D</span> &#123;</span><br><span class="line">    &#123; c <span class="keyword">in</span> &#123; b <span class="keyword">in</span> &#123; a <span class="keyword">in</span> fn(a, b, c) &#125; &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curriedAdd1 <span class="operator">=</span> currying(add1)</span><br><span class="line"><span class="built_in">print</span>(curriedAdd1(<span class="number">10</span>)(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> curriedAdd2 <span class="operator">=</span> currying(add2)</span><br><span class="line"><span class="built_in">print</span>(curriedAdd2(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>))</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>示例2</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设要实现以下功能：[(num + 3) * 5 - 1] % 10 / 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">+</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sub</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">-</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">multiple</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">*</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">divide</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">/</span> v2 &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">mod</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; v1 <span class="operator">%</span> v2 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//柯里化函数</span></span><br><span class="line"><span class="keyword">prefix</span> <span class="keyword">func</span> <span class="title function_">~&lt;</span><span class="type">A</span>, <span class="type">B</span>, <span class="type">C</span><span class="operator">&gt;</span>(<span class="keyword">_</span> fn: <span class="keyword">@escaping</span> (<span class="type">A</span>, <span class="type">B</span>) -&gt; <span class="type">C</span>) -&gt; (<span class="type">B</span>) -&gt; (<span class="type">A</span>) -&gt; <span class="type">C</span> &#123; &#123; b <span class="keyword">in</span> &#123; a <span class="keyword">in</span> fn(a, b) &#125; &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义运算符</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">&gt;&gt;&gt;</span> : <span class="type">AdditionPrecedence</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">&gt;&gt;&gt;&lt;</span><span class="type">A</span>, <span class="type">B</span>, <span class="type">C</span><span class="operator">&gt;</span>(<span class="keyword">_</span> f1: <span class="keyword">@escaping</span> (<span class="type">A</span>) -&gt; <span class="type">B</span>,</span><br><span class="line">                  <span class="keyword">_</span> f2: <span class="keyword">@escaping</span> (<span class="type">B</span>) -&gt; <span class="type">C</span>) -&gt; (<span class="type">A</span>) -&gt; <span class="type">C</span> &#123; &#123; f2(f1(<span class="variable">$0</span>)) &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> fn <span class="operator">=</span> (<span class="operator">~</span>add)(<span class="number">3</span>) <span class="operator">&gt;&gt;&gt;</span> (<span class="operator">~</span>multiple)(<span class="number">5</span>) <span class="operator">&gt;&gt;&gt;</span> (<span class="operator">~</span>sub)(<span class="number">1</span>) <span class="operator">&gt;&gt;&gt;</span> (<span class="operator">~</span>mod)(<span class="number">10</span>) <span class="operator">&gt;&gt;&gt;</span> (<span class="operator">~</span>divide)(<span class="number">2</span>)</span><br><span class="line">fn(num)</span><br></pre></td></tr></table></figure><h2 id="函子（Functor）"><a href="#函子（Functor）" class="headerlink" title="函子（Functor）"></a>函子（Functor）</h2><ul><li>像Array, Optional这样支持map运算的类型，称为函子（Functor）<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array&lt;Element&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">map</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">transform</span>: (<span class="type">Element</span>) -&gt; <span class="type">T</span>) -&gt; <span class="type">Array</span>&lt;<span class="type">T</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional&lt;Wrapped&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">map</span>&lt;<span class="type">U</span>&gt;(<span class="keyword">_</span> <span class="params">transform</span>: (<span class="type">Wrapped</span>) -&gt; <span class="type">U</span>) -&gt; <span class="type">Optional</span>&lt;<span class="type">U</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="适用函子（Applicative-Functor"><a href="#适用函子（Applicative-Functor" class="headerlink" title="适用函子（Applicative Functor"></a>适用函子（Applicative Functor</h2><ul><li><p>对任意一个函子 F，如果能支持以下运算，该函子就是一个适用函子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">pure</span>&lt;<span class="type">A</span>&gt;(<span class="keyword">_</span> <span class="params">value</span>: <span class="type">A</span>) -&gt; <span class="type">F</span>&lt;<span class="type">A</span>&gt;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">&lt;*&gt;&lt;</span><span class="type">A</span>, <span class="type">B</span><span class="operator">&gt;</span>(fn: <span class="type">F</span>&lt;(<span class="type">A</span>) -&gt; <span class="type">B</span>&gt;, value: <span class="type">F</span>&lt;<span class="type">A</span>&gt;) -&gt; <span class="type">F</span>&lt;<span class="type">B</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>Optional可以成为适用函子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">pure</span>&lt;<span class="type">A</span>&gt;(<span class="keyword">_</span> <span class="params">value</span>: <span class="type">A</span>) -&gt; <span class="type">A</span>? &#123; value &#125;</span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">&lt;*&gt;</span> : <span class="type">AdditionPrecedence</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">&lt;*&gt;&lt;</span><span class="type">A</span>, <span class="type">B</span><span class="operator">&gt;</span>(fn: ((<span class="type">A</span>) -&gt; <span class="type">B</span>)<span class="operator">?</span>, value: <span class="type">A</span>?) -&gt; <span class="type">B</span>? &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> f <span class="operator">=</span> fn, <span class="keyword">let</span> v <span class="operator">=</span> value <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> f(v)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> fn: ((<span class="type">Int</span>) -&gt; <span class="type">Int</span>)<span class="operator">?</span> <span class="operator">=</span> &#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">// Optional(20)</span></span><br><span class="line"><span class="built_in">print</span>(fn <span class="operator">&lt;*&gt;</span> value <span class="keyword">as</span> <span class="keyword">Any</span>)</span><br></pre></td></tr></table></figure></li><li><p>Array可以成为适用函子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">pure</span>&lt;<span class="type">A</span>&gt;(<span class="keyword">_</span> <span class="params">value</span>: <span class="type">A</span>) -&gt; [<span class="type">A</span>] &#123; [value] &#125;</span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">&lt;*&gt;</span> : <span class="type">AdditionPrecedence</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">&lt;*&gt;&lt;</span><span class="type">A</span>, <span class="type">B</span><span class="operator">&gt;</span>(fn: [(<span class="type">A</span>) -&gt; <span class="type">B</span>], value: [<span class="type">A</span>]) -&gt; [<span class="type">B</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> arr: [<span class="type">B</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">if</span> fn.count <span class="operator">==</span> value.count &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> fn.startIndex<span class="operator">..&lt;</span>fn.endIndex &#123;</span><br><span class="line">            arr.append(fn[i](value[i]))</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [10]</span></span><br><span class="line"><span class="built_in">print</span>(pure(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">var</span> arr <span class="operator">=</span> [&#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span>&#125;, &#123; <span class="variable">$0</span> <span class="operator">+</span> <span class="number">10</span> &#125;, &#123; <span class="variable">$0</span> <span class="operator">-</span> <span class="number">5</span> &#125;] <span class="operator">&lt;*&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// [2, 12, -2]</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure></li></ul><h2 id="单子（Monad）"><a href="#单子（Monad）" class="headerlink" title="单子（Monad）"></a>单子（Monad）</h2><ul><li>对任意一个类型 F，如果能支持以下运算，那么就可以称为是一个单子（Monad）<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">pure</span>&lt;<span class="type">A</span>&gt;(<span class="keyword">_</span> <span class="params">value</span>: <span class="type">A</span>) -&gt; <span class="type">F</span>&lt;<span class="type">A</span>&gt;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">flatMap</span>&lt;<span class="type">A</span>, <span class="type">B</span>&gt;(<span class="keyword">_</span> <span class="params">value</span>: <span class="type">F</span>&lt;<span class="type">A</span>&gt;, <span class="keyword">_</span> <span class="params">fn</span>: (<span class="type">A</span>) -&gt; <span class="type">F</span>&lt;<span class="type">B</span>&gt;) -&gt; <span class="type">F</span>&lt;<span class="type">B</span>&gt;</span><br></pre></td></tr></table></figure></li><li>Array、Optional都是单子</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;函数式编程（Funtional Programming，简称FP）是一种编程范式，也就是如何编写程序的方法论&lt;ul&gt;
&lt;li&gt;主</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift-从OC到Swift 二</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-%E4%BB%8EOC%E5%88%B0Swift-%E4%BA%8C/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-%E4%BB%8EOC%E5%88%B0Swift-%E4%BA%8C/</id>
    <published>2022-09-19T03:05:10.000Z</published>
    <updated>2022-09-27T07:34:59.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KVC-x2F-KVO"><a href="#KVC-x2F-KVO" class="headerlink" title="KVC&#x2F;KVO"></a>KVC&#x2F;KVO</h2><ul><li>Swift 支持KVC&#x2F;KVO的条件<ul><li>属性所在的类、监听器最终继承自 NSObject</li><li>用 @objc dynamic 修饰对应的属性</li></ul></li></ul><h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">observeValue</span>(<span class="params">forKeyPath</span> <span class="params">keyPath</span>: <span class="type">String</span>?,</span><br><span class="line">                                <span class="params">of</span> <span class="params">object</span>: <span class="keyword">Any</span><span class="operator">?</span>,</span><br><span class="line">                                <span class="params">change</span>: [<span class="params">NSKeyValueChangeKey</span> : <span class="keyword">Any</span>]<span class="operator">?</span>,</span><br><span class="line">                                <span class="params">context</span>: <span class="type">UnsafeMutableRawPointer</span>?) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;observeValue&quot;</span>, change<span class="operator">?</span>[.newKey] <span class="keyword">as</span> <span class="keyword">Any</span>) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> age: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> observer: <span class="type">Observer</span> <span class="operator">=</span> <span class="type">Observer</span>()</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.addObserver(observer,</span><br><span class="line">                        forKeyPath: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">                        options: .new,</span><br><span class="line">                        context: <span class="literal">nil</span>) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.removeObserver(observer,</span><br><span class="line">                            forKeyPath: <span class="string">&quot;age&quot;</span>) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line"><span class="comment">// observeValue Optional(20)</span></span><br><span class="line">p.age <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="comment">// observeValue Optional(25)</span></span><br><span class="line">p.setValue(<span class="number">25</span>, forKey: <span class="string">&quot;age&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="block方式的KVO"><a href="#block方式的KVO" class="headerlink" title="block方式的KVO"></a>block方式的KVO</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> age: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> observation: <span class="type">NSKeyValueObservation</span>?</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        observation <span class="operator">=</span> observe(\<span class="type">Person</span>.age, options: .new) &#123;</span><br><span class="line">            (person, change) <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(change.newValue <span class="keyword">as</span> <span class="keyword">Any</span>) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line"><span class="comment">// Optional(20)</span></span><br><span class="line">p.age <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="comment">// Optional(25)</span></span><br><span class="line">p.setValue(<span class="number">25</span>, forKey: <span class="string">&quot;age&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="关联对象（Associated-Object）"><a href="#关联对象（Associated-Object）" class="headerlink" title="关联对象（Associated Object）"></a>关联对象（Associated Object）</h2><ul><li>在Swift中，class依然可以使用关联对象<ul><li>默认情况，extension不可以增加存储属性</li><li>借助关联对象，可以实现类似extension为class增加存储属性的效果</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">AGE_KEY</span>: <span class="type">Void</span>?</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;(objc_getAssociatedObject(<span class="keyword">self</span>, <span class="operator">&amp;</span><span class="keyword">Self</span>.<span class="type">AGE_KEY</span>) <span class="keyword">as?</span> <span class="type">Int</span>) <span class="operator">??</span> <span class="number">0</span> &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, </span><br><span class="line">                                    <span class="operator">&amp;</span><span class="keyword">Self</span>.<span class="type">AGE_KEY</span>,</span><br><span class="line">                                    newValue,</span><br><span class="line">                                    .<span class="type">OBJC_ASSOCIATION_ASSIGN</span>) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line"><span class="built_in">print</span>(p.age) <span class="comment">// 0</span></span><br><span class="line">p.age <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(p.age) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="资源名管理"><a href="#资源名管理" class="headerlink" title="资源名管理"></a>资源名管理</h2><ul><li>参考Android的资源名管理方式</li></ul><blockquote><p>改善前</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;logo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> btn <span class="operator">=</span> <span class="type">UIButton</span>(type: .custom)</span><br><span class="line">btn.setTitle(<span class="string">&quot;添加&quot;</span>, for: .normal)</span><br><span class="line"></span><br><span class="line">performSegue(withIdentifier: <span class="string">&quot;login_main&quot;</span>, sender: <span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><blockquote><p>改善后</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举封装</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">string</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> add <span class="operator">=</span> <span class="string">&quot;添加&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">image</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> logo</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">segue</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> login_main</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UIImage</span> &#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init?</span>(<span class="keyword">_</span> <span class="params">name</span>: <span class="type">R</span>.image) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(named: name.rawValue) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UIButton</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">setTitle</span>(<span class="keyword">_</span> <span class="params">title</span>: <span class="type">R</span>.string, <span class="params">for</span> <span class="params">state</span>: <span class="type">UIControl</span>.<span class="type">State</span>) &#123;</span><br><span class="line">        setTitle(title.rawValue, for: state)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">performSegue</span>(<span class="params">withIdentifier</span> <span class="params">identifier</span>: <span class="type">R</span>.segue, <span class="params">sender</span>: <span class="keyword">Any</span><span class="operator">?</span>) &#123;</span><br><span class="line">        performSegue(withIdentifier: identifier.rawValue, sender: sender)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> <span class="type">UIImage</span>(<span class="type">R</span>.image.logo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> btn <span class="operator">=</span> <span class="type">UIButton</span>(type: .custom)</span><br><span class="line">btn.setTitle(<span class="type">R</span>.string.add, for: .normal)</span><br><span class="line"></span><br><span class="line">performSegue(withIdentifier: <span class="type">R</span>.segue.login_main, sender: <span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><h3 id="资源名管理的其他思路"><a href="#资源名管理的其他思路" class="headerlink" title="资源名管理的其他思路"></a>资源名管理的其他思路</h3><blockquote><p>优化前</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;logo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> font <span class="operator">=</span> <span class="type">UIFont</span>(name: <span class="string">&quot;Arial&quot;</span>, size: <span class="number">14</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化后</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举进行封装</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">image</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">var</span> logo <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;logo&quot;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">font</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">arial</span>(<span class="keyword">_</span> <span class="params">size</span>: <span class="type">CGFloat</span>) -&gt; <span class="type">UIFont</span>? &#123;</span><br><span class="line">            <span class="type">UIFont</span>(name: <span class="string">&quot;Arial&quot;</span>, size: size)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> <span class="type">R</span>.image.logo</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> font <span class="operator">=</span> <span class="type">R</span>.font.arial(<span class="number">14</span>)</span><br></pre></td></tr></table></figure><ul><li>更多优秀的思路参考<ul><li><a href="https://github.com/mac-cain13/R.swift">https://github.com/mac-cain13/R.swift</a></li><li><a href="https://github.com/SwiftGen/SwiftGen">https://github.com/SwiftGen/SwiftGen</a></li></ul></li></ul><h2 id="多线程开发-异步"><a href="#多线程开发-异步" class="headerlink" title="多线程开发 - 异步"></a>多线程开发 - 异步</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Task</span> <span class="operator">=</span> () -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Async</span> &#123;</span><br><span class="line">    <span class="comment">//子线程开辟任务</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">async</span>(<span class="keyword">_</span> <span class="params">task</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>) &#123;</span><br><span class="line">        _async(task)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//子线程任务完成之后，回到主线程执行任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">async</span>(<span class="keyword">_</span> <span class="params">task</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>, <span class="keyword">_</span> <span class="params">mainTask</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>) &#123;</span><br><span class="line">        _async(task, mainTask)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">_async</span>(<span class="keyword">_</span> <span class="params">task</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>, </span><br><span class="line">                                <span class="keyword">_</span> <span class="params">mainTask</span>: <span class="type">Task</span>? <span class="operator">=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> item <span class="operator">=</span> <span class="type">DispatchWorkItem</span>(block: task)</span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async(execute: item)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> main <span class="operator">=</span> mainTask &#123;</span><br><span class="line">            item.notify(queue: <span class="type">DispatchQueue</span>.main, execute: main)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程开发-异步延迟"><a href="#多线程开发-异步延迟" class="headerlink" title="多线程开发 - 异步延迟"></a>多线程开发 - 异步延迟</h3><blockquote><p>一般用法</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@discardableResult</span> <span class="comment">//忽略返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">delay</span>(<span class="keyword">_</span> <span class="params">seconds</span>: <span class="type">Double</span>, <span class="keyword">_</span> <span class="params">block</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>) -&gt; <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> item <span class="operator">=</span> <span class="type">DispatchWorkItem</span>(block: block)</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() <span class="operator">+</span> seconds,</span><br><span class="line">                                execute: item)</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>封装使用</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@discardableResult</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">asyncDelay</span>(<span class="keyword">_</span> <span class="params">seconds</span>: <span class="type">Double</span>, <span class="keyword">_</span> <span class="params">task</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>) -&gt; <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _asyncDelay(seconds, task)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@discardableResult</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">asyncDelay</span>(<span class="keyword">_</span> <span class="params">seconds</span>: <span class="type">Double</span>, <span class="keyword">_</span> <span class="params">task</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>, <span class="keyword">_</span> <span class="params">mainTask</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>) -&gt; <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _asyncDelay(seconds, task, mainTask)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">_asyncDelay</span>(<span class="keyword">_</span> <span class="params">seconds</span>: <span class="type">Double</span>,  </span><br><span class="line">                                <span class="keyword">_</span> <span class="params">task</span>: <span class="keyword">@escaping</span> <span class="type">Task</span>, </span><br><span class="line">                                <span class="keyword">_</span> <span class="params">mainTask</span>: <span class="type">Task</span>? <span class="operator">=</span> <span class="literal">nil</span>) -&gt; <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> item <span class="operator">=</span> <span class="type">DispatchWorkItem</span>(block: task)</span><br><span class="line">    <span class="type">DispatchQueue</span>.global().asyncAfter(deadline: <span class="type">DispatchTime</span>.now() <span class="operator">+</span> seconds,</span><br><span class="line">                                    execute: item)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> main <span class="operator">=</span> mainTask &#123;</span><br><span class="line">        item.notify(queue: <span class="type">DispatchQueue</span>.main, execute: main)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程开发-once"><a href="#多线程开发-once" class="headerlink" title="多线程开发 - once"></a>多线程开发 - once</h3><ul><li>dispatch_once在Swift中已被废弃，取而代之 <ul><li>以用类型属性或者全局变量\常量</li><li>默认自带 lazy + dispatch_once 效果<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">let</span> initTask2: <span class="type">Void</span> <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;initTask2---------&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> initTask1: <span class="type">Void</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;initTask1---------&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="keyword">Self</span>.initTask1</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> initTask2</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="多线程开发-加锁"><a href="#多线程开发-加锁" class="headerlink" title="多线程开发 - 加锁"></a>多线程开发 - 加锁</h3><ul><li>gcd信号量<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> data <span class="operator">=</span> [<span class="type">String</span>: <span class="keyword">Any</span>]()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> lock <span class="operator">=</span> <span class="type">DispatchSemaphore</span>(value: <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">set</span>(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">value</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line">        lock.wait()</span><br><span class="line">        <span class="keyword">defer</span> &#123; lock.signal() &#125;</span><br><span class="line">        data[key] <span class="operator">=</span> value</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Foundation<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常加锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> lock <span class="operator">=</span> <span class="type">NSLock</span>()</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">set</span>(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">value</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line">        lock.lock()</span><br><span class="line">        <span class="keyword">defer</span> &#123; lock.unlock() &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> lock <span class="operator">=</span> <span class="type">NSRecursiveLock</span>()</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">set</span>(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>, <span class="keyword">_</span> <span class="params">value</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line">        lock.lock()</span><br><span class="line">        <span class="keyword">defer</span> &#123; lock.unlock() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;KVC-x2F-KVO&quot;&gt;&lt;a href=&quot;#KVC-x2F-KVO&quot; class=&quot;headerlink&quot; title=&quot;KVC&amp;#x2F;KVO&quot;&gt;&lt;/a&gt;KVC&amp;#x2F;KVO&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Swift 支持KVC&amp;#x2F;KVO的条件&lt;ul</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift-从OC到Swift 一</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-%E4%BB%8EOC%E5%88%B0Swift-%E4%B8%80/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-%E4%BB%8EOC%E5%88%B0Swift-%E4%B8%80/</id>
    <published>2022-09-19T03:04:58.000Z</published>
    <updated>2022-09-27T07:34:56.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MARK-TODO-FIXME"><a href="#MARK-TODO-FIXME" class="headerlink" title="MARK, TODO, FIXME"></a>MARK, TODO, FIXME</h2><ul><li>&#x2F;&#x2F;MARK: 类似于OC中的 #pragma mark</li><li>&#x2F;&#x2F;MARK: - 类似于OC中的 #pragma mark - </li><li>&#x2F;&#x2F;TODO:用于标记未完成的任务</li><li>&#x2F;&#x2F;FIXME:用于标记待修复的问题</li></ul><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 操作系统：macOS\iOS\tvOS\watchOS\Linux\Android\Windows\FreeBSD</span></span><br><span class="line"><span class="keyword">#if</span> os(macOS) <span class="operator">||</span> os(iOS)</span><br><span class="line"><span class="comment">// CPU架构：i386\x86_64\arm\arm64</span></span><br><span class="line"><span class="keyword">#elseif</span> arch(x86_64) <span class="operator">||</span> arch(arm64)</span><br><span class="line"><span class="comment">// swift版本</span></span><br><span class="line"><span class="keyword">#elseif</span> swift(<span class="operator">&lt;</span><span class="number">5</span>) <span class="operator">&amp;&amp;</span> swift(<span class="operator">&gt;=</span><span class="number">3</span>)</span><br><span class="line"><span class="comment">// 模拟器</span></span><br><span class="line"><span class="keyword">#elseif</span> targetEnvironment(simulator)</span><br><span class="line"><span class="comment">// 可以导入某模块</span></span><br><span class="line"><span class="keyword">#elseif</span> canImport(<span class="type">Foundation</span>)</span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// debug模式</span></span><br><span class="line"><span class="keyword">#if</span> <span class="type">DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// release模式</span></span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义</span></span><br><span class="line"><span class="keyword">#if</span> <span class="type">TEST</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line"><span class="keyword">#if</span> <span class="type">OTHER</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;other&quot;</span>)</span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义Log输出格式</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">log</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">msg</span>: <span class="type">T</span>,</span><br><span class="line">    <span class="params">file</span>: <span class="type">NSString</span> <span class="operator">=</span> <span class="keyword">#file</span>,</span><br><span class="line">    <span class="params">line</span>: <span class="type">Int</span> <span class="operator">=</span> <span class="keyword">#line</span>,</span><br><span class="line">    <span class="params">fn</span>: <span class="type">String</span> <span class="operator">=</span> <span class="keyword">#function</span>) &#123;</span><br><span class="line">        <span class="keyword">#if</span> <span class="type">DEBUG</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">prefix</span> <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(file.lastPathComponent)</span>_<span class="subst">\(line)</span>_<span class="subst">\(fn)</span>:&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="keyword">prefix</span>, msg)</span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统版本检测"><a href="#系统版本检测" class="headerlink" title="系统版本检测"></a>系统版本检测</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于iOS平台，只在iOS10及以上版本执行</span></span><br><span class="line"><span class="comment">// 对于macOS平台，只在macOS 10.12及以上版本执行</span></span><br><span class="line"><span class="comment">// 最后的*表示在其他所有平台都执行</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">10</span>, <span class="keyword">macOS</span> <span class="number">10.12</span>, <span class="operator">*</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API可用性说明"><a href="#API可用性说明" class="headerlink" title="API可用性说明"></a>API可用性说明</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">10</span>, <span class="keyword">macOS</span> <span class="number">10.15</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">@available</span>(<span class="operator">*</span>, unavailable, renamed: <span class="string">&quot;study&quot;</span>)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">study_</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">study</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span>, deprecated: <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">macOS</span>, deprecated: <span class="number">10.12</span>)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iOS程序的入口"><a href="#iOS程序的入口" class="headerlink" title="iOS程序的入口"></a>iOS程序的入口</h2><ul><li>在AppDelegate上面默认有个@UIApplicationMain标记，这表示<ul><li>编译器自动生成入口代码（main函数代码），自动设置AppDelegate为APP的代理</li></ul></li><li>也可以删掉@UIApplicationMain，自定义入口代码：新建一个main.swift文件</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyApplication</span>: <span class="title class_">UIApplication</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">UIApplicationMain</span>(<span class="type">CommandLine</span>.argc,</span><br><span class="line">                  <span class="type">CommandLine</span>.unsafeArgv,</span><br><span class="line">                  <span class="type">NSStringFromClass</span>(<span class="type">MyApplication</span>.<span class="keyword">self</span>),</span><br><span class="line">                  <span class="type">NSStringFromClass</span>(<span class="type">AppDelegate</span>.<span class="keyword">self</span>))</span><br></pre></td></tr></table></figure><h2 id="Swift调用OC"><a href="#Swift调用OC" class="headerlink" title="Swift调用OC"></a>Swift调用OC</h2><ul><li>新建1个桥接头文件，文件名格式默认为：**{targetName}-Bridging-Header.h**</li><li>在  <code>&#123;targetName&#125;-Bridging-Header.h </code> 文件中 #import OC需要暴露给Swift的内容<ul><li>TARGETS -&gt; Build Settings -&gt; briding</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &quot;***.h&quot;</span><br><span class="line">#<span class="keyword">import</span> &quot;***.h&quot;</span><br><span class="line">#<span class="keyword">import</span> &quot;***.h&quot;</span><br><span class="line"><span class="operator">...</span></span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.h文件</span></span><br><span class="line">int sum(int a, int b);</span><br><span class="line"></span><br><span class="line"><span class="meta">@interface</span> <span class="type">Person</span> : <span class="type">NSObject</span></span><br><span class="line"><span class="meta">@property</span> (nonatomic, assign) <span class="type">NSInteger</span> age;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, copy) <span class="type">NSString</span> <span class="operator">*</span>name;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> (instancetype)initWithAge:(<span class="type">NSInteger</span>)age name:(<span class="type">NSString</span> <span class="operator">*</span>)name;</span><br><span class="line"><span class="operator">+</span> (instancetype)personWithAge:(<span class="type">NSInteger</span>)age name:(<span class="type">NSString</span> <span class="operator">*</span>)name;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> (void)run;</span><br><span class="line"><span class="operator">+</span> (void)run;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> (void)eat:(<span class="type">NSString</span> <span class="operator">*</span>)food other:(<span class="type">NSString</span> <span class="operator">*</span>)other;</span><br><span class="line"><span class="operator">+</span> (void)eat:(<span class="type">NSString</span> <span class="operator">*</span>)food other:(<span class="type">NSString</span> <span class="operator">*</span>)other;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person.m文件</span></span><br><span class="line">#<span class="keyword">import</span> Person.h</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"><span class="meta">@implementation</span> <span class="type">Person</span></span><br><span class="line"><span class="operator">-</span> (instancetype)initWithAge:(<span class="type">NSInteger</span>)age name:(<span class="type">NSString</span> <span class="operator">*</span>)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> <span class="operator">=</span> [<span class="keyword">super</span> <span class="keyword">init</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age <span class="operator">=</span> age;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span> (instancetype)personWithAge:(<span class="type">NSInteger</span>)age name:(<span class="type">NSString</span> <span class="operator">*</span>)name &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithAge:age name:name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span> (void)run &#123; <span class="type">NSLog</span>(@<span class="string">&quot;Person +run&quot;</span>); &#125; </span><br><span class="line"><span class="operator">-</span> (void)run &#123; <span class="type">NSLog</span>(@<span class="string">&quot;%zd %@ -run&quot;</span>, _age, _name); &#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span> (void)eat:(<span class="type">NSString</span> <span class="operator">*</span>)food other:(<span class="type">NSString</span> <span class="operator">*</span>)other &#123; <span class="type">NSLog</span>(@<span class="string">&quot;Person +eat %@ %@&quot;</span>, food, other); &#125; </span><br><span class="line"><span class="operator">-</span> (void)eat:(<span class="type">NSString</span> <span class="operator">*</span>)food other:(<span class="type">NSString</span> <span class="operator">*</span>)other &#123; <span class="type">NSLog</span>(@<span class="string">&quot;%zd %@ -eat %@ %@&quot;</span>, _age, _name, food, other); &#125;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line">int sum(int a, int b) &#123; <span class="keyword">return</span> a <span class="operator">+</span> b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Swift文件中使用Person类</span></span><br><span class="line"><span class="keyword">var</span> p <span class="operator">=</span> <span class="type">Person</span>(age: <span class="number">10</span>, name: <span class="string">&quot;Jack&quot;</span>) p.age <span class="operator">=</span> <span class="number">18</span></span><br><span class="line">p.name <span class="operator">=</span> <span class="string">&quot;Rose&quot;</span></span><br><span class="line">p.run() <span class="comment">// 18 Rose -run</span></span><br><span class="line">p.eat(<span class="string">&quot;Apple&quot;</span>, other: <span class="string">&quot;Water&quot;</span>) <span class="comment">// 18 Rose -eat Apple Water</span></span><br><span class="line"></span><br><span class="line"><span class="type">Person</span>.run() <span class="comment">// Person +run</span></span><br><span class="line"><span class="type">Person</span>.eat(<span class="string">&quot;Pizza&quot;</span>, other: <span class="string">&quot;Banana&quot;</span>) <span class="comment">// Person +eat Pizza Banana</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><h2 id="Swift调用OC-–-silgen-name"><a href="#Swift调用OC-–-silgen-name" class="headerlink" title="Swift调用OC – @_silgen_name"></a>Swift调用OC – @_silgen_name</h2><ul><li>如果C语言暴露给Swift的函数名跟Swift中的其他函数名冲突了<ul><li>可以在Swift中使用 @_silgen_name 修改C函数名</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言</span></span><br><span class="line">int sum(int a, int b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Swift</span></span><br><span class="line"><span class="meta">@_silgen_name</span>(<span class="string">&quot;sum&quot;</span>) <span class="keyword">func</span> <span class="title function_">swift_sum</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Int32</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Int32</span>) -&gt; <span class="type">Int32</span></span><br><span class="line"><span class="built_in">print</span>(swift_sum(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><h2 id="OC调用Swift"><a href="#OC调用Swift" class="headerlink" title="OC调用Swift"></a>OC调用Swift</h2><ul><li><p>Xcode已经默认生成一个用于OC调用Swift的头文件，文件名格式是：   <code>&#123;targetName&#125;-Swift.h </code></p><ul><li>TARGETS -&gt; Build Settings -&gt; generated interface</li></ul></li><li><p>Swift暴露给OC的类最终继承自NSObject</p></li><li><p>使用  <code>@objc </code> 修饰需要暴露给OC的成员</p></li><li><p>使用  <code>@objcMembers </code> 修饰类</p><ul><li>代表默认所有成员都会暴露给OC（包括扩展中定义的成员）</li><li>最终是否成功暴露，还需要考虑成员自身的访问级别</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span>Members <span class="keyword">class</span> <span class="title class_">Car</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> band: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">price</span>: <span class="type">Double</span>, <span class="params">band</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.price <span class="operator">=</span> price</span><br><span class="line">        <span class="keyword">self</span>.band <span class="operator">=</span> band</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123; <span class="built_in">print</span>(price, band, <span class="string">&quot;run&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">run</span>() &#123; <span class="built_in">print</span>(<span class="string">&quot;Car run&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">test</span>() &#123; <span class="built_in">print</span>(price, band, <span class="string">&quot;test&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应转化生成的OC代码如下：</span></span><br><span class="line"><span class="meta">@interface</span> <span class="type">Car</span> : <span class="type">NSObject</span></span><br><span class="line"><span class="meta">@property</span> (nonatomic) double price;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, copy) <span class="type">NSString</span> <span class="operator">*</span> _Nonnull band;</span><br><span class="line"><span class="operator">-</span> (nonnull instancetype)initWithPrice:(double)price band:(<span class="type">NSString</span> <span class="operator">*</span> _Nonnull)band <span class="type">OBJC_DESIGNATED_INITIALIZER</span>; <span class="operator">-</span> (void)run;</span><br><span class="line"><span class="operator">+</span> (void)run;</span><br><span class="line"><span class="operator">-</span> (nonnull instancetype)<span class="keyword">init</span> <span class="type">SWIFT_UNAVAILABLE</span>;</span><br><span class="line"><span class="operator">+</span> (nonnull instancetype)new <span class="type">SWIFT_UNAVAILABLE_MSG</span>(<span class="string">&quot;-init is unavailable&quot;</span>);</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"><span class="comment">//扩展</span></span><br><span class="line"><span class="meta">@interface</span> <span class="type">Car</span> (<span class="type">SWIFT_EXTENSION</span>(_Swift))</span><br><span class="line"><span class="operator">-</span> (void)test;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>OC调用Swift，OC文件中的代码示例：</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &quot;_Swift-Swift.h&quot;</span><br><span class="line">int sum(int a, int b) &#123;</span><br><span class="line">    <span class="type">Car</span> <span class="operator">*</span>c <span class="operator">=</span> [[<span class="type">Car</span> alloc] initWithPrice:<span class="number">10.5</span> band:@<span class="string">&quot;BMW&quot;</span>];</span><br><span class="line">    c.band <span class="operator">=</span> @<span class="string">&quot;Bently&quot;</span>;</span><br><span class="line">    c.price <span class="operator">=</span> <span class="number">108.5</span>;</span><br><span class="line">    [c run]; <span class="comment">// 108.5 Bently run</span></span><br><span class="line">    [c test]; <span class="comment">// 108.5 Bently test</span></span><br><span class="line">    [<span class="type">Car</span> run]; <span class="comment">// Car run</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OC调用Swift-–-objc"><a href="#OC调用Swift-–-objc" class="headerlink" title="OC调用Swift –  @objc "></a>OC调用Swift –  <code>@objc </code></h2><ul><li>可以通过  <code>@objc </code> 重命名Swift暴露给OC的符号名（类名、属性名、函数名等）<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc(MyCar)</span></span><br><span class="line"><span class="keyword">@objc</span>Members <span class="keyword">class</span> <span class="title class_">Car</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">@objc(name)</span></span><br><span class="line">    <span class="keyword">var</span> band: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">price</span>: <span class="type">Double</span>, <span class="params">band</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.price <span class="operator">=</span> price</span><br><span class="line">        <span class="keyword">self</span>.band <span class="operator">=</span> band</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@objc(drive)</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123; <span class="built_in">print</span>(price, band, <span class="string">&quot;run&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">run</span>() &#123; <span class="built_in">print</span>(<span class="string">&quot;Car run&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">@objc</span>(exec:v2:)</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">test</span>() &#123; <span class="built_in">print</span>(price, band, <span class="string">&quot;test&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">MyCar</span> <span class="operator">*</span>c <span class="operator">=</span> [[<span class="type">MyCar</span> alloc] initWithPrice:<span class="number">10.5</span> band:@<span class="string">&quot;BMW&quot;</span>];</span><br><span class="line">c.name <span class="operator">=</span> @<span class="string">&quot;Bently&quot;</span>;</span><br><span class="line">c.price <span class="operator">=</span> <span class="number">108.5</span>;</span><br><span class="line">[c drive]; <span class="comment">// 108.5 Bently run</span></span><br><span class="line">[c exec:<span class="number">10</span> v2:<span class="number">20</span>]; <span class="comment">// 108.5 Bently test</span></span><br><span class="line">[<span class="type">MyCar</span> run]; <span class="comment">// Car run</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="选择器（Selector）"><a href="#选择器（Selector）" class="headerlink" title="选择器（Selector）"></a>选择器（Selector）</h2><ul><li>Swift中依然可以使用选择器，使用  <code>#selector(name) </code> 定义一个选择器</li><li>必须是被  <code>@objcMembers </code> 或  <code>@objc </code> 修饰的方法才可以定义选择器<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span>Members <span class="keyword">class</span> <span class="title class_">Person</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">test1</span>(<span class="params">v1</span>: <span class="type">Int</span>) &#123; <span class="built_in">print</span>(<span class="string">&quot;test1&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">test2</span>(<span class="params">v1</span>: <span class="type">Int</span>, <span class="params">v2</span>: <span class="type">Int</span>) &#123; <span class="built_in">print</span>(<span class="string">&quot;test2(v1:v2:)&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">test2</span>(<span class="keyword">_</span> <span class="params">v1</span>: <span class="type">Double</span>, <span class="keyword">_</span> <span class="params">v2</span>: <span class="type">Double</span>) &#123; <span class="built_in">print</span>(<span class="string">&quot;test2(_:_:)&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        perform(<span class="keyword">#selector</span>(test1))</span><br><span class="line">        perform(<span class="keyword">#selector</span>(test1(v1:)))</span><br><span class="line">        perform(<span class="keyword">#selector</span>(test2(v1:v2:)))</span><br><span class="line">        perform(<span class="keyword">#selector</span>(test2(<span class="keyword">_</span>:<span class="keyword">_</span>:)))</span><br><span class="line">        perform(<span class="keyword">#selector</span>(test2 <span class="keyword">as</span> (<span class="type">Double</span>, <span class="type">Double</span>) -&gt; <span class="type">Void</span>))</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="只能被Class继承的协议"><a href="#只能被Class继承的协议" class="headerlink" title="只能被Class继承的协议"></a>只能被Class继承的协议</h2><ul><li>@objc 修饰的协议，还可以暴露给OC去遵守实现<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Runnable1</span>: <span class="title class_">AnyObject</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">Runnable2</span>: <span class="title class_">class</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">protocol</span> <span class="title class_">Runnable3</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="可选协议"><a href="#可选协议" class="headerlink" title="可选协议"></a>可选协议</h2><ul><li>可以通过 @objc 定义可选协议，这种协议只能被 class 遵守<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">protocol</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run1</span>()</span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">optional</span> <span class="keyword">func</span> <span class="title function_">run2</span>()</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run3</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run3</span>() &#123; <span class="built_in">print</span>(<span class="string">&quot;Dog run3&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run1</span>() &#123; <span class="built_in">print</span>(<span class="string">&quot;Dog run1&quot;</span>) &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d <span class="operator">=</span> <span class="type">Dog</span>()</span><br><span class="line">d.run1() <span class="comment">// Dog run1</span></span><br><span class="line">d.run3() <span class="comment">// Dog run3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h2><ul><li>被 @objc dynamic 修饰的内容会具有动态性，比如调用方法会走 runtime 那一套流程<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">func</span> <span class="title function_">test1</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test2</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d <span class="operator">=</span> <span class="type">Dog</span>()</span><br><span class="line">d.test1()</span><br><span class="line">d.test2()</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MARK-TODO-FIXME&quot;&gt;&lt;a href=&quot;#MARK-TODO-FIXME&quot; class=&quot;headerlink&quot; title=&quot;MARK, TODO, FIXME&quot;&gt;&lt;/a&gt;MARK, TODO, FIXME&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&amp;#x2F;&amp;#</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift-Array的常见操作</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-Array%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-Array%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</id>
    <published>2022-09-19T03:04:36.000Z</published>
    <updated>2022-09-27T07:33:51.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="map-filter-reduce-flatMap-compactMap"><a href="#map-filter-reduce-flatMap-compactMap" class="headerlink" title="map, filter, reduce, flatMap, compactMap"></a>map, filter, reduce, flatMap, compactMap</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"><span class="keyword">var</span> arr2 <span class="operator">=</span> arr.map &#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2, 4]</span></span><br><span class="line"><span class="keyword">var</span> arr3 <span class="operator">=</span> arr.filter &#123; <span class="variable">$0</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> arr4 <span class="operator">=</span> arr.reduce(<span class="number">0</span>) &#123; <span class="variable">$0</span> <span class="operator">+</span> <span class="variable">$1</span> &#125;</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> arr5 <span class="operator">=</span> arr.reduce(<span class="number">0</span>, <span class="operator">+</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">double</span>(<span class="keyword">_</span> <span class="params">i</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; i <span class="operator">*</span> <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">var</span> arr <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"><span class="built_in">print</span>(arr.map(double))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// [[1], [2, 2], [3, 3, 3]]</span></span><br><span class="line"><span class="keyword">var</span> arr2 <span class="operator">=</span> arr.map &#123; <span class="type">Array</span>.<span class="keyword">init</span>(repeating: <span class="variable">$0</span>, count: <span class="variable">$0</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 2, 3, 3, 3]</span></span><br><span class="line"><span class="keyword">var</span> arr3 <span class="operator">=</span> arr.flatMap &#123; <span class="type">Array</span>.<span class="keyword">init</span>(repeating: <span class="variable">$0</span>, count: <span class="variable">$0</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr <span class="operator">=</span> [<span class="string">&quot;123&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;-30&quot;</span>]</span><br><span class="line"><span class="comment">// [Optional(123), nil, nil, Optional(-30)]</span></span><br><span class="line"><span class="keyword">var</span> arr2 <span class="operator">=</span> arr.map &#123; <span class="type">Int</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line"><span class="comment">// [123, -30]</span></span><br><span class="line"><span class="keyword">var</span> arr3 <span class="operator">=</span> arr.compactMap &#123; <span class="type">Int</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用reduce实现map、filter的功能</span></span><br><span class="line"><span class="keyword">var</span> arr <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"><span class="built_in">print</span>(arr.map &#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span> &#125;)</span><br><span class="line"><span class="built_in">print</span>(arr.reduce([]) &#123; <span class="variable">$0</span> <span class="operator">+</span> [<span class="variable">$1</span> <span class="operator">*</span> <span class="number">2</span>] &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2, 4]</span></span><br><span class="line"><span class="built_in">print</span>(arr.filter &#123; <span class="variable">$0</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#125;)</span><br><span class="line"><span class="built_in">print</span>(arr.reduce([]) &#123; <span class="variable">$1</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> <span class="operator">?</span> <span class="variable">$0</span> <span class="operator">+</span> [<span class="variable">$1</span>] : <span class="variable">$0</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="lazy的优化"><a href="#lazy的优化" class="headerlink" title="lazy的优化"></a>lazy的优化</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> arr.lazy.map &#123;</span><br><span class="line">    (i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;mapping <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> i <span class="operator">*</span> <span class="number">2</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;begin-----&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mapped&quot;</span>, result[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mapped&quot;</span>, result[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mapped&quot;</span>, result[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end----&quot;</span>)</span><br><span class="line"></span><br><span class="line">begin<span class="operator">-----</span></span><br><span class="line">mapping <span class="number">1</span></span><br><span class="line">mapped <span class="number">2</span></span><br><span class="line">mapping <span class="number">2</span></span><br><span class="line">mapped <span class="number">4</span></span><br><span class="line">mapping <span class="number">3</span></span><br><span class="line">mapped <span class="number">6</span></span><br><span class="line">end<span class="operator">----</span></span><br></pre></td></tr></table></figure><h2 id="Optional的map和flatMap"><a href="#Optional的map和flatMap" class="headerlink" title="Optional的map和flatMap"></a>Optional的map和flatMap</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="comment">// Optional(20)</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="operator">=</span> num1.map &#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">var</span> num3: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="comment">// nil</span></span><br><span class="line"><span class="keyword">var</span> num4 <span class="operator">=</span> num3.map &#123; <span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="comment">// Optional(Optional(20))</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="operator">=</span> num1.map &#123; <span class="type">Optional</span>.some(<span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span>) &#125;</span><br><span class="line"><span class="comment">// Optional(20)</span></span><br><span class="line"><span class="keyword">var</span> num3 <span class="operator">=</span> num1.flatMap &#123; <span class="type">Optional</span>.some(<span class="variable">$0</span> <span class="operator">*</span> <span class="number">2</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="comment">// num2、num3是等价的</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="operator">=</span> (num1 <span class="operator">!=</span> <span class="literal">nil</span>) <span class="operator">?</span> (num1<span class="operator">!</span> <span class="operator">+</span> <span class="number">10</span>) : <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> num3 <span class="operator">=</span> num1.map &#123; <span class="variable">$0</span> <span class="operator">+</span> <span class="number">10</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fmt <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">fmt.dateFormat <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span></span><br><span class="line"><span class="keyword">var</span> str: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;2011-09-10&quot;</span></span><br><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">var</span> date1 <span class="operator">=</span> str <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">?</span> fmt.date(from: str<span class="operator">!</span>) : <span class="literal">nil</span></span><br><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">var</span> date2 <span class="operator">=</span> str.flatMap(fmt.date)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> score: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">98</span></span><br><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">var</span> str1 <span class="operator">=</span> score <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">?</span> <span class="string">&quot;socre is <span class="subst">\(score<span class="operator">!</span>)</span>&quot;</span> : <span class="string">&quot;No score&quot;</span></span><br><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">var</span> str2 <span class="operator">=</span> score.map &#123; <span class="string">&quot;score is <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span> &#125; <span class="operator">??</span> <span class="string">&quot;No score&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>示例1</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> items <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Person</span>(name: <span class="string">&quot;jack&quot;</span>, age: <span class="number">20</span>),</span><br><span class="line">    <span class="type">Person</span>(name: <span class="string">&quot;rose&quot;</span>, age: <span class="number">21</span>),</span><br><span class="line">    <span class="type">Person</span>(name: <span class="string">&quot;kate&quot;</span>, age: <span class="number">22</span>) </span><br><span class="line">]</span><br><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getPerson1</span>(<span class="keyword">_</span> <span class="params">name</span>: <span class="type">String</span>) -&gt; <span class="type">Person</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> index <span class="operator">=</span> items.firstIndex &#123; <span class="variable">$0</span>.name <span class="operator">==</span> name &#125;</span><br><span class="line">    <span class="keyword">return</span> index <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">?</span> items[index<span class="operator">!</span>] : <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getPerson2</span>(<span class="keyword">_</span> <span class="params">name</span>: <span class="type">String</span>) -&gt; <span class="type">Person</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> items.firstIndex &#123; <span class="variable">$0</span>.name <span class="operator">==</span> name &#125;.map &#123; items[<span class="variable">$0</span>] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例2</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init?</span>(<span class="keyword">_</span> <span class="params">json</span>: [<span class="params">String</span> : <span class="keyword">Any</span>]) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> name <span class="operator">=</span> json[<span class="string">&quot;name&quot;</span>] <span class="keyword">as?</span> <span class="type">String</span>,</span><br><span class="line">        <span class="keyword">let</span> age <span class="operator">=</span> json[<span class="string">&quot;age&quot;</span>] <span class="keyword">as?</span> <span class="type">Int</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    <span class="keyword">self</span>.age <span class="operator">=</span> age</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json: <span class="type">Dictionary</span>? <span class="operator">=</span> [<span class="string">&quot;name&quot;</span> : <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="number">10</span>]</span><br><span class="line"><span class="comment">// old</span></span><br><span class="line"><span class="keyword">var</span> p1 <span class="operator">=</span> json <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">?</span> <span class="type">Person</span>(json<span class="operator">!</span>) : <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new</span></span><br><span class="line"><span class="keyword">var</span> p2 <span class="operator">=</span> json.flatMap(<span class="type">Person</span>.<span class="keyword">init</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;map-filter-reduce-flatMap-compactMap&quot;&gt;&lt;a href=&quot;#map-filter-reduce-flatMap-compactMap&quot; class=&quot;headerlink&quot; title=&quot;map, filter, reduce,</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift-String</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-String/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-String/</id>
    <published>2022-09-19T03:04:08.000Z</published>
    <updated>2022-09-27T07:36:33.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于String的思考"><a href="#关于String的思考" class="headerlink" title="关于String的思考"></a>关于String的思考</h2><ul><li>一个String变量战胜多少内存？</li><li>下面两个String变量，底层存储有什么不同？<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 <span class="operator">=</span> <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"><span class="keyword">var</span> str2 <span class="operator">=</span> <span class="string">&quot;0123456789ABCDEF&quot;</span></span><br></pre></td></tr></table></figure></li><li>如果对String进行拼接操作，String变量的存储会发生什么变化？<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str1.append(<span class="string">&quot;ABCDE&quot;</span>)</span><br><span class="line"></span><br><span class="line">str1.append(<span class="string">&quot;F&quot;</span>)</span><br><span class="line"></span><br><span class="line">str1.append(<span class="string">&quot;G&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>分析</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串长度 &lt;= 0xF(16位)，字符串内容直接存放在str1变量的内存中</span></span><br><span class="line"> <span class="keyword">var</span> str1 <span class="operator">=</span> <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 字符串长度 &gt; 0xF，字符串内容存放在__TEXT.cstring中（常量区）</span></span><br><span class="line"> <span class="comment">// 字符串的地址值信息存放在str2变量的后8个字节中</span></span><br><span class="line"> <span class="keyword">var</span> str2 <span class="operator">=</span> <span class="string">&quot;0123456789ABCDEF&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 由于字符串长度 &lt;= 0xF，所以字符串内容依然存放在str1变量的内存中</span></span><br><span class="line"> str1.append(<span class="string">&quot;ABCDE&quot;</span>)</span><br><span class="line"> <span class="comment">// 开辟堆空间</span></span><br><span class="line"> str1.append(<span class="string">&quot;F&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 开辟堆空间</span></span><br><span class="line"> str2.append(<span class="string">&quot;G&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="常规定义"><a href="#常规定义" class="headerlink" title="常规定义"></a>常规定义</h2><ul><li>Swift的字符串类型String，跟OC的NSString，在API设计上还是有较大差异<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空字符串</span></span><br><span class="line"><span class="keyword">var</span> emptyStr1 <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> emptyStr2 <span class="operator">=</span> <span class="type">String</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="comment">// 拼接，jack_rose</span></span><br><span class="line">str.append(<span class="string">&quot;_2&quot;</span>)</span><br><span class="line"><span class="comment">// 重载运算符 +</span></span><br><span class="line">str <span class="operator">=</span> str <span class="operator">+</span> <span class="string">&quot;_3&quot;</span></span><br><span class="line"><span class="comment">// 重载运算符 +=</span></span><br><span class="line">str <span class="operator">+=</span> <span class="string">&quot;_4&quot;</span></span><br><span class="line"><span class="comment">// \()插值</span></span><br><span class="line">str <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(str)</span>_5&quot;</span></span><br><span class="line"><span class="comment">// 长度，9，1_2_3_4_5</span></span><br><span class="line"><span class="built_in">print</span>(str.count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str.hasPrefix(<span class="string">&quot;123&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(str.hasSuffix(<span class="string">&quot;456&quot;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="String的插入和删除"><a href="#String的插入和删除" class="headerlink" title="String的插入和删除"></a>String的插入和删除</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;1_2&quot;</span></span><br><span class="line"><span class="comment">// 1_2_</span></span><br><span class="line">str.insert(<span class="string">&quot;_&quot;</span>, at: str.endIndex)</span><br><span class="line"><span class="comment">// 1_2_3_4</span></span><br><span class="line">str.insert(contentsOf: <span class="string">&quot;3_4&quot;</span>, at: str.endIndex)</span><br><span class="line"><span class="comment">// 1666_2_3_4</span></span><br><span class="line">str.insert(contentsOf: <span class="string">&quot;666&quot;</span>, at: str.index(after: str.startIndex))</span><br><span class="line"><span class="comment">// 1666_2_3_8884</span></span><br><span class="line">str.insert(contentsOf: <span class="string">&quot;888&quot;</span>, at: str.index(before: str.endIndex))</span><br><span class="line"><span class="comment">// 1666hello_2_3_8884</span></span><br><span class="line">str.insert(contentsOf: <span class="string">&quot;hello&quot;</span>, at: str.index(str.startIndex, offsetBy: <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 666hello_2_3_8884</span></span><br><span class="line">str.remove(at: str.firstIndex(of: <span class="string">&quot;1&quot;</span>)<span class="operator">!</span>)</span><br><span class="line"><span class="comment">// hello_2_3_8884</span></span><br><span class="line">str.removeAll &#123; <span class="variable">$0</span> <span class="operator">==</span> <span class="string">&quot;6&quot;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> range <span class="operator">=</span> str.index(str.endIndex, offsetBy: <span class="operator">-</span><span class="number">4</span>)<span class="operator">..&lt;</span>str.index(before: str.endIndex)</span><br><span class="line"><span class="comment">// hello_2_3_4</span></span><br><span class="line">str.removeSubrange(range)</span><br></pre></td></tr></table></figure><h3 id="SubSting"><a href="#SubSting" class="headerlink" title="SubSting"></a>SubSting</h3><ul><li>String可以通过下标、prefix、suffix等截取子串，子串类型不是String，而是Substring<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;1_2_3_4_5&quot;</span></span><br><span class="line"><span class="comment">// 1_2</span></span><br><span class="line"><span class="keyword">var</span> substr1 <span class="operator">=</span> str.prefix(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 4_5</span></span><br><span class="line"><span class="keyword">var</span> substr2 <span class="operator">=</span> str.suffix(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 1_2</span></span><br><span class="line"><span class="keyword">var</span> range <span class="operator">=</span> str.startIndex<span class="operator">..&lt;</span>str.index(str.startIndex, offsetBy: <span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> substr3 <span class="operator">=</span> str[range]</span><br><span class="line"><span class="comment">// 最初的String，1_2_3_4_5</span></span><br><span class="line"><span class="built_in">print</span>(substr3.base)</span><br><span class="line"><span class="comment">// Substring -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> str2 <span class="operator">=</span> <span class="type">String</span>(substr3)</span><br></pre></td></tr></table></figure></li><li>Substring和它的base，共享字符串数据</li><li>Substring发生修改 或者 转为String时，会分配新的内存存储字符串数据</li></ul><h3 id="String与Character"><a href="#String与Character" class="headerlink" title="String与Character"></a>String与Character</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;jack&quot;</span> &#123; <span class="comment">// c是Character类型</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="comment">// c是Character类型</span></span><br><span class="line"><span class="keyword">var</span> c <span class="operator">=</span> str[str.startIndex]</span><br></pre></td></tr></table></figure><h3 id="String相关的协议"><a href="#String相关的协议" class="headerlink" title="String相关的协议"></a>String相关的协议</h3><ul><li>BidirectionalCollection 协议包含的部分内容<ul><li>startIndex、endIndex 属性、index 方法</li><li>String、Array 都遵守了这个协议</li></ul></li><li>RangeReplaceableCollection 协议包含的部分内容<ul><li>append、insert、remove 方法</li><li>String、Array 都遵守了这个协议</li></ul></li><li>Dictionary、Set 也有实现上述协议中声明的一些方法，只是并没有遵守上述协议</li></ul><h3 id="多行String"><a href="#多行String" class="headerlink" title="多行String"></a>多行String</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">    &quot;2&quot;</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">    &#x27;4&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">//输出格式</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">    <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">    &#x27;<span class="number">4</span>&#x27;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要显示3引号，至少转义1个引号</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Escaping the first quote <span class="subst">\&quot;</span>&quot;&quot;</span></span><br><span class="line"><span class="string">Escaping two quotes <span class="subst">\&quot;</span><span class="subst">\&quot;</span>&quot;</span></span><br><span class="line"><span class="string">Escaping all three quotes <span class="subst">\&quot;</span><span class="subst">\&quot;</span><span class="subst">\&quot;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="type">Escaping</span> the first quote <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Escaping two quotes &quot;&quot;&quot;</span></span><br><span class="line"><span class="type">Escaping</span> all three quotes <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 缩进以结尾的3引号为对齐线</span></span><br><span class="line"><span class="string">let str = &quot;&quot;&quot;</span></span><br><span class="line">        <span class="number">1</span> </span><br><span class="line">            <span class="number">2</span> </span><br><span class="line">    <span class="number">3</span></span><br><span class="line">        <span class="number">4</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">//输出格式</span></span><br><span class="line"><span class="string">        1 </span></span><br><span class="line"><span class="string">            2</span></span><br><span class="line"><span class="string">    3 </span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 以下2个字符串是等价的</span></span><br><span class="line"><span class="string">let str1 = &quot;These are the same.&quot;</span></span><br><span class="line"><span class="string">let str2 = &quot;&quot;&quot;</span></span><br><span class="line"><span class="type">These</span> are the same.</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="String-与-NSString"><a href="#String-与-NSString" class="headerlink" title="String 与 NSString"></a>String 与 NSString</h3><ul><li>String 与 NSString 之间可以随时随地桥接转换</li><li>如果觉得String的API过于复杂难用，可以考虑将String转为NSString<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="keyword">var</span> str2: <span class="type">NSString</span> <span class="operator">=</span> <span class="string">&quot;rose&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 <span class="operator">=</span> str1 <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line"><span class="keyword">var</span> str4 <span class="operator">=</span> str2 <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ja</span></span><br><span class="line"><span class="keyword">var</span> str5 <span class="operator">=</span> str3.substring(with: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(str5) </span><br></pre></td></tr></table></figure></li><li>比较字符串内容是否等价 <ul><li>String使用 &#x3D;&#x3D; 运算符 </li><li>NSString使用isEqual方法，也可以使用 &#x3D;&#x3D; 运算符（本质还是调用了isEqual方法）</li></ul></li></ul><h2 id="Swift、OC桥接转换表"><a href="#Swift、OC桥接转换表" class="headerlink" title="Swift、OC桥接转换表"></a>Swift、OC桥接转换表</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="operator">⇌</span> <span class="type">NSString</span></span><br><span class="line"><span class="type">String</span> <span class="operator">←</span> <span class="type">NSMutableString</span></span><br><span class="line"><span class="type">Array</span> <span class="operator">⇌</span> <span class="type">NSArray</span></span><br><span class="line"><span class="type">Array</span> <span class="operator">←</span> <span class="type">NSMutableArray</span></span><br><span class="line"><span class="type">Dictionary</span> <span class="operator">⇌</span> <span class="type">NSDictionary</span></span><br><span class="line"><span class="type">Dictionary</span> <span class="operator">←</span> <span class="type">NSMutableDictionary</span></span><br><span class="line"><span class="type">Set</span> <span class="operator">⇌</span> <span class="type">NSSet</span></span><br><span class="line"><span class="type">Set</span> <span class="operator">←</span> <span class="type">NSMutableSet</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于String的思考&quot;&gt;&lt;a href=&quot;#关于String的思考&quot; class=&quot;headerlink&quot; title=&quot;关于String的思考&quot;&gt;&lt;/a&gt;关于String的思考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个String变量战胜多少内存？&lt;/li&gt;
&lt;li&gt;下</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift-内存管理</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2022-09-19T03:03:56.000Z</published>
    <updated>2022-09-27T07:34:06.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>跟OC一样，Swift也是采取基于引用计数的ARC内存管理方案（针对堆空间）</li><li>Swfit的ARC中有3各引用<ul><li>强引用（Strong reference）：默认情况下，引用都是强引用</li><li>弱引用（weak reference）：通过weak定义弱引用<ul><li>必须是可选类型的var，因为实例销毁后，ARC会自动将弱引用设置为Nil</li><li>ARC自动给弱引用设置nil时，不会触发属性观察器</li></ul></li><li>无主引用（unowned reference）：通过unowned定义无主引用<ul><li>不会产生强引用，实例销毁后仍然存储着实例的内存地址（类似于OC中的unsafe_unretained）</li><li>试图在实例销毁后访问无主引用，会产生运行时错误（野指针）</li><li><strong>Fatal error: Attempted to read an unowned reference but object 0x0 was already deallocated</strong></li></ul></li></ul></li></ul><h2 id="weak、unowned的使用限制"><a href="#weak、unowned的使用限制" class="headerlink" title="weak、unowned的使用限制"></a>weak、unowned的使用限制</h2><ul><li>weak、owned只能用在类实例上面<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Livable</span> : <span class="title class_">AnyObject</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">weak</span> <span class="keyword">var</span> p0: <span class="type">Person</span>?</span><br><span class="line"><span class="keyword">weak</span> <span class="keyword">var</span> p1: <span class="type">AnyObject</span>?</span><br><span class="line"><span class="keyword">weak</span> <span class="keyword">var</span> p2: <span class="type">Livable</span>?</span><br><span class="line"></span><br><span class="line"><span class="keyword">unowned</span> <span class="keyword">var</span> p10: <span class="type">Person</span>?</span><br><span class="line"><span class="keyword">unowned</span> <span class="keyword">var</span> p11: <span class="type">AnyObject</span>?</span><br><span class="line"><span class="keyword">unowned</span> <span class="keyword">var</span> p12: <span class="type">Livable</span>?</span><br></pre></td></tr></table></figure></li></ul><h2 id="Autoreleasepool"><a href="#Autoreleasepool" class="headerlink" title="Autoreleasepool"></a>Autoreleasepool</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">autoreleasepool</span>&lt;<span class="type">Result</span>&gt;(<span class="params">invoking</span> <span class="params">body</span>: () <span class="keyword">throws</span> -&gt; <span class="type">Result</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span></span><br><span class="line"></span><br><span class="line">autoreleasepool &#123;</span><br><span class="line">    <span class="keyword">let</span> p <span class="operator">=</span> <span class="type">MJPerson</span>(age: <span class="number">20</span>, name: <span class="string">&quot;Jack&quot;</span>)</span><br><span class="line">    p.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环引用（Reference-Cycle）"><a href="#循环引用（Reference-Cycle）" class="headerlink" title="循环引用（Reference Cycle）"></a>循环引用（Reference Cycle）</h2><ul><li>weak、unowned 都能解决循环引用的问题， <code>unowned </code> 要比  <code>weak </code> 少一些性能消耗</li><li>在生命周期中可能会变为 nil 的使用 weak</li><li>初始化赋值后再也不会变为 nil 的使用 unowned</li></ul><h2 id="闭包的循环引用"><a href="#闭包的循环引用" class="headerlink" title="闭包的循环引用"></a>闭包的循环引用</h2><ul><li><p>闭包表达式默认会用到的外层对象产生额外的强引用（对外层对象进行了retain操作）</p></li><li><p>正面代码会产生循环引用，导致Person对象无法释放（看不到Persion的deinit被调用）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> fn: (() -&gt; ())<span class="operator">?</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123; <span class="built_in">print</span>(<span class="string">&quot;run&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">&quot;deinit&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line">    p.fn <span class="operator">=</span> &#123; p.run() &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure></li><li><p>在闭包表达式的捕获列表声明weak或unowned引用，解决循环引用问题</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p.fn <span class="operator">=</span> &#123;</span><br><span class="line">    [<span class="keyword">weak</span> p] <span class="keyword">in</span></span><br><span class="line">    p<span class="operator">?</span>.run()<span class="comment">//用weak修饰时，要用p?，可选</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.fn <span class="operator">=</span> &#123;</span><br><span class="line">    [<span class="keyword">unowned</span> p] <span class="keyword">in</span></span><br><span class="line">    p.run()<span class="comment">//用unowned修饰是，用p， 非可选</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.fn <span class="operator">=</span> &#123;</span><br><span class="line">    [<span class="keyword">weak</span> wp <span class="operator">=</span> p, <span class="keyword">unowned</span> up <span class="operator">=</span> p, a <span class="operator">=</span> <span class="number">10</span> <span class="operator">+</span> <span class="number">20</span>] <span class="keyword">in</span></span><br><span class="line">    wp<span class="operator">?</span>.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果想在定义闭包属性的同时引用self，这个闭包必须是lazy的（因为在实例初始化完毕之后才能引用self）</p></li><li><p>下面闭包fn内部如果用到了实例成员（属性、方法），<strong>编译器会强制要求明确写出 <code>self </code></strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> fn: (() -&gt; ()) <span class="operator">=</span> &#123;</span><br><span class="line">        [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span><span class="operator">?</span>.run()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123; <span class="built_in">print</span>(<span class="string">&quot;run&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">&quot;deinit&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果lazy属性是闭包调用的结果，那么不用考虑循环引用的问题（因为闭包调用后，闭包的生命周期就结束了）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> getAge: <span class="type">Int</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">    &#125;()<span class="comment">//这个属性带有()执行方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">&quot;deinit&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="escaping"><a href="#escaping" class="headerlink" title="@escaping"></a>@escaping</h2><ul><li>非逃逸闭包、逃逸闭包，一般都是当做参数传递给函数</li><li><strong>非逃逸闭包</strong>：闭包调用发生在函数结束前，闭包调用在函数作用域内 </li><li><strong>逃逸闭包</strong>：闭包有可能在函数结束后调用，闭包调用逃离了函数的作用域，需要通过 <code>@escaping </code>声明<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dispatch</span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Fn</span> <span class="operator">=</span> () -&gt; ()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn是非逃逸闭包</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test1</span>(<span class="keyword">_</span> <span class="params">fn</span>: <span class="type">Fn</span>) &#123; fn() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn是逃逸闭包</span></span><br><span class="line"><span class="keyword">var</span> gFn: <span class="type">Fn</span>?</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test2</span>(<span class="keyword">_</span> <span class="params">fn</span>: <span class="keyword">@escaping</span> <span class="type">Fn</span>) &#123; gFn <span class="operator">=</span> fn &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn是逃逸闭包</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test3</span>(<span class="keyword">_</span> <span class="params">fn</span>: <span class="keyword">@escaping</span> <span class="type">Fn</span>) &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">        fn()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> fn: <span class="type">Fn</span></span><br><span class="line">    <span class="comment">// fn是逃逸闭包</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">fn</span>: <span class="keyword">@escaping</span> <span class="type">Fn</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.fn <span class="operator">=</span> fn</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="comment">// DispatchQueue.global().async也是一个逃逸闭包</span></span><br><span class="line">        <span class="comment">// 它用到了实例成员（属性、方法），编译器会强制要求明确写出self</span></span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">            <span class="keyword">self</span>.fn()</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>逃逸闭包的注意点：<br>逃逸闭包不可以捕获inout参数</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Fn</span> <span class="operator">=</span> () -&gt; ()</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">other1</span>(<span class="keyword">_</span> <span class="params">fn</span>: <span class="type">Fn</span>) &#123; fn() &#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">other2</span>(<span class="keyword">_</span> <span class="params">fn</span>: <span class="keyword">@escaping</span> <span class="type">Fn</span>) &#123; fn() &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>(<span class="params">value</span>: <span class="keyword">inout</span> <span class="type">Int</span>) -&gt; <span class="type">Fn</span> &#123;</span><br><span class="line">    other1 &#123; value <span class="operator">+=</span> <span class="number">1</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// error: 逃逸闭包不能捕获inout参数</span></span><br><span class="line">    <span class="comment">//other2 &#123; value += 1 &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">plus</span>() &#123; value <span class="operator">+=</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="comment">// error: 逃逸闭包不能捕获inout参数</span></span><br><span class="line">    <span class="keyword">return</span> plus</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;跟OC一样，Swift也是采取基于引用计数的ARC内存管理方案（针对堆空间）&lt;/li&gt;
&lt;li&gt;Swfit的ARC中有3各引用&lt;</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Swift-访问控制</title>
    <link href="http://www.hxtec.top/2022/09/19/Swift-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <id>http://www.hxtec.top/2022/09/19/Swift-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</id>
    <published>2022-09-19T03:03:43.000Z</published>
    <updated>2022-09-27T07:34:42.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义解释"><a href="#定义解释" class="headerlink" title="定义解释"></a>定义解释</h2><ul><li>在访问权限控制这块，Swift提供了5个不同的访问级别（以下是从高到低排列， 实体指被访问级别修饰的内容）<ul><li><code>open </code>：允许在定义实体的模块、其他模块中访问，允许其他模块进行继承、重写（open只能用在类、类成员上）</li><li><code>public </code>：允许在定义实体的模块、其他模块中访问，不允许其他模块进行继承、重写</li><li><code>internal </code>：只允许在定义实体的模块中访问，不允许在其他模块中访问</li><li><code>fileprivate </code>：只允许在定义实体的源文件中访问</li><li><code>private </code>：只允许在定义实体的封闭声明中访问</li></ul></li><li>绝大部分实体默认都是 internal 级别</li></ul><h2 id="访问级别的使用准则"><a href="#访问级别的使用准则" class="headerlink" title="访问级别的使用准则"></a>访问级别的使用准则</h2><ul><li>一个实体不可以被理低访问级别的实体定义，比如：<ul><li>变量\常量类型 ≥ 变量\常量</li><li>参数类型、返回值类型 ≥ 函数</li><li>父类 ≥ 子类</li><li>父协议 ≥ 子协议</li><li>原类型 ≥ typealias</li><li>原始值类型、关联值类型 ≥ 枚举类型</li><li>定义类型A时用到的其他类型 ≥ 类型A </li><li>……</li></ul></li></ul><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><ul><li>元组类型的访问级别是所有成员类型最低的那个<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">struct</span> <span class="title class_">Dog</span> &#123;&#125;</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (Dog, Person)的访问级别是fileprivate</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> data1: (<span class="type">Dog</span>, <span class="type">Person</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> data2: (<span class="type">Dog</span>, <span class="type">Person</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h2><ul><li>泛型类型的访问级别是  <code>类型的访问级别 </code> 以及  <code>所有泛型类型参数 </code>  的访问级别中最低的那个<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;&#125;</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&lt;<span class="title class_">T1</span>, <span class="title class_">T2</span>&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person&lt;Car, Dog&gt;的访问级别是fileprivate</span></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> p <span class="operator">=</span> <span class="type">Person</span>&lt;<span class="type">Car</span>, <span class="type">Dog</span>&gt;()</span><br></pre></td></tr></table></figure></li></ul><h2 id="成员、嵌套类型"><a href="#成员、嵌套类型" class="headerlink" title="成员、嵌套类型"></a>成员、嵌套类型</h2><ul><li>类型的访问级别会影响成员（属性、方法、初始化器、下标）、嵌套类型的默认访问级别<ul><li>一般情况下，类型为private或fileprivate，那么成员\嵌套类型默认也是private或fileprivate</li><li>一般情况下，类型为internal或public，那么成员\嵌套类型默认是internal</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> p1 <span class="operator">=</span> <span class="number">0</span> <span class="comment">// public</span></span><br><span class="line">    <span class="keyword">var</span> p2 <span class="operator">=</span> <span class="number">0</span> <span class="comment">// internal</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">func</span> <span class="title function_">f1</span>() &#123;&#125; <span class="comment">// fileprivate</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">f2</span>() &#123;&#125; <span class="comment">// private</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InternalClass</span> &#123; <span class="comment">// internal</span></span><br><span class="line">    <span class="keyword">var</span> p <span class="operator">=</span> <span class="number">0</span> <span class="comment">// internal</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">func</span> <span class="title function_">f1</span>() &#123;&#125; <span class="comment">// fileprivate</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">f2</span>() &#123;&#125; <span class="comment">// private</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">class</span> <span class="title class_">FilePrivateClass</span> &#123; <span class="comment">// fileprivate</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">f1</span>() &#123;&#125; <span class="comment">// fileprivate</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">f2</span>() &#123;&#125; <span class="comment">// private</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">PrivateClass</span> &#123; <span class="comment">// private</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">f</span>() &#123;&#125; <span class="comment">// private</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员的重写"><a href="#成员的重写" class="headerlink" title="成员的重写"></a>成员的重写</h2><ul><li>子类重写成员的访问级别必须 &gt;&#x3D; 子类的访问级别，或者 &gt;&#x3D; 父类被重写成员的访问级别</li><li>父类的成员不能被成员作用域外定义的子类重写<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> : <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123;&#125;</span><br><span class="line">            <span class="keyword">get</span> &#123;<span class="number">10</span>&#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>示例</p><ul><li>直接在全局作用域下定义的private等价于fileprivate</li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">class</span> <span class="title class_">Student</span> : <span class="title class_">Person</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果上面两句代码放在一个方法体中，就会报错</li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">class</span> <span class="title class_">Student</span> : <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter, setter"></a>getter, setter</h2><ul><li>getter, setter默认自动接收它们所属环境的访问级别</li><li>可以给setter单独设置一个比getter更低的访问级别，用以限制写的权限<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate(set)</span> <span class="keyword">public</span> <span class="keyword">var</span> num <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private(set)</span> <span class="keyword">var</span> age <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">fileprivate(set)</span> <span class="keyword">public</span> <span class="keyword">var</span> weight: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="number">10</span> &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal(set)</span> <span class="keyword">public</span> <span class="keyword">subscript</span>(<span class="params">index</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">get</span> &#123; index &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="初始化器"><a href="#初始化器" class="headerlink" title="初始化器"></a>初始化器</h2><ul><li>如果一个 <code>public </code>类想在另一个模块调用编译生成的默认无参初始化器，必须显示提供 <code>public </code>的无参初始化器，因为 <code>public </code>类的默认初始化器是 <code>internal </code>级别</li><li>required初始化器 &gt;&#x3D; 它的默认访问级别</li><li>如果结构体有private\fileprivate的存储实例属性，那么它的成员初始化器也是private\fileprivate，否则默认就是Internal</li></ul><h2 id="枚举类型的case"><a href="#枚举类型的case" class="headerlink" title="枚举类型的case"></a>枚举类型的case</h2><ul><li><code>不能给枚举enum的每个case单独设置访问级别 </code></li><li>每个case自动接收enum的访问级别</li><li><code>public </code> enum定义的case 也是  <code>public </code></li></ul><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ul><li>协议中定义的要求自动接收协议的访问级别，不能单独设置访问级别</li><li>public协议定义的要求也是public</li><li>协议实现的访问级别必须 &gt;&#x3D; 类型的访问级别，或者 &gt;&#x3D; 协议的访问级别</li></ul><blockquote><p>示例：</p></blockquote><ul><li>下面代码能编译通过么？<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">protocol</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> : <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>不能编译通过，由于类定义的public，public下默认为Internal，权限小于public。</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>如果有显式设置扩展的访问级别，扩展添加的成员自动接收扩展的访问级别</li><li>如果没有显式设置扩展的访问级别，扩展添加的成员的默认访问级别，跟直接在类型中定义的成员一样</li><li>可以单独给扩展添加的成员设置访问级别</li><li>不能给用于遵守协议的扩展显式设置扩展的访问级别</li><li>在同一文件中的扩展，可以写成类似多个部分的类型声明<ul><li>在原本的声明中声明一个私有成员，可以在同一文件的扩展中访问它</li><li>在扩展中声明一个私有成员，可以在同一文件的其他扩展中、原本声明中访问它</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">run0</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">eat0</span>() &#123;</span><br><span class="line">        run1()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">run1</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">eat1</span>() &#123;</span><br><span class="line">        run0()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">eat2</span>() &#123;</span><br><span class="line">        run1()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将方法赋值给var-let"><a href="#将方法赋值给var-let" class="headerlink" title="将方法赋值给var\let"></a>将方法赋值给var\let</h2><ul><li>方法也可以像函数那样，赋值给一个let或者var<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) &#123; <span class="built_in">print</span>(<span class="string">&quot;func run&quot;</span>, age, v) &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">run</span>(<span class="keyword">_</span> <span class="params">v</span>: <span class="type">Int</span>) &#123; <span class="built_in">print</span>(<span class="string">&quot;static func run&quot;</span>, v) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn1 <span class="operator">=</span> <span class="type">Person</span>.run</span><br><span class="line">fn1(<span class="number">10</span>) <span class="comment">// static func run 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn2: (<span class="type">Int</span>) -&gt; () <span class="operator">=</span> <span class="type">Person</span>.run</span><br><span class="line">fn2(<span class="number">20</span>) <span class="comment">// static func run 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn3: (<span class="type">Person</span>) -&gt; ((<span class="type">Int</span>) -&gt; ()) <span class="operator">=</span> <span class="type">Person</span>.run</span><br><span class="line">fn3(<span class="type">Person</span>(age: <span class="number">18</span>))(<span class="number">30</span>) <span class="comment">// func run 18 30</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><code>李明杰老师课件</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义解释&quot;&gt;&lt;a href=&quot;#定义解释&quot; class=&quot;headerlink&quot; title=&quot;定义解释&quot;&gt;&lt;/a&gt;定义解释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在访问权限控制这块，Swift提供了5个不同的访问级别（以下是从高到低排列， 实体指被访问级别修饰的内容）&lt;ul</summary>
      
    
    
    
    <category term="iOS" scheme="http://www.hxtec.top/categories/iOS/"/>
    
    
    <category term="Swift" scheme="http://www.hxtec.top/tags/Swift/"/>
    
    <category term="语法" scheme="http://www.hxtec.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
